
/Users/christopherforte/Dev/particle-init/target/6.1.1/argon/particle-init.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000043b8  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b83d4  000b83d4  000083d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000008c  2003dd4c  000b83f8  0000dd4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000a24  2003ddd8  2003ddd8  0001ddd8  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b8484  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b8488  000b8488  00018488  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b848e  000b848e  0001848e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b84b2  000b84b2  000184b2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   001ba9b0  00000000  00000000  000184b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001a094  00000000  00000000  001d2e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00058cc1  00000000  00000000  001ecefa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003868  00000000  00000000  00245bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000f2e0  00000000  00000000  00249423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00040d78  00000000  00000000  00258703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000579a4  00000000  00000000  0029947b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001b9d02  00000000  00000000  002f0e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000a50c  00000000  00000000  004aab24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strcmp>:
   b401c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4020:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4024:	2a01      	cmp	r2, #1
   b4026:	bf28      	it	cs
   b4028:	429a      	cmpcs	r2, r3
   b402a:	d0f7      	beq.n	b401c <strcmp>
   b402c:	1ad0      	subs	r0, r2, r3
   b402e:	4770      	bx	lr

000b4030 <strlen>:
   b4030:	4603      	mov	r3, r0
   b4032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4036:	2a00      	cmp	r2, #0
   b4038:	d1fb      	bne.n	b4032 <strlen+0x2>
   b403a:	1a18      	subs	r0, r3, r0
   b403c:	3801      	subs	r0, #1
   b403e:	4770      	bx	lr

000b4040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4040:	4809      	ldr	r0, [pc, #36]	; (b4068 <module_user_pre_init+0x28>)
   b4042:	490a      	ldr	r1, [pc, #40]	; (b406c <module_user_pre_init+0x2c>)
   b4044:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4046:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4048:	d005      	beq.n	b4056 <module_user_pre_init+0x16>
   b404a:	4a09      	ldr	r2, [pc, #36]	; (b4070 <module_user_pre_init+0x30>)
   b404c:	4282      	cmp	r2, r0
   b404e:	d002      	beq.n	b4056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4050:	1a12      	subs	r2, r2, r0
   b4052:	f003 fcb3 	bl	b79bc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4056:	4807      	ldr	r0, [pc, #28]	; (b4074 <module_user_pre_init+0x34>)
   b4058:	4a07      	ldr	r2, [pc, #28]	; (b4078 <module_user_pre_init+0x38>)
   b405a:	2100      	movs	r1, #0
   b405c:	1a12      	subs	r2, r2, r0
   b405e:	f003 fcd5 	bl	b7a0c <memset>
    return &link_global_data_start;
}
   b4062:	4801      	ldr	r0, [pc, #4]	; (b4068 <module_user_pre_init+0x28>)
   b4064:	bd08      	pop	{r3, pc}
   b4066:	bf00      	nop
   b4068:	2003dd4c 	.word	0x2003dd4c
   b406c:	000b83f8 	.word	0x000b83f8
   b4070:	2003ddd8 	.word	0x2003ddd8
   b4074:	2003ddd8 	.word	0x2003ddd8
   b4078:	2003e7fc 	.word	0x2003e7fc

000b407c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b407c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b407e:	4e07      	ldr	r6, [pc, #28]	; (b409c <module_user_init+0x20>)
   b4080:	4c07      	ldr	r4, [pc, #28]	; (b40a0 <module_user_init+0x24>)
    module_user_init_hook();
   b4082:	f003 fa69 	bl	b7558 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4086:	1ba4      	subs	r4, r4, r6
   b4088:	08a4      	lsrs	r4, r4, #2
   b408a:	2500      	movs	r5, #0
   b408c:	42ac      	cmp	r4, r5
   b408e:	d100      	bne.n	b4092 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4090:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4092:	f856 3b04 	ldr.w	r3, [r6], #4
   b4096:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4098:	3501      	adds	r5, #1
   b409a:	e7f7      	b.n	b408c <module_user_init+0x10>
   b409c:	000b83ac 	.word	0x000b83ac
   b40a0:	000b83d4 	.word	0x000b83d4

000b40a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b40a4:	f000 b9b2 	b.w	b440c <setup>

000b40a8 <module_user_loop>:
}

void module_user_loop() {
   b40a8:	b508      	push	{r3, lr}
    loop();
   b40aa:	f000 f9e9 	bl	b4480 <loop>
    _post_loop();
}
   b40ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b40b2:	f003 ba09 	b.w	b74c8 <_post_loop>

000b40b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40b6:	f000 bd53 	b.w	b4b60 <malloc>

000b40ba <_Znaj>:
   b40ba:	f000 bd51 	b.w	b4b60 <malloc>

000b40be <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40be:	f000 bd57 	b.w	b4b70 <free>
	...

000b40c4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40c4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40c6:	4a03      	ldr	r2, [pc, #12]	; (b40d4 <__cxa_pure_virtual+0x10>)
   b40c8:	4903      	ldr	r1, [pc, #12]	; (b40d8 <__cxa_pure_virtual+0x14>)
   b40ca:	200c      	movs	r0, #12
   b40cc:	f000 fc6c 	bl	b49a8 <panic_>
  while (1);
   b40d0:	e7fe      	b.n	b40d0 <__cxa_pure_virtual+0xc>
   b40d2:	bf00      	nop
   b40d4:	000b46f9 	.word	0x000b46f9
   b40d8:	000b7d3c 	.word	0x000b7d3c

000b40dc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40dc:	7800      	ldrb	r0, [r0, #0]
   b40de:	fab0 f080 	clz	r0, r0
   b40e2:	0940      	lsrs	r0, r0, #5
   b40e4:	4770      	bx	lr

000b40e6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40e6:	2301      	movs	r3, #1
   b40e8:	7003      	strb	r3, [r0, #0]
   b40ea:	4770      	bx	lr

000b40ec <_ZN10HttpClientC1Ev>:
static const uint16_t DEFAULT_TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b40ec:	b510      	push	{r4, lr}
   b40ee:	4604      	mov	r4, r0
   b40f0:	f003 f888 	bl	b7204 <_ZN9TCPClientC1Ev>
{

}
   b40f4:	4620      	mov	r0, r4
   b40f6:	bd10      	pop	{r4, pc}

000b40f8 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b40f8:	b538      	push	{r3, r4, r5, lr}
   b40fa:	4604      	mov	r4, r0
   b40fc:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b40fe:	f002 fc5b 	bl	b69b8 <_ZN5Print5printEPKc>
    client.print(": ");
   b4102:	4905      	ldr	r1, [pc, #20]	; (b4118 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b4104:	4620      	mov	r0, r4
   b4106:	f002 fc57 	bl	b69b8 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b410a:	4629      	mov	r1, r5
   b410c:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b410e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b4112:	f002 bc64 	b.w	b69de <_ZN5Print7printlnEPKc>
   b4116:	bf00      	nop
   b4118:	000b7efc 	.word	0x000b7efc

000b411c <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b411c:	b538      	push	{r3, r4, r5, lr}
   b411e:	4605      	mov	r5, r0
   b4120:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b4122:	f002 fc49 	bl	b69b8 <_ZN5Print5printEPKc>
    client.print(": ");
   b4126:	490b      	ldr	r1, [pc, #44]	; (b4154 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b4128:	4628      	mov	r0, r5
   b412a:	f002 fc45 	bl	b69b8 <_ZN5Print5printEPKc>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b412e:	2c00      	cmp	r4, #0
   b4130:	da0d      	bge.n	b414e <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b4132:	212d      	movs	r1, #45	; 0x2d
   b4134:	4628      	mov	r0, r5
   b4136:	f002 fc43 	bl	b69c0 <_ZN5Print5printEc>
            val = -n;
   b413a:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b413c:	4628      	mov	r0, r5
   b413e:	220a      	movs	r2, #10
   b4140:	f002 fc57 	bl	b69f2 <_ZN5Print11printNumberEmh>
        n += println();
   b4144:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b4146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b414a:	f002 bc3c 	b.w	b69c6 <_ZN5Print7printlnEv>
            val = n;
   b414e:	4621      	mov	r1, r4
   b4150:	e7f4      	b.n	b413c <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b4152:	bf00      	nop
   b4154:	000b7efc 	.word	0x000b7efc

000b4158 <_GLOBAL__sub_I__ZN10HttpClientC2Ev>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4158:	4b01      	ldr	r3, [pc, #4]	; (b4160 <_GLOBAL__sub_I__ZN10HttpClientC2Ev+0x8>)
   b415a:	2200      	movs	r2, #0
   b415c:	701a      	strb	r2, [r3, #0]

        return;
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = buffer;
}
   b415e:	4770      	bx	lr
   b4160:	2003ddd8 	.word	0x2003ddd8

000b4164 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
{
   b4164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4168:	460e      	mov	r6, r1
   b416a:	b08f      	sub	sp, #60	; 0x3c
   b416c:	461f      	mov	r7, r3
    aResponse.status = -1;
   b416e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4172:	6013      	str	r3, [r2, #0]
{
   b4174:	4604      	mov	r4, r0
    unsigned char equals(const String &s) const;
    unsigned char equals(const char *cstr) const;
    unsigned char operator == (const String &rhs) const {return equals(rhs);}
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
    unsigned char operator != (const String &rhs) const {return !equals(rhs);}
    unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b4176:	2100      	movs	r1, #0
   b4178:	4630      	mov	r0, r6
   b417a:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
   b417e:	4690      	mov	r8, r2
   b4180:	f002 fd44 	bl	b6c0c <_ZNK6String6equalsEPKc>
   b4184:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38
    if(aRequest.hostname!=NULL) {
   b4188:	4603      	mov	r3, r0
   b418a:	b998      	cbnz	r0, b41b4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b418c:	f1be 0f00 	cmp.w	lr, #0
   b4190:	bf14      	ite	ne
   b4192:	4672      	movne	r2, lr
   b4194:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b4196:	6831      	ldr	r1, [r6, #0]
   b4198:	b292      	uxth	r2, r2
   b419a:	4620      	mov	r0, r4
   b419c:	f002 fe36 	bl	b6e0c <_ZN9TCPClient7connectEPKctm>
        connected = client.connect(aRequest.ip, aRequest.port);
   b41a0:	1e05      	subs	r5, r0, #0
   b41a2:	bf18      	it	ne
   b41a4:	2501      	movne	r5, #1
    if (!connected) {
   b41a6:	b9c5      	cbnz	r5, b41da <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b41a8:	4620      	mov	r0, r4
}
   b41aa:	b00f      	add	sp, #60	; 0x3c
   b41ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b41b0:	f002 bfde 	b.w	b7170 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b41b4:	4b79      	ldr	r3, [pc, #484]	; (b439c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b41b6:	9305      	str	r3, [sp, #20]
   b41b8:	f106 0c14 	add.w	ip, r6, #20
   b41bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b41c0:	ad06      	add	r5, sp, #24
   b41c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b41c4:	f8dc 3000 	ldr.w	r3, [ip]
   b41c8:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b41ca:	fa1f f28e 	uxth.w	r2, lr
   b41ce:	2300      	movs	r3, #0
   b41d0:	a905      	add	r1, sp, #20
   b41d2:	4620      	mov	r0, r4
   b41d4:	f002 fefa 	bl	b6fcc <_ZN9TCPClient7connectE9IPAddresstm>
   b41d8:	e7e2      	b.n	b41a0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b41da:	4649      	mov	r1, r9
   b41dc:	4620      	mov	r0, r4
   b41de:	f002 fbeb 	bl	b69b8 <_ZN5Print5printEPKc>
    client.print(" ");
   b41e2:	496f      	ldr	r1, [pc, #444]	; (b43a0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b41e4:	4620      	mov	r0, r4
   b41e6:	f002 fbe7 	bl	b69b8 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b41ea:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b41ec:	4620      	mov	r0, r4
   b41ee:	f002 fbe3 	bl	b69b8 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b41f2:	496c      	ldr	r1, [pc, #432]	; (b43a4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b41f4:	4620      	mov	r0, r4
   b41f6:	f002 fbdf 	bl	b69b8 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b41fa:	496b      	ldr	r1, [pc, #428]	; (b43a8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b41fc:	4a6b      	ldr	r2, [pc, #428]	; (b43ac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b41fe:	4620      	mov	r0, r4
   b4200:	f7ff ff7a 	bl	b40f8 <_ZN10HttpClient10sendHeaderEPKcS1_>
    unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b4204:	2100      	movs	r1, #0
   b4206:	4630      	mov	r0, r6
   b4208:	f002 fd00 	bl	b6c0c <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b420c:	b920      	cbnz	r0, b4218 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b420e:	6832      	ldr	r2, [r6, #0]
   b4210:	4967      	ldr	r1, [pc, #412]	; (b43b0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b4212:	4620      	mov	r0, r4
   b4214:	f7ff ff70 	bl	b40f8 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b4218:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b421c:	2100      	movs	r1, #0
   b421e:	4650      	mov	r0, sl
   b4220:	f002 fcf4 	bl	b6c0c <_ZNK6String6equalsEPKc>
   b4224:	b928      	cbnz	r0, b4232 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", content_len);
   b4226:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b4228:	4962      	ldr	r1, [pc, #392]	; (b43b4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   b422a:	4620      	mov	r0, r4
   b422c:	f7ff ff76 	bl	b411c <_ZN10HttpClient10sendHeaderEPKci>
   b4230:	e006      	b.n	b4240 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b4232:	4961      	ldr	r1, [pc, #388]	; (b43b8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x254>)
   b4234:	4648      	mov	r0, r9
   b4236:	f7ff fef1 	bl	b401c <strcmp>
   b423a:	4602      	mov	r2, r0
   b423c:	2800      	cmp	r0, #0
   b423e:	d0f3      	beq.n	b4228 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b4240:	b15f      	cbz	r7, b425a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf6>
        while (headers[i].header != NULL)
   b4242:	6839      	ldr	r1, [r7, #0]
   b4244:	b149      	cbz	r1, b425a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf6>
            if (headers[i].value != NULL) {
   b4246:	687a      	ldr	r2, [r7, #4]
                sendHeader(headers[i].header, headers[i].value);
   b4248:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b424a:	b11a      	cbz	r2, b4254 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf0>
                sendHeader(headers[i].header, headers[i].value);
   b424c:	f7ff ff54 	bl	b40f8 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b4250:	3708      	adds	r7, #8
        while (headers[i].header != NULL)
   b4252:	e7f6      	b.n	b4242 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xde>
    client.println(aHeaderName);
   b4254:	f002 fbc3 	bl	b69de <_ZN5Print7printlnEPKc>
}
   b4258:	e7fa      	b.n	b4250 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xec>
    client.println();
   b425a:	4620      	mov	r0, r4
   b425c:	f002 fbb3 	bl	b69c6 <_ZN5Print7printlnEv>
    client.flush();
   b4260:	4620      	mov	r0, r4
   b4262:	f002 fd33 	bl	b6ccc <_ZN9TCPClient5flushEv>
   b4266:	2100      	movs	r1, #0
   b4268:	4650      	mov	r0, sl
   b426a:	f002 fccf 	bl	b6c0c <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b426e:	4602      	mov	r2, r0
   b4270:	b9f0      	cbnz	r0, b42b0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x14c>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4272:	4b52      	ldr	r3, [pc, #328]	; (b43bc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x258>)
   b4274:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4276:	f88d 3000 	strb.w	r3, [sp]
   b427a:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b427c:	233c      	movs	r3, #60	; 0x3c
   b427e:	a805      	add	r0, sp, #20
   b4280:	f000 fe58 	bl	b4f34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4284:	9f06      	ldr	r7, [sp, #24]
   b4286:	b17f      	cbz	r7, b42a8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x144>
      if (--_M_use_count == 0)
   b4288:	687b      	ldr	r3, [r7, #4]
   b428a:	3b01      	subs	r3, #1
   b428c:	607b      	str	r3, [r7, #4]
   b428e:	b95b      	cbnz	r3, b42a8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x144>
          _M_dispose();
   b4290:	683b      	ldr	r3, [r7, #0]
   b4292:	4638      	mov	r0, r7
   b4294:	689b      	ldr	r3, [r3, #8]
   b4296:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4298:	68bb      	ldr	r3, [r7, #8]
   b429a:	3b01      	subs	r3, #1
   b429c:	60bb      	str	r3, [r7, #8]
   b429e:	b91b      	cbnz	r3, b42a8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x144>
            _M_destroy();
   b42a0:	683b      	ldr	r3, [r7, #0]
   b42a2:	4638      	mov	r0, r7
   b42a4:	68db      	ldr	r3, [r3, #12]
   b42a6:	4798      	blx	r3
        client.println(aRequest.body);
   b42a8:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b42aa:	4620      	mov	r0, r4
   b42ac:	f002 fb97 	bl	b69de <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b42b0:	2221      	movs	r2, #33	; 0x21
   b42b2:	2100      	movs	r1, #0
   b42b4:	a805      	add	r0, sp, #20
   b42b6:	f003 fba9 	bl	b7a0c <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b42ba:	f000 fa25 	bl	b4708 <HAL_Timer_Get_Milli_Seconds>
    uint16_t actualTimeout = aRequest.timeout == 0 ? DEFAULT_TIMEOUT : aRequest.timeout;
   b42be:	f8b6 904c 	ldrh.w	r9, [r6, #76]	; 0x4c
   b42c2:	9002      	str	r0, [sp, #8]
   b42c4:	f241 3388 	movw	r3, #5000	; 0x1388
    char lastChar = 0;
   b42c8:	2700      	movs	r7, #0
    uint16_t actualTimeout = aRequest.timeout == 0 ? DEFAULT_TIMEOUT : aRequest.timeout;
   b42ca:	f1b9 0f00 	cmp.w	r9, #0
   b42ce:	bf08      	it	eq
   b42d0:	4699      	moveq	r9, r3
    bool inHeaders = true;
   b42d2:	46aa      	mov	sl, r5
    unsigned int bufferPosition = 0;
   b42d4:	463e      	mov	r6, r7
        while (client.available()) {
   b42d6:	4620      	mov	r0, r4
   b42d8:	f002 fef0 	bl	b70bc <_ZN9TCPClient9availableEv>
   b42dc:	2800      	cmp	r0, #0
   b42de:	d05b      	beq.n	b4398 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>
            char c = client.read();
   b42e0:	4620      	mov	r0, r4
   b42e2:	f002 fcd9 	bl	b6c98 <_ZN9TCPClient4readEv>
   b42e6:	fa5f fb80 	uxtb.w	fp, r0
   b42ea:	f000 fa0d 	bl	b4708 <HAL_Timer_Get_Milli_Seconds>
   b42ee:	9002      	str	r0, [sp, #8]
            if (inHeaders) {
   b42f0:	f1ba 0f00 	cmp.w	sl, #0
   b42f4:	d017      	beq.n	b4326 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1c2>
                if ((c == '\n') && (lastChar == '\n')) {
   b42f6:	f1bb 0f0a 	cmp.w	fp, #10
   b42fa:	d110      	bne.n	b431e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ba>
   b42fc:	2f0a      	cmp	r7, #10
   b42fe:	d11a      	bne.n	b4336 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1d2>
                    aResponse.status = atoi(&buffer[9]);
   b4300:	f10d 001d 	add.w	r0, sp, #29
   b4304:	f003 fb4e 	bl	b79a4 <atoi>
                    inHeaders = false;
   b4308:	f04f 0a00 	mov.w	sl, #0
                    aResponse.status = atoi(&buffer[9]);
   b430c:	f8c8 0000 	str.w	r0, [r8]
                    memset(&buffer[0], 0, sizeof(buffer));
   b4310:	2221      	movs	r2, #33	; 0x21
   b4312:	2100      	movs	r1, #0
   b4314:	a805      	add	r0, sp, #20
   b4316:	f003 fb79 	bl	b7a0c <memset>
                    bufferPosition = 0;
   b431a:	4656      	mov	r6, sl
                    continue;
   b431c:	e7db      	b.n	b42d6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x172>
                } else if (c != '\r') {
   b431e:	f1bb 0f0d 	cmp.w	fp, #13
   b4322:	bf18      	it	ne
   b4324:	465f      	movne	r7, fp
            if (bufferPosition < sizeof(buffer)-1) {
   b4326:	2e1f      	cmp	r6, #31
   b4328:	d807      	bhi.n	b433a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1d6>
                buffer[bufferPosition] = c;
   b432a:	ab0e      	add	r3, sp, #56	; 0x38
   b432c:	4433      	add	r3, r6
   b432e:	f803 bc24 	strb.w	fp, [r3, #-36]
            bufferPosition++;
   b4332:	3601      	adds	r6, #1
   b4334:	e7cf      	b.n	b42d6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x172>
   b4336:	465f      	mov	r7, fp
   b4338:	e7f5      	b.n	b4326 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1c2>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b433a:	2e20      	cmp	r6, #32
   b433c:	d1f9      	bne.n	b4332 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ce>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b433e:	f04f 0300 	mov.w	r3, #0
                client.stop();
   b4342:	4620      	mov	r0, r4
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b4344:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                client.stop();
   b4348:	f002 ff12 	bl	b7170 <_ZN9TCPClient4stopEv>
                error = true;
   b434c:	46ab      	mov	fp, r5
   b434e:	f000 f9db 	bl	b4708 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > actualTimeout;
   b4352:	9b02      	ldr	r3, [sp, #8]
   b4354:	1ac3      	subs	r3, r0, r3
   b4356:	9303      	str	r3, [sp, #12]
        if (!error && !timeout) {
   b4358:	f1bb 0f00 	cmp.w	fp, #0
   b435c:	d104      	bne.n	b4368 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x204>
   b435e:	454b      	cmp	r3, r9
   b4360:	d802      	bhi.n	b4368 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x204>
            delay(200);
   b4362:	20c8      	movs	r0, #200	; 0xc8
   b4364:	f000 fc44 	bl	b4bf0 <delay>
    } while (client.connected() && !timeout && !error);
   b4368:	4620      	mov	r0, r4
   b436a:	f002 fdcd 	bl	b6f08 <_ZN9TCPClient9connectedEv>
   b436e:	b128      	cbz	r0, b437c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x218>
   b4370:	9b03      	ldr	r3, [sp, #12]
   b4372:	454b      	cmp	r3, r9
   b4374:	d802      	bhi.n	b437c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x218>
   b4376:	f1bb 0f00 	cmp.w	fp, #0
   b437a:	d0ac      	beq.n	b42d6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x172>
    client.stop();
   b437c:	4620      	mov	r0, r4
   b437e:	f002 fef7 	bl	b7170 <_ZN9TCPClient4stopEv>
    if (inHeaders) {
   b4382:	f1ba 0f00 	cmp.w	sl, #0
   b4386:	d104      	bne.n	b4392 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22e>
    aResponse.body = buffer;
   b4388:	a905      	add	r1, sp, #20
   b438a:	f108 0004 	add.w	r0, r8, #4
   b438e:	f002 fc2b 	bl	b6be8 <_ZN6StringaSEPKc>
}
   b4392:	b00f      	add	sp, #60	; 0x3c
   b4394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4398:	4683      	mov	fp, r0
   b439a:	e7d8      	b.n	b434e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ea>
   b439c:	000b7e90 	.word	0x000b7e90
   b43a0:	000b7ef8 	.word	0x000b7ef8
   b43a4:	000b7d51 	.word	0x000b7d51
   b43a8:	000b7d63 	.word	0x000b7d63
   b43ac:	000b7d5d 	.word	0x000b7d5d
   b43b0:	000b7d6e 	.word	0x000b7d6e
   b43b4:	000b7d73 	.word	0x000b7d73
   b43b8:	000b7d82 	.word	0x000b7d82
   b43bc:	2003ddd8 	.word	0x2003ddd8

000b43c0 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b43c0:	4770      	bx	lr
	...

000b43c4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b43c4:	4b0a      	ldr	r3, [pc, #40]	; (b43f0 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b43c6:	b510      	push	{r4, lr}
   b43c8:	4604      	mov	r4, r0
   b43ca:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b43cc:	f001 fbfc 	bl	b5bc8 <_ZN5spark10LogManager8instanceEv>
   b43d0:	4621      	mov	r1, r4
   b43d2:	f001 fe46 	bl	b6062 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b43d6:	f002 fff1 	bl	b73bc <_Z16_fetch_usbserialv>
   b43da:	f002 ffe3 	bl	b73a4 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b43de:	4620      	mov	r0, r4
   b43e0:	4b04      	ldr	r3, [pc, #16]	; (b43f4 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b43e2:	f840 3b04 	str.w	r3, [r0], #4
   b43e6:	f001 fcc5 	bl	b5d74 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b43ea:	4620      	mov	r0, r4
   b43ec:	bd10      	pop	{r4, pc}
   b43ee:	bf00      	nop
   b43f0:	000b7db8 	.word	0x000b7db8
   b43f4:	000b7da0 	.word	0x000b7da0

000b43f8 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b43f8:	b510      	push	{r4, lr}
   b43fa:	4604      	mov	r4, r0
    }
   b43fc:	f7ff ffe2 	bl	b43c4 <_ZN5spark16SerialLogHandlerD1Ev>
   b4400:	4620      	mov	r0, r4
   b4402:	2124      	movs	r1, #36	; 0x24
   b4404:	f7ff fe5b 	bl	b40be <_ZdlPvj>
   b4408:	4620      	mov	r0, r4
   b440a:	bd10      	pop	{r4, pc}

000b440c <setup>:

int val = 0;

char buf[1024];

void setup() {
   b440c:	b508      	push	{r3, lr}
    Serial.begin(9600);
   b440e:	f002 ffd5 	bl	b73bc <_Z16_fetch_usbserialv>
}
   b4412:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.begin(9600);
   b4416:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b441a:	f002 bfbf 	b.w	b739c <_ZN9USBSerial5beginEl>
	...

000b4420 <_Z14create_payloadv>:

char* create_payload() {
   b4420:	b570      	push	{r4, r5, r6, lr}
    memset(buf, 0, sizeof(buf));
   b4422:	4e13      	ldr	r6, [pc, #76]	; (b4470 <_Z14create_payloadv+0x50>)
    val = analogRead(ANALOG_PIN);
   b4424:	4c13      	ldr	r4, [pc, #76]	; (b4474 <_Z14create_payloadv+0x54>)
    memset(buf, 0, sizeof(buf));
   b4426:	f44f 6580 	mov.w	r5, #1024	; 0x400
char* create_payload() {
   b442a:	b086      	sub	sp, #24
    memset(buf, 0, sizeof(buf));
   b442c:	462a      	mov	r2, r5
   b442e:	2100      	movs	r1, #0
   b4430:	4630      	mov	r0, r6
   b4432:	f003 faeb 	bl	b7a0c <memset>
    val = analogRead(ANALOG_PIN);
   b4436:	2012      	movs	r0, #18
   b4438:	f003 f8fe 	bl	b7638 <analogRead>
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   b443c:	2300      	movs	r3, #0

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
   b443e:	4a0e      	ldr	r2, [pc, #56]	; (b4478 <_Z14create_payloadv+0x58>)
   b4440:	6020      	str	r0, [r4, #0]
    JSONBufferWriter writer(buf, sizeof(buf));
    writer.beginObject();
   b4442:	a801      	add	r0, sp, #4
        state_(BEGIN) {
   b4444:	f88d 3008 	strb.w	r3, [sp, #8]
        n_(0) {
   b4448:	9305      	str	r3, [sp, #20]
   b444a:	9201      	str	r2, [sp, #4]
   b444c:	e9cd 6503 	strd	r6, r5, [sp, #12]
   b4450:	f001 f951 	bl	b56f6 <_ZN5spark10JSONWriter11beginObjectEv>
    return this->name(name, strlen(name));
   b4454:	2205      	movs	r2, #5
   b4456:	4909      	ldr	r1, [pc, #36]	; (b447c <_Z14create_payloadv+0x5c>)
   b4458:	a801      	add	r0, sp, #4
   b445a:	f001 f9db 	bl	b5814 <_ZN5spark10JSONWriter4nameEPKcj>
    writer.name("value").value(val);
   b445e:	6821      	ldr	r1, [r4, #0]
   b4460:	f001 f956 	bl	b5710 <_ZN5spark10JSONWriter5valueEi>
    writer.endObject();
   b4464:	a801      	add	r0, sp, #4
   b4466:	f001 f930 	bl	b56ca <_ZN5spark10JSONWriter9endObjectEv>
    return writer.buffer();
}
   b446a:	9803      	ldr	r0, [sp, #12]
   b446c:	b006      	add	sp, #24
   b446e:	bd70      	pop	{r4, r5, r6, pc}
   b4470:	2003dde8 	.word	0x2003dde8
   b4474:	2003e68c 	.word	0x2003e68c
   b4478:	000b7eb0 	.word	0x000b7eb0
   b447c:	000b7d87 	.word	0x000b7d87

000b4480 <loop>:


void loop() {
   b4480:	b513      	push	{r0, r1, r4, lr}
    request.hostname = MBP_API_HOST;
   b4482:	4c0f      	ldr	r4, [pc, #60]	; (b44c0 <loop+0x40>)
   b4484:	490f      	ldr	r1, [pc, #60]	; (b44c4 <loop+0x44>)
   b4486:	4620      	mov	r0, r4
   b4488:	f002 fbae 	bl	b6be8 <_ZN6StringaSEPKc>
    request.port = API_PORT;
   b448c:	f241 3388 	movw	r3, #5000	; 0x1388
   b4490:	63a3      	str	r3, [r4, #56]	; 0x38
    request.body = create_payload();
   b4492:	f7ff ffc5 	bl	b4420 <_Z14create_payloadv>
   b4496:	4601      	mov	r1, r0
   b4498:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b449c:	f002 fba4 	bl	b6be8 <_ZN6StringaSEPKc>
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
    }

    void post(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
   b44a0:	4b09      	ldr	r3, [pc, #36]	; (b44c8 <loop+0x48>)
   b44a2:	9300      	str	r3, [sp, #0]
   b44a4:	4a09      	ldr	r2, [pc, #36]	; (b44cc <loop+0x4c>)
   b44a6:	4b0a      	ldr	r3, [pc, #40]	; (b44d0 <loop+0x50>)
   b44a8:	480a      	ldr	r0, [pc, #40]	; (b44d4 <loop+0x54>)
   b44aa:	4621      	mov	r1, r4
   b44ac:	f7ff fe5a 	bl	b4164 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>

    http.post(request, response, headers);
    delay( DELAY_SECONDS );
   b44b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b44b4:	b002      	add	sp, #8
   b44b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay( DELAY_SECONDS );
   b44ba:	f000 bb99 	b.w	b4bf0 <delay>
   b44be:	bf00      	nop
   b44c0:	2003e628 	.word	0x2003e628
   b44c4:	000b7d8d 	.word	0x000b7d8d
   b44c8:	000b7d82 	.word	0x000b7d82
   b44cc:	2003e678 	.word	0x2003e678
   b44d0:	2003dd4c 	.word	0x2003dd4c
   b44d4:	2003e1e8 	.word	0x2003e1e8

000b44d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b44d8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b44da:	e9d0 5300 	ldrd	r5, r3, [r0]
   b44de:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b44e0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b44e2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b44e6:	42ae      	cmp	r6, r5
   b44e8:	d004      	beq.n	b44f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b44ea:	4628      	mov	r0, r5
   b44ec:	f002 fada 	bl	b6aa4 <_ZN6StringD1Ev>
   b44f0:	3514      	adds	r5, #20
   b44f2:	e7f8      	b.n	b44e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b44f4:	6820      	ldr	r0, [r4, #0]
   b44f6:	f000 fb3b 	bl	b4b70 <free>
    AllocatorT::free(data_);
}
   b44fa:	4620      	mov	r0, r4
   b44fc:	bd70      	pop	{r4, r5, r6, pc}

000b44fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b44fe:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4502:	4604      	mov	r4, r0
   b4504:	460d      	mov	r5, r1
   b4506:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4508:	d916      	bls.n	b4538 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b450a:	4290      	cmp	r0, r2
   b450c:	d215      	bcs.n	b453a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b450e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4512:	1a75      	subs	r5, r6, r1
   b4514:	f1a1 0714 	sub.w	r7, r1, #20
   b4518:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b451a:	42b7      	cmp	r7, r6
   b451c:	d01c      	beq.n	b4558 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b451e:	b12c      	cbz	r4, b452c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4520:	4631      	mov	r1, r6
   b4522:	4620      	mov	r0, r4
   b4524:	f002 fb3b 	bl	b6b9e <_ZN6StringC1EOS_>
   b4528:	7c33      	ldrb	r3, [r6, #16]
   b452a:	7423      	strb	r3, [r4, #16]
   b452c:	4630      	mov	r0, r6
   b452e:	f002 fab9 	bl	b6aa4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4532:	3e14      	subs	r6, #20
   b4534:	3c14      	subs	r4, #20
   b4536:	e7f0      	b.n	b451a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4538:	d00e      	beq.n	b4558 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b453a:	42b5      	cmp	r5, r6
   b453c:	d00c      	beq.n	b4558 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b453e:	b12c      	cbz	r4, b454c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4540:	4629      	mov	r1, r5
   b4542:	4620      	mov	r0, r4
   b4544:	f002 fb2b 	bl	b6b9e <_ZN6StringC1EOS_>
   b4548:	7c2b      	ldrb	r3, [r5, #16]
   b454a:	7423      	strb	r3, [r4, #16]
   b454c:	4628      	mov	r0, r5
   b454e:	f002 faa9 	bl	b6aa4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4552:	3514      	adds	r5, #20
   b4554:	3414      	adds	r4, #20
   b4556:	e7f0      	b.n	b453a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b455a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b455a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b455e:	2300      	movs	r3, #0
   b4560:	e9c0 3300 	strd	r3, r3, [r0]
   b4564:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4566:	684f      	ldr	r7, [r1, #4]
   b4568:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b456a:	4604      	mov	r4, r0
   b456c:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b456e:	dd23      	ble.n	b45b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4570:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4574:	fb08 f007 	mul.w	r0, r8, r7
   b4578:	f000 faf2 	bl	b4b60 <malloc>
            if (!d) {
   b457c:	4605      	mov	r5, r0
   b457e:	b1d8      	cbz	r0, b45b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4580:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4584:	fb08 1202 	mla	r2, r8, r2, r1
   b4588:	f7ff ffb9 	bl	b44fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b458c:	6820      	ldr	r0, [r4, #0]
   b458e:	f000 faef 	bl	b4b70 <free>
        data_ = d;
   b4592:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4594:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4596:	e9d6 7300 	ldrd	r7, r3, [r6]
   b459a:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b459e:	45b8      	cmp	r8, r7
   b45a0:	d008      	beq.n	b45b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b45a2:	4639      	mov	r1, r7
   b45a4:	4628      	mov	r0, r5
   b45a6:	f002 fb14 	bl	b6bd2 <_ZN6StringC1ERKS_>
   b45aa:	7c3b      	ldrb	r3, [r7, #16]
   b45ac:	742b      	strb	r3, [r5, #16]
   b45ae:	3714      	adds	r7, #20
   b45b0:	3514      	adds	r5, #20
   b45b2:	e7f4      	b.n	b459e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b45b4:	6873      	ldr	r3, [r6, #4]
   b45b6:	6063      	str	r3, [r4, #4]
}
   b45b8:	4620      	mov	r0, r4
   b45ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b45c0 <_GLOBAL__sub_I_http>:
   b45c0:	b570      	push	{r4, r5, r6, lr}
} http_request_t;
   b45c2:	4c2f      	ldr	r4, [pc, #188]	; (b4680 <_GLOBAL__sub_I_http+0xc0>)
HttpClient http;
   b45c4:	482f      	ldr	r0, [pc, #188]	; (b4684 <_GLOBAL__sub_I_http+0xc4>)
   b45c6:	b08c      	sub	sp, #48	; 0x30
HttpClient http;
   b45c8:	f7ff fd90 	bl	b40ec <_ZN10HttpClientC1Ev>
   b45cc:	492e      	ldr	r1, [pc, #184]	; (b4688 <_GLOBAL__sub_I_http+0xc8>)
   b45ce:	4620      	mov	r0, r4
   b45d0:	f002 fab3 	bl	b6b3a <_ZN6StringC1EPK19__FlashStringHelper>
   b45d4:	f104 0010 	add.w	r0, r4, #16
   b45d8:	f000 feda 	bl	b5390 <_ZN9IPAddressC1Ev>
   b45dc:	492a      	ldr	r1, [pc, #168]	; (b4688 <_GLOBAL__sub_I_http+0xc8>)
   b45de:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b45e2:	f002 faaa 	bl	b6b3a <_ZN6StringC1EPK19__FlashStringHelper>
   b45e6:	4928      	ldr	r1, [pc, #160]	; (b4688 <_GLOBAL__sub_I_http+0xc8>)
   b45e8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b45ec:	f002 faa5 	bl	b6b3a <_ZN6StringC1EPK19__FlashStringHelper>
} http_response_t;
   b45f0:	4925      	ldr	r1, [pc, #148]	; (b4688 <_GLOBAL__sub_I_http+0xc8>)
   b45f2:	4826      	ldr	r0, [pc, #152]	; (b468c <_GLOBAL__sub_I_http+0xcc>)
   b45f4:	f002 faa1 	bl	b6b3a <_ZN6StringC1EPK19__FlashStringHelper>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b45f8:	4b25      	ldr	r3, [pc, #148]	; (b4690 <_GLOBAL__sub_I_http+0xd0>)
    SleepResult() {}
   b45fa:	4a26      	ldr	r2, [pc, #152]	; (b4694 <_GLOBAL__sub_I_http+0xd4>)
   b45fc:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b45fe:	2400      	movs	r4, #0
   b4600:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4604:	2001      	movs	r0, #1
   b4606:	f000 f9ef 	bl	b49e8 <set_system_mode>
        capacity_(0) {
   b460a:	e9cd 4400 	strd	r4, r4, [sp]
   b460e:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b4610:	f002 fed4 	bl	b73bc <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4614:	4c20      	ldr	r4, [pc, #128]	; (b4698 <_GLOBAL__sub_I_http+0xd8>)
   b4616:	4605      	mov	r5, r0
   b4618:	4669      	mov	r1, sp
   b461a:	a803      	add	r0, sp, #12
   b461c:	f7ff ff9d 	bl	b455a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4620:	4626      	mov	r6, r4

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   b4622:	a903      	add	r1, sp, #12
   b4624:	a806      	add	r0, sp, #24
   b4626:	f7ff ff98 	bl	b455a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b462a:	4b1c      	ldr	r3, [pc, #112]	; (b469c <_GLOBAL__sub_I_http+0xdc>)
   b462c:	f846 3b04 	str.w	r3, [r6], #4
   b4630:	a906      	add	r1, sp, #24
   b4632:	a809      	add	r0, sp, #36	; 0x24
   b4634:	f7ff ff91 	bl	b455a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4638:	aa09      	add	r2, sp, #36	; 0x24
   b463a:	211e      	movs	r1, #30
   b463c:	4630      	mov	r0, r6
   b463e:	f001 fdb1 	bl	b61a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4642:	a809      	add	r0, sp, #36	; 0x24
   b4644:	f7ff ff48 	bl	b44d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4648:	a806      	add	r0, sp, #24
   b464a:	f7ff ff45 	bl	b44d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b464e:	4b14      	ldr	r3, [pc, #80]	; (b46a0 <_GLOBAL__sub_I_http+0xe0>)
   b4650:	6023      	str	r3, [r4, #0]
   b4652:	6225      	str	r5, [r4, #32]
   b4654:	a803      	add	r0, sp, #12
   b4656:	f7ff ff3f 	bl	b44d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b465a:	4b12      	ldr	r3, [pc, #72]	; (b46a4 <_GLOBAL__sub_I_http+0xe4>)
   b465c:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b465e:	f002 fead 	bl	b73bc <_Z16_fetch_usbserialv>
   b4662:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4666:	f002 fe99 	bl	b739c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b466a:	f001 faad 	bl	b5bc8 <_ZN5spark10LogManager8instanceEv>
   b466e:	4621      	mov	r1, r4
   b4670:	f001 fcb0 	bl	b5fd4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
   b4674:	4668      	mov	r0, sp
   b4676:	f7ff ff2f 	bl	b44d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b467a:	b00c      	add	sp, #48	; 0x30
   b467c:	bd70      	pop	{r4, r5, r6, pc}
   b467e:	bf00      	nop
   b4680:	2003e628 	.word	0x2003e628
   b4684:	2003e1e8 	.word	0x2003e1e8
   b4688:	000b7d5c 	.word	0x000b7d5c
   b468c:	2003e67c 	.word	0x2003e67c
   b4690:	2003dddc 	.word	0x2003dddc
   b4694:	ffff0000 	.word	0xffff0000
   b4698:	2003e604 	.word	0x2003e604
   b469c:	000b7da0 	.word	0x000b7da0
   b46a0:	000b7f50 	.word	0x000b7f50
   b46a4:	000b7db8 	.word	0x000b7db8

000b46a8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b46a8:	b508      	push	{r3, lr}
   b46aa:	4b02      	ldr	r3, [pc, #8]	; (b46b4 <os_mutex_recursive_create+0xc>)
   b46ac:	681b      	ldr	r3, [r3, #0]
   b46ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b46b0:	9301      	str	r3, [sp, #4]
   b46b2:	bd08      	pop	{r3, pc}
   b46b4:	00030248 	.word	0x00030248

000b46b8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b46b8:	b508      	push	{r3, lr}
   b46ba:	4b02      	ldr	r3, [pc, #8]	; (b46c4 <os_mutex_recursive_destroy+0xc>)
   b46bc:	681b      	ldr	r3, [r3, #0]
   b46be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b46c0:	9301      	str	r3, [sp, #4]
   b46c2:	bd08      	pop	{r3, pc}
   b46c4:	00030248 	.word	0x00030248

000b46c8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b46c8:	b508      	push	{r3, lr}
   b46ca:	4b02      	ldr	r3, [pc, #8]	; (b46d4 <os_mutex_recursive_lock+0xc>)
   b46cc:	681b      	ldr	r3, [r3, #0]
   b46ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b46d0:	9301      	str	r3, [sp, #4]
   b46d2:	bd08      	pop	{r3, pc}
   b46d4:	00030248 	.word	0x00030248

000b46d8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b46d8:	b508      	push	{r3, lr}
   b46da:	4b02      	ldr	r3, [pc, #8]	; (b46e4 <os_mutex_recursive_unlock+0xc>)
   b46dc:	681b      	ldr	r3, [r3, #0]
   b46de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b46e0:	9301      	str	r3, [sp, #4]
   b46e2:	bd08      	pop	{r3, pc}
   b46e4:	00030248 	.word	0x00030248

000b46e8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b46e8:	b508      	push	{r3, lr}
   b46ea:	4b02      	ldr	r3, [pc, #8]	; (b46f4 <HAL_RNG_GetRandomNumber+0xc>)
   b46ec:	681b      	ldr	r3, [r3, #0]
   b46ee:	685b      	ldr	r3, [r3, #4]
   b46f0:	9301      	str	r3, [sp, #4]
   b46f2:	bd08      	pop	{r3, pc}
   b46f4:	00030218 	.word	0x00030218

000b46f8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b46f8:	b508      	push	{r3, lr}
   b46fa:	4b02      	ldr	r3, [pc, #8]	; (b4704 <HAL_Delay_Microseconds+0xc>)
   b46fc:	681b      	ldr	r3, [r3, #0]
   b46fe:	68db      	ldr	r3, [r3, #12]
   b4700:	9301      	str	r3, [sp, #4]
   b4702:	bd08      	pop	{r3, pc}
   b4704:	00030218 	.word	0x00030218

000b4708 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4708:	b508      	push	{r3, lr}
   b470a:	4b02      	ldr	r3, [pc, #8]	; (b4714 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b470c:	681b      	ldr	r3, [r3, #0]
   b470e:	695b      	ldr	r3, [r3, #20]
   b4710:	9301      	str	r3, [sp, #4]
   b4712:	bd08      	pop	{r3, pc}
   b4714:	00030218 	.word	0x00030218

000b4718 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b4718:	b508      	push	{r3, lr}
   b471a:	4b02      	ldr	r3, [pc, #8]	; (b4724 <hal_pin_validate_function+0xc>)
   b471c:	681b      	ldr	r3, [r3, #0]
   b471e:	685b      	ldr	r3, [r3, #4]
   b4720:	9301      	str	r3, [sp, #4]
   b4722:	bd08      	pop	{r3, pc}
   b4724:	0003022c 	.word	0x0003022c

000b4728 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4728:	b508      	push	{r3, lr}
   b472a:	4b02      	ldr	r3, [pc, #8]	; (b4734 <hal_adc_read+0xc>)
   b472c:	681b      	ldr	r3, [r3, #0]
   b472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4730:	9301      	str	r3, [sp, #4]
   b4732:	bd08      	pop	{r3, pc}
   b4734:	0003022c 	.word	0x0003022c

000b4738 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4738:	b508      	push	{r3, lr}
   b473a:	4b02      	ldr	r3, [pc, #8]	; (b4744 <hal_i2c_write+0xc>)
   b473c:	681b      	ldr	r3, [r3, #0]
   b473e:	6a1b      	ldr	r3, [r3, #32]
   b4740:	9301      	str	r3, [sp, #4]
   b4742:	bd08      	pop	{r3, pc}
   b4744:	00030228 	.word	0x00030228

000b4748 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4748:	b508      	push	{r3, lr}
   b474a:	4b02      	ldr	r3, [pc, #8]	; (b4754 <hal_i2c_available+0xc>)
   b474c:	681b      	ldr	r3, [r3, #0]
   b474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4750:	9301      	str	r3, [sp, #4]
   b4752:	bd08      	pop	{r3, pc}
   b4754:	00030228 	.word	0x00030228

000b4758 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4758:	b508      	push	{r3, lr}
   b475a:	4b02      	ldr	r3, [pc, #8]	; (b4764 <hal_i2c_read+0xc>)
   b475c:	681b      	ldr	r3, [r3, #0]
   b475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4760:	9301      	str	r3, [sp, #4]
   b4762:	bd08      	pop	{r3, pc}
   b4764:	00030228 	.word	0x00030228

000b4768 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4768:	b508      	push	{r3, lr}
   b476a:	4b02      	ldr	r3, [pc, #8]	; (b4774 <hal_i2c_peek+0xc>)
   b476c:	681b      	ldr	r3, [r3, #0]
   b476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4770:	9301      	str	r3, [sp, #4]
   b4772:	bd08      	pop	{r3, pc}
   b4774:	00030228 	.word	0x00030228

000b4778 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4778:	b508      	push	{r3, lr}
   b477a:	4b02      	ldr	r3, [pc, #8]	; (b4784 <hal_i2c_flush+0xc>)
   b477c:	681b      	ldr	r3, [r3, #0]
   b477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4780:	9301      	str	r3, [sp, #4]
   b4782:	bd08      	pop	{r3, pc}
   b4784:	00030228 	.word	0x00030228

000b4788 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4788:	b508      	push	{r3, lr}
   b478a:	4b02      	ldr	r3, [pc, #8]	; (b4794 <hal_i2c_is_enabled+0xc>)
   b478c:	681b      	ldr	r3, [r3, #0]
   b478e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4790:	9301      	str	r3, [sp, #4]
   b4792:	bd08      	pop	{r3, pc}
   b4794:	00030228 	.word	0x00030228

000b4798 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4798:	b508      	push	{r3, lr}
   b479a:	4b02      	ldr	r3, [pc, #8]	; (b47a4 <hal_i2c_init+0xc>)
   b479c:	681b      	ldr	r3, [r3, #0]
   b479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b47a0:	9301      	str	r3, [sp, #4]
   b47a2:	bd08      	pop	{r3, pc}
   b47a4:	00030228 	.word	0x00030228

000b47a8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b47a8:	b508      	push	{r3, lr}
   b47aa:	4b02      	ldr	r3, [pc, #8]	; (b47b4 <if_index_to_name+0xc>)
   b47ac:	681b      	ldr	r3, [r3, #0]
   b47ae:	695b      	ldr	r3, [r3, #20]
   b47b0:	9301      	str	r3, [sp, #4]
   b47b2:	bd08      	pop	{r3, pc}
   b47b4:	0003026c 	.word	0x0003026c

000b47b8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b47b8:	b508      	push	{r3, lr}
   b47ba:	4b02      	ldr	r3, [pc, #8]	; (b47c4 <inet_inet_ntop+0xc>)
   b47bc:	681b      	ldr	r3, [r3, #0]
   b47be:	695b      	ldr	r3, [r3, #20]
   b47c0:	9301      	str	r3, [sp, #4]
   b47c2:	bd08      	pop	{r3, pc}
   b47c4:	00030264 	.word	0x00030264

000b47c8 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b47c8:	b508      	push	{r3, lr}
   b47ca:	4b02      	ldr	r3, [pc, #8]	; (b47d4 <inet_htonl+0xc>)
   b47cc:	681b      	ldr	r3, [r3, #0]
   b47ce:	6a1b      	ldr	r3, [r3, #32]
   b47d0:	9301      	str	r3, [sp, #4]
   b47d2:	bd08      	pop	{r3, pc}
   b47d4:	00030264 	.word	0x00030264

000b47d8 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b47d8:	b508      	push	{r3, lr}
   b47da:	4b02      	ldr	r3, [pc, #8]	; (b47e4 <inet_htons+0xc>)
   b47dc:	681b      	ldr	r3, [r3, #0]
   b47de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b47e0:	9301      	str	r3, [sp, #4]
   b47e2:	bd08      	pop	{r3, pc}
   b47e4:	00030264 	.word	0x00030264

000b47e8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b47e8:	b508      	push	{r3, lr}
   b47ea:	4b02      	ldr	r3, [pc, #8]	; (b47f4 <netdb_freeaddrinfo+0xc>)
   b47ec:	681b      	ldr	r3, [r3, #0]
   b47ee:	689b      	ldr	r3, [r3, #8]
   b47f0:	9301      	str	r3, [sp, #4]
   b47f2:	bd08      	pop	{r3, pc}
   b47f4:	00030268 	.word	0x00030268

000b47f8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b47f8:	b508      	push	{r3, lr}
   b47fa:	4b02      	ldr	r3, [pc, #8]	; (b4804 <netdb_getaddrinfo+0xc>)
   b47fc:	681b      	ldr	r3, [r3, #0]
   b47fe:	68db      	ldr	r3, [r3, #12]
   b4800:	9301      	str	r3, [sp, #4]
   b4802:	bd08      	pop	{r3, pc}
   b4804:	00030268 	.word	0x00030268

000b4808 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b4808:	b508      	push	{r3, lr}
   b480a:	4b02      	ldr	r3, [pc, #8]	; (b4814 <sock_setsockopt+0xc>)
   b480c:	681b      	ldr	r3, [r3, #0]
   b480e:	699b      	ldr	r3, [r3, #24]
   b4810:	9301      	str	r3, [sp, #4]
   b4812:	bd08      	pop	{r3, pc}
   b4814:	00030238 	.word	0x00030238

000b4818 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4818:	b508      	push	{r3, lr}
   b481a:	4b02      	ldr	r3, [pc, #8]	; (b4824 <sock_close+0xc>)
   b481c:	681b      	ldr	r3, [r3, #0]
   b481e:	69db      	ldr	r3, [r3, #28]
   b4820:	9301      	str	r3, [sp, #4]
   b4822:	bd08      	pop	{r3, pc}
   b4824:	00030238 	.word	0x00030238

000b4828 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b4828:	b508      	push	{r3, lr}
   b482a:	4b02      	ldr	r3, [pc, #8]	; (b4834 <sock_connect+0xc>)
   b482c:	681b      	ldr	r3, [r3, #0]
   b482e:	6a1b      	ldr	r3, [r3, #32]
   b4830:	9301      	str	r3, [sp, #4]
   b4832:	bd08      	pop	{r3, pc}
   b4834:	00030238 	.word	0x00030238

000b4838 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b4838:	b508      	push	{r3, lr}
   b483a:	4b02      	ldr	r3, [pc, #8]	; (b4844 <sock_recv+0xc>)
   b483c:	681b      	ldr	r3, [r3, #0]
   b483e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4840:	9301      	str	r3, [sp, #4]
   b4842:	bd08      	pop	{r3, pc}
   b4844:	00030238 	.word	0x00030238

000b4848 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b4848:	b508      	push	{r3, lr}
   b484a:	4b02      	ldr	r3, [pc, #8]	; (b4854 <sock_send+0xc>)
   b484c:	681b      	ldr	r3, [r3, #0]
   b484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4850:	9301      	str	r3, [sp, #4]
   b4852:	bd08      	pop	{r3, pc}
   b4854:	00030238 	.word	0x00030238

000b4858 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b4858:	b508      	push	{r3, lr}
   b485a:	4b02      	ldr	r3, [pc, #8]	; (b4864 <sock_socket+0xc>)
   b485c:	681b      	ldr	r3, [r3, #0]
   b485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4860:	9301      	str	r3, [sp, #4]
   b4862:	bd08      	pop	{r3, pc}
   b4864:	00030238 	.word	0x00030238

000b4868 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4868:	b508      	push	{r3, lr}
   b486a:	4b02      	ldr	r3, [pc, #8]	; (b4874 <hal_spi_init+0xc>)
   b486c:	681b      	ldr	r3, [r3, #0]
   b486e:	69db      	ldr	r3, [r3, #28]
   b4870:	9301      	str	r3, [sp, #4]
   b4872:	bd08      	pop	{r3, pc}
   b4874:	00030230 	.word	0x00030230

000b4878 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4878:	b508      	push	{r3, lr}
   b487a:	4b02      	ldr	r3, [pc, #8]	; (b4884 <hal_spi_is_enabled+0xc>)
   b487c:	681b      	ldr	r3, [r3, #0]
   b487e:	6a1b      	ldr	r3, [r3, #32]
   b4880:	9301      	str	r3, [sp, #4]
   b4882:	bd08      	pop	{r3, pc}
   b4884:	00030230 	.word	0x00030230

000b4888 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b4888:	b508      	push	{r3, lr}
   b488a:	4b02      	ldr	r3, [pc, #8]	; (b4894 <hal_usart_end+0xc>)
   b488c:	681b      	ldr	r3, [r3, #0]
   b488e:	689b      	ldr	r3, [r3, #8]
   b4890:	9301      	str	r3, [sp, #4]
   b4892:	bd08      	pop	{r3, pc}
   b4894:	0003023c 	.word	0x0003023c

000b4898 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4898:	b508      	push	{r3, lr}
   b489a:	4b02      	ldr	r3, [pc, #8]	; (b48a4 <hal_usart_write+0xc>)
   b489c:	681b      	ldr	r3, [r3, #0]
   b489e:	68db      	ldr	r3, [r3, #12]
   b48a0:	9301      	str	r3, [sp, #4]
   b48a2:	bd08      	pop	{r3, pc}
   b48a4:	0003023c 	.word	0x0003023c

000b48a8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b48a8:	b508      	push	{r3, lr}
   b48aa:	4b02      	ldr	r3, [pc, #8]	; (b48b4 <hal_usart_available+0xc>)
   b48ac:	681b      	ldr	r3, [r3, #0]
   b48ae:	691b      	ldr	r3, [r3, #16]
   b48b0:	9301      	str	r3, [sp, #4]
   b48b2:	bd08      	pop	{r3, pc}
   b48b4:	0003023c 	.word	0x0003023c

000b48b8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b48b8:	b508      	push	{r3, lr}
   b48ba:	4b02      	ldr	r3, [pc, #8]	; (b48c4 <hal_usart_read+0xc>)
   b48bc:	681b      	ldr	r3, [r3, #0]
   b48be:	695b      	ldr	r3, [r3, #20]
   b48c0:	9301      	str	r3, [sp, #4]
   b48c2:	bd08      	pop	{r3, pc}
   b48c4:	0003023c 	.word	0x0003023c

000b48c8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b48c8:	b508      	push	{r3, lr}
   b48ca:	4b02      	ldr	r3, [pc, #8]	; (b48d4 <hal_usart_peek+0xc>)
   b48cc:	681b      	ldr	r3, [r3, #0]
   b48ce:	699b      	ldr	r3, [r3, #24]
   b48d0:	9301      	str	r3, [sp, #4]
   b48d2:	bd08      	pop	{r3, pc}
   b48d4:	0003023c 	.word	0x0003023c

000b48d8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b48d8:	b508      	push	{r3, lr}
   b48da:	4b02      	ldr	r3, [pc, #8]	; (b48e4 <hal_usart_flush+0xc>)
   b48dc:	681b      	ldr	r3, [r3, #0]
   b48de:	69db      	ldr	r3, [r3, #28]
   b48e0:	9301      	str	r3, [sp, #4]
   b48e2:	bd08      	pop	{r3, pc}
   b48e4:	0003023c 	.word	0x0003023c

000b48e8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b48e8:	b508      	push	{r3, lr}
   b48ea:	4b02      	ldr	r3, [pc, #8]	; (b48f4 <hal_usart_is_enabled+0xc>)
   b48ec:	681b      	ldr	r3, [r3, #0]
   b48ee:	6a1b      	ldr	r3, [r3, #32]
   b48f0:	9301      	str	r3, [sp, #4]
   b48f2:	bd08      	pop	{r3, pc}
   b48f4:	0003023c 	.word	0x0003023c

000b48f8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b48f8:	b508      	push	{r3, lr}
   b48fa:	4b02      	ldr	r3, [pc, #8]	; (b4904 <hal_usart_available_data_for_write+0xc>)
   b48fc:	681b      	ldr	r3, [r3, #0]
   b48fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4900:	9301      	str	r3, [sp, #4]
   b4902:	bd08      	pop	{r3, pc}
   b4904:	0003023c 	.word	0x0003023c

000b4908 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4908:	b508      	push	{r3, lr}
   b490a:	4b02      	ldr	r3, [pc, #8]	; (b4914 <hal_usart_begin_config+0xc>)
   b490c:	681b      	ldr	r3, [r3, #0]
   b490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4910:	9301      	str	r3, [sp, #4]
   b4912:	bd08      	pop	{r3, pc}
   b4914:	0003023c 	.word	0x0003023c

000b4918 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4918:	b508      	push	{r3, lr}
   b491a:	4b02      	ldr	r3, [pc, #8]	; (b4924 <hal_usart_init_ex+0xc>)
   b491c:	681b      	ldr	r3, [r3, #0]
   b491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4920:	9301      	str	r3, [sp, #4]
   b4922:	bd08      	pop	{r3, pc}
   b4924:	0003023c 	.word	0x0003023c

000b4928 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4928:	b508      	push	{r3, lr}
   b492a:	4b02      	ldr	r3, [pc, #8]	; (b4934 <HAL_USB_USART_Init+0xc>)
   b492c:	681b      	ldr	r3, [r3, #0]
   b492e:	681b      	ldr	r3, [r3, #0]
   b4930:	9301      	str	r3, [sp, #4]
   b4932:	bd08      	pop	{r3, pc}
   b4934:	0003024c 	.word	0x0003024c

000b4938 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4938:	b508      	push	{r3, lr}
   b493a:	4b02      	ldr	r3, [pc, #8]	; (b4944 <HAL_USB_USART_Begin+0xc>)
   b493c:	681b      	ldr	r3, [r3, #0]
   b493e:	685b      	ldr	r3, [r3, #4]
   b4940:	9301      	str	r3, [sp, #4]
   b4942:	bd08      	pop	{r3, pc}
   b4944:	0003024c 	.word	0x0003024c

000b4948 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b4948:	b508      	push	{r3, lr}
   b494a:	4b02      	ldr	r3, [pc, #8]	; (b4954 <HAL_USB_USART_End+0xc>)
   b494c:	681b      	ldr	r3, [r3, #0]
   b494e:	689b      	ldr	r3, [r3, #8]
   b4950:	9301      	str	r3, [sp, #4]
   b4952:	bd08      	pop	{r3, pc}
   b4954:	0003024c 	.word	0x0003024c

000b4958 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN_WRAP(4, hal_usb, HAL_USB_USART_Available_Data, protected, int32_t(HAL_USB_USART_Serial))
   b4958:	b508      	push	{r3, lr}
   b495a:	4b02      	ldr	r3, [pc, #8]	; (b4964 <HAL_USB_USART_Available_Data+0xc>)
   b495c:	681b      	ldr	r3, [r3, #0]
   b495e:	691b      	ldr	r3, [r3, #16]
   b4960:	9301      	str	r3, [sp, #4]
   b4962:	bd08      	pop	{r3, pc}
   b4964:	0003024c 	.word	0x0003024c

000b4968 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN_WRAP(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, protected, int32_t(HAL_USB_USART_Serial))
   b4968:	b508      	push	{r3, lr}
   b496a:	4b02      	ldr	r3, [pc, #8]	; (b4974 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b496c:	681b      	ldr	r3, [r3, #0]
   b496e:	695b      	ldr	r3, [r3, #20]
   b4970:	9301      	str	r3, [sp, #4]
   b4972:	bd08      	pop	{r3, pc}
   b4974:	0003024c 	.word	0x0003024c

000b4978 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN_WRAP(6, hal_usb, HAL_USB_USART_Receive_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4978:	b508      	push	{r3, lr}
   b497a:	4b02      	ldr	r3, [pc, #8]	; (b4984 <HAL_USB_USART_Receive_Data+0xc>)
   b497c:	681b      	ldr	r3, [r3, #0]
   b497e:	699b      	ldr	r3, [r3, #24]
   b4980:	9301      	str	r3, [sp, #4]
   b4982:	bd08      	pop	{r3, pc}
   b4984:	0003024c 	.word	0x0003024c

000b4988 <HAL_USB_USART_Send_Data>:
DYNALIB_FN_WRAP(7, hal_usb, HAL_USB_USART_Send_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4988:	b508      	push	{r3, lr}
   b498a:	4b02      	ldr	r3, [pc, #8]	; (b4994 <HAL_USB_USART_Send_Data+0xc>)
   b498c:	681b      	ldr	r3, [r3, #0]
   b498e:	69db      	ldr	r3, [r3, #28]
   b4990:	9301      	str	r3, [sp, #4]
   b4992:	bd08      	pop	{r3, pc}
   b4994:	0003024c 	.word	0x0003024c

000b4998 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN_WRAP(8, hal_usb, HAL_USB_USART_Flush_Data, protected, void(HAL_USB_USART_Serial))
   b4998:	b508      	push	{r3, lr}
   b499a:	4b02      	ldr	r3, [pc, #8]	; (b49a4 <HAL_USB_USART_Flush_Data+0xc>)
   b499c:	681b      	ldr	r3, [r3, #0]
   b499e:	6a1b      	ldr	r3, [r3, #32]
   b49a0:	9301      	str	r3, [sp, #4]
   b49a2:	bd08      	pop	{r3, pc}
   b49a4:	0003024c 	.word	0x0003024c

000b49a8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b49a8:	b508      	push	{r3, lr}
   b49aa:	4b02      	ldr	r3, [pc, #8]	; (b49b4 <panic_+0xc>)
   b49ac:	681b      	ldr	r3, [r3, #0]
   b49ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b49b0:	9301      	str	r3, [sp, #4]
   b49b2:	bd08      	pop	{r3, pc}
   b49b4:	00030260 	.word	0x00030260

000b49b8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b49b8:	b508      	push	{r3, lr}
   b49ba:	4b02      	ldr	r3, [pc, #8]	; (b49c4 <log_message+0xc>)
   b49bc:	681b      	ldr	r3, [r3, #0]
   b49be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b49c0:	9301      	str	r3, [sp, #4]
   b49c2:	bd08      	pop	{r3, pc}
   b49c4:	00030260 	.word	0x00030260

000b49c8 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b49c8:	b508      	push	{r3, lr}
   b49ca:	4b02      	ldr	r3, [pc, #8]	; (b49d4 <log_level_name+0xc>)
   b49cc:	681b      	ldr	r3, [r3, #0]
   b49ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b49d0:	9301      	str	r3, [sp, #4]
   b49d2:	bd08      	pop	{r3, pc}
   b49d4:	00030260 	.word	0x00030260

000b49d8 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b49d8:	b508      	push	{r3, lr}
   b49da:	4b02      	ldr	r3, [pc, #8]	; (b49e4 <log_set_callbacks+0xc>)
   b49dc:	681b      	ldr	r3, [r3, #0]
   b49de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b49e0:	9301      	str	r3, [sp, #4]
   b49e2:	bd08      	pop	{r3, pc}
   b49e4:	00030260 	.word	0x00030260

000b49e8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b49e8:	b508      	push	{r3, lr}
   b49ea:	4b02      	ldr	r3, [pc, #8]	; (b49f4 <set_system_mode+0xc>)
   b49ec:	681b      	ldr	r3, [r3, #0]
   b49ee:	685b      	ldr	r3, [r3, #4]
   b49f0:	9301      	str	r3, [sp, #4]
   b49f2:	bd08      	pop	{r3, pc}
   b49f4:	00030220 	.word	0x00030220

000b49f8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler_deprecated, void(void*))
DYNALIB_FN(3, system, system_firmwareUpdate_deprecated, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer_deprecated, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b49f8:	b508      	push	{r3, lr}
   b49fa:	4b02      	ldr	r3, [pc, #8]	; (b4a04 <system_delay_ms+0xc>)
   b49fc:	681b      	ldr	r3, [r3, #0]
   b49fe:	695b      	ldr	r3, [r3, #20]
   b4a00:	9301      	str	r3, [sp, #4]
   b4a02:	bd08      	pop	{r3, pc}
   b4a04:	00030220 	.word	0x00030220

000b4a08 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN_WRAP(16, system, Spark_Prepare_For_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN_WRAP(17, system, Spark_Save_Firmware_Chunk, protected, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN_WRAP(18, system, Spark_Finish_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4a08:	b508      	push	{r3, lr}
   b4a0a:	4b02      	ldr	r3, [pc, #8]	; (b4a14 <application_thread_current+0xc>)
   b4a0c:	681b      	ldr	r3, [r3, #0]
   b4a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4a10:	9301      	str	r3, [sp, #4]
   b4a12:	bd08      	pop	{r3, pc}
   b4a14:	00030220 	.word	0x00030220

000b4a18 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4a18:	b508      	push	{r3, lr}
   b4a1a:	4b02      	ldr	r3, [pc, #8]	; (b4a24 <application_thread_invoke+0xc>)
   b4a1c:	681b      	ldr	r3, [r3, #0]
   b4a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4a20:	9301      	str	r3, [sp, #4]
   b4a22:	bd08      	pop	{r3, pc}
   b4a24:	00030220 	.word	0x00030220

000b4a28 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4a28:	b508      	push	{r3, lr}
   b4a2a:	4b03      	ldr	r3, [pc, #12]	; (b4a38 <system_ctrl_set_app_request_handler+0x10>)
   b4a2c:	681b      	ldr	r3, [r3, #0]
   b4a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4a32:	9301      	str	r3, [sp, #4]
   b4a34:	bd08      	pop	{r3, pc}
   b4a36:	0000      	.short	0x0000
   b4a38:	00030220 	.word	0x00030220

000b4a3c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4a3c:	b508      	push	{r3, lr}
   b4a3e:	4b03      	ldr	r3, [pc, #12]	; (b4a4c <system_ctrl_set_result+0x10>)
   b4a40:	681b      	ldr	r3, [r3, #0]
   b4a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4a46:	9301      	str	r3, [sp, #4]
   b4a48:	bd08      	pop	{r3, pc}
   b4a4a:	0000      	.short	0x0000
   b4a4c:	00030220 	.word	0x00030220

000b4a50 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b4a50:	b508      	push	{r3, lr}
   b4a52:	4b02      	ldr	r3, [pc, #8]	; (b4a5c <spark_cloud_flag_connected+0xc>)
   b4a54:	681b      	ldr	r3, [r3, #0]
   b4a56:	695b      	ldr	r3, [r3, #20]
   b4a58:	9301      	str	r3, [sp, #4]
   b4a5a:	bd08      	pop	{r3, pc}
   b4a5c:	00030244 	.word	0x00030244

000b4a60 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b4a60:	b508      	push	{r3, lr}
   b4a62:	4b02      	ldr	r3, [pc, #8]	; (b4a6c <spark_send_event+0xc>)
   b4a64:	681b      	ldr	r3, [r3, #0]
   b4a66:	6a1b      	ldr	r3, [r3, #32]
   b4a68:	9301      	str	r3, [sp, #4]
   b4a6a:	bd08      	pop	{r3, pc}
   b4a6c:	00030244 	.word	0x00030244

000b4a70 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4a70:	b508      	push	{r3, lr}
   b4a72:	4b02      	ldr	r3, [pc, #8]	; (b4a7c <spark_set_random_seed_from_cloud_handler+0xc>)
   b4a74:	681b      	ldr	r3, [r3, #0]
   b4a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4a78:	9301      	str	r3, [sp, #4]
   b4a7a:	bd08      	pop	{r3, pc}
   b4a7c:	00030244 	.word	0x00030244

000b4a80 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4a80:	b508      	push	{r3, lr}
   b4a82:	4b02      	ldr	r3, [pc, #8]	; (b4a8c <network_connect+0xc>)
   b4a84:	681b      	ldr	r3, [r3, #0]
   b4a86:	685b      	ldr	r3, [r3, #4]
   b4a88:	9301      	str	r3, [sp, #4]
   b4a8a:	bd08      	pop	{r3, pc}
   b4a8c:	00030240 	.word	0x00030240

000b4a90 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4a90:	b508      	push	{r3, lr}
   b4a92:	4b02      	ldr	r3, [pc, #8]	; (b4a9c <network_connecting+0xc>)
   b4a94:	681b      	ldr	r3, [r3, #0]
   b4a96:	689b      	ldr	r3, [r3, #8]
   b4a98:	9301      	str	r3, [sp, #4]
   b4a9a:	bd08      	pop	{r3, pc}
   b4a9c:	00030240 	.word	0x00030240

000b4aa0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4aa0:	b508      	push	{r3, lr}
   b4aa2:	4b02      	ldr	r3, [pc, #8]	; (b4aac <network_disconnect+0xc>)
   b4aa4:	681b      	ldr	r3, [r3, #0]
   b4aa6:	68db      	ldr	r3, [r3, #12]
   b4aa8:	9301      	str	r3, [sp, #4]
   b4aaa:	bd08      	pop	{r3, pc}
   b4aac:	00030240 	.word	0x00030240

000b4ab0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4ab0:	b508      	push	{r3, lr}
   b4ab2:	4b02      	ldr	r3, [pc, #8]	; (b4abc <network_ready+0xc>)
   b4ab4:	681b      	ldr	r3, [r3, #0]
   b4ab6:	691b      	ldr	r3, [r3, #16]
   b4ab8:	9301      	str	r3, [sp, #4]
   b4aba:	bd08      	pop	{r3, pc}
   b4abc:	00030240 	.word	0x00030240

000b4ac0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4ac0:	b508      	push	{r3, lr}
   b4ac2:	4b02      	ldr	r3, [pc, #8]	; (b4acc <network_on+0xc>)
   b4ac4:	681b      	ldr	r3, [r3, #0]
   b4ac6:	695b      	ldr	r3, [r3, #20]
   b4ac8:	9301      	str	r3, [sp, #4]
   b4aca:	bd08      	pop	{r3, pc}
   b4acc:	00030240 	.word	0x00030240

000b4ad0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4ad0:	b508      	push	{r3, lr}
   b4ad2:	4b02      	ldr	r3, [pc, #8]	; (b4adc <network_off+0xc>)
   b4ad4:	681b      	ldr	r3, [r3, #0]
   b4ad6:	699b      	ldr	r3, [r3, #24]
   b4ad8:	9301      	str	r3, [sp, #4]
   b4ada:	bd08      	pop	{r3, pc}
   b4adc:	00030240 	.word	0x00030240

000b4ae0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4ae0:	b508      	push	{r3, lr}
   b4ae2:	4b02      	ldr	r3, [pc, #8]	; (b4aec <network_listen+0xc>)
   b4ae4:	681b      	ldr	r3, [r3, #0]
   b4ae6:	69db      	ldr	r3, [r3, #28]
   b4ae8:	9301      	str	r3, [sp, #4]
   b4aea:	bd08      	pop	{r3, pc}
   b4aec:	00030240 	.word	0x00030240

000b4af0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4af0:	b508      	push	{r3, lr}
   b4af2:	4b02      	ldr	r3, [pc, #8]	; (b4afc <network_listening+0xc>)
   b4af4:	681b      	ldr	r3, [r3, #0]
   b4af6:	6a1b      	ldr	r3, [r3, #32]
   b4af8:	9301      	str	r3, [sp, #4]
   b4afa:	bd08      	pop	{r3, pc}
   b4afc:	00030240 	.word	0x00030240

000b4b00 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4b00:	b508      	push	{r3, lr}
   b4b02:	4b02      	ldr	r3, [pc, #8]	; (b4b0c <network_set_listen_timeout+0xc>)
   b4b04:	681b      	ldr	r3, [r3, #0]
   b4b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4b08:	9301      	str	r3, [sp, #4]
   b4b0a:	bd08      	pop	{r3, pc}
   b4b0c:	00030240 	.word	0x00030240

000b4b10 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4b10:	b508      	push	{r3, lr}
   b4b12:	4b02      	ldr	r3, [pc, #8]	; (b4b1c <network_get_listen_timeout+0xc>)
   b4b14:	681b      	ldr	r3, [r3, #0]
   b4b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4b18:	9301      	str	r3, [sp, #4]
   b4b1a:	bd08      	pop	{r3, pc}
   b4b1c:	00030240 	.word	0x00030240

000b4b20 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4b20:	b508      	push	{r3, lr}
   b4b22:	4b02      	ldr	r3, [pc, #8]	; (b4b2c <network_is_on+0xc>)
   b4b24:	681b      	ldr	r3, [r3, #0]
   b4b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4b28:	9301      	str	r3, [sp, #4]
   b4b2a:	bd08      	pop	{r3, pc}
   b4b2c:	00030240 	.word	0x00030240

000b4b30 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4b30:	b508      	push	{r3, lr}
   b4b32:	4b02      	ldr	r3, [pc, #8]	; (b4b3c <network_is_off+0xc>)
   b4b34:	681b      	ldr	r3, [r3, #0]
   b4b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4b38:	9301      	str	r3, [sp, #4]
   b4b3a:	bd08      	pop	{r3, pc}
   b4b3c:	00030240 	.word	0x00030240

000b4b40 <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
   b4b40:	b508      	push	{r3, lr}
   b4b42:	4b02      	ldr	r3, [pc, #8]	; (b4b4c <network_prefer+0xc>)
   b4b44:	681b      	ldr	r3, [r3, #0]
   b4b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4b48:	9301      	str	r3, [sp, #4]
   b4b4a:	bd08      	pop	{r3, pc}
   b4b4c:	00030240 	.word	0x00030240

000b4b50 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
   b4b50:	b508      	push	{r3, lr}
   b4b52:	4b02      	ldr	r3, [pc, #8]	; (b4b5c <network_is_preferred+0xc>)
   b4b54:	681b      	ldr	r3, [r3, #0]
   b4b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4b58:	9301      	str	r3, [sp, #4]
   b4b5a:	bd08      	pop	{r3, pc}
   b4b5c:	00030240 	.word	0x00030240

000b4b60 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4b60:	b508      	push	{r3, lr}
   b4b62:	4b02      	ldr	r3, [pc, #8]	; (b4b6c <malloc+0xc>)
   b4b64:	681b      	ldr	r3, [r3, #0]
   b4b66:	681b      	ldr	r3, [r3, #0]
   b4b68:	9301      	str	r3, [sp, #4]
   b4b6a:	bd08      	pop	{r3, pc}
   b4b6c:	0003021c 	.word	0x0003021c

000b4b70 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4b70:	b508      	push	{r3, lr}
   b4b72:	4b02      	ldr	r3, [pc, #8]	; (b4b7c <free+0xc>)
   b4b74:	681b      	ldr	r3, [r3, #0]
   b4b76:	685b      	ldr	r3, [r3, #4]
   b4b78:	9301      	str	r3, [sp, #4]
   b4b7a:	bd08      	pop	{r3, pc}
   b4b7c:	0003021c 	.word	0x0003021c

000b4b80 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4b80:	b508      	push	{r3, lr}
   b4b82:	4b02      	ldr	r3, [pc, #8]	; (b4b8c <realloc+0xc>)
   b4b84:	681b      	ldr	r3, [r3, #0]
   b4b86:	689b      	ldr	r3, [r3, #8]
   b4b88:	9301      	str	r3, [sp, #4]
   b4b8a:	bd08      	pop	{r3, pc}
   b4b8c:	0003021c 	.word	0x0003021c

000b4b90 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4b90:	b508      	push	{r3, lr}
   b4b92:	4b02      	ldr	r3, [pc, #8]	; (b4b9c <vsnprintf+0xc>)
   b4b94:	681b      	ldr	r3, [r3, #0]
   b4b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4b98:	9301      	str	r3, [sp, #4]
   b4b9a:	bd08      	pop	{r3, pc}
   b4b9c:	0003021c 	.word	0x0003021c

000b4ba0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4ba0:	b508      	push	{r3, lr}
   b4ba2:	4b02      	ldr	r3, [pc, #8]	; (b4bac <abort+0xc>)
   b4ba4:	681b      	ldr	r3, [r3, #0]
   b4ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4ba8:	9301      	str	r3, [sp, #4]
   b4baa:	bd08      	pop	{r3, pc}
   b4bac:	0003021c 	.word	0x0003021c

000b4bb0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b4bb0:	b508      	push	{r3, lr}
   b4bb2:	4b02      	ldr	r3, [pc, #8]	; (b4bbc <_malloc_r+0xc>)
   b4bb4:	681b      	ldr	r3, [r3, #0]
   b4bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4bb8:	9301      	str	r3, [sp, #4]
   b4bba:	bd08      	pop	{r3, pc}
   b4bbc:	0003021c 	.word	0x0003021c

000b4bc0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4bc0:	b508      	push	{r3, lr}
   b4bc2:	4b02      	ldr	r3, [pc, #8]	; (b4bcc <__errno+0xc>)
   b4bc4:	681b      	ldr	r3, [r3, #0]
   b4bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4bc8:	9301      	str	r3, [sp, #4]
   b4bca:	bd08      	pop	{r3, pc}
   b4bcc:	0003021c 	.word	0x0003021c

000b4bd0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4bd0:	b508      	push	{r3, lr}
   b4bd2:	4b02      	ldr	r3, [pc, #8]	; (b4bdc <__assert_func+0xc>)
   b4bd4:	681b      	ldr	r3, [r3, #0]
   b4bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4bd8:	9301      	str	r3, [sp, #4]
   b4bda:	bd08      	pop	{r3, pc}
   b4bdc:	0003021c 	.word	0x0003021c

000b4be0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4be0:	b508      	push	{r3, lr}
   b4be2:	4b02      	ldr	r3, [pc, #8]	; (b4bec <newlib_impure_ptr_callback+0xc>)
   b4be4:	681b      	ldr	r3, [r3, #0]
   b4be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4be8:	9301      	str	r3, [sp, #4]
   b4bea:	bd08      	pop	{r3, pc}
   b4bec:	0003021c 	.word	0x0003021c

000b4bf0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4bf0:	2100      	movs	r1, #0
   b4bf2:	f7ff bf01 	b.w	b49f8 <system_delay_ms>

000b4bf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b4bf6:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b4bf8:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4bfa:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4bfc:	b17c      	cbz	r4, b4c1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4bfe:	6863      	ldr	r3, [r4, #4]
   b4c00:	3b01      	subs	r3, #1
   b4c02:	6063      	str	r3, [r4, #4]
   b4c04:	b95b      	cbnz	r3, b4c1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4c06:	6823      	ldr	r3, [r4, #0]
   b4c08:	4620      	mov	r0, r4
   b4c0a:	689b      	ldr	r3, [r3, #8]
   b4c0c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4c0e:	68a3      	ldr	r3, [r4, #8]
   b4c10:	3b01      	subs	r3, #1
   b4c12:	60a3      	str	r3, [r4, #8]
   b4c14:	b91b      	cbnz	r3, b4c1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4c16:	6823      	ldr	r3, [r4, #0]
   b4c18:	4620      	mov	r0, r4
   b4c1a:	68db      	ldr	r3, [r3, #12]
   b4c1c:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4c1e:	4628      	mov	r0, r5
   b4c20:	bd38      	pop	{r3, r4, r5, pc}

000b4c22 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b4c22:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b4c24:	6883      	ldr	r3, [r0, #8]
   b4c26:	4604      	mov	r4, r0
   b4c28:	b90b      	cbnz	r3, b4c2e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b4c2a:	f002 fd9f 	bl	b776c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4c2e:	68c3      	ldr	r3, [r0, #12]
   b4c30:	4798      	blx	r3
      if (_M_manager)
   b4c32:	68a3      	ldr	r3, [r4, #8]
   b4c34:	b11b      	cbz	r3, b4c3e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4c36:	2203      	movs	r2, #3
   b4c38:	4621      	mov	r1, r4
   b4c3a:	4620      	mov	r0, r4
   b4c3c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b4c3e:	4620      	mov	r0, r4
   b4c40:	2110      	movs	r1, #16
}
   b4c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b4c46:	f7ff ba3a 	b.w	b40be <_ZdlPvj>

000b4c4a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4c4a:	b510      	push	{r4, lr}
      if (_M_manager)
   b4c4c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4c4e:	4604      	mov	r4, r0
      if (_M_manager)
   b4c50:	b113      	cbz	r3, b4c58 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4c52:	2203      	movs	r2, #3
   b4c54:	4601      	mov	r1, r0
   b4c56:	4798      	blx	r3
    }
   b4c58:	4620      	mov	r0, r4
   b4c5a:	bd10      	pop	{r4, pc}

000b4c5c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b4c5c:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4c5e:	6843      	ldr	r3, [r0, #4]
   b4c60:	3b01      	subs	r3, #1
    {
   b4c62:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4c64:	6043      	str	r3, [r0, #4]
   b4c66:	b963      	cbnz	r3, b4c82 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b4c68:	6803      	ldr	r3, [r0, #0]
   b4c6a:	689b      	ldr	r3, [r3, #8]
   b4c6c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4c6e:	68a3      	ldr	r3, [r4, #8]
   b4c70:	3b01      	subs	r3, #1
   b4c72:	60a3      	str	r3, [r4, #8]
   b4c74:	b92b      	cbnz	r3, b4c82 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4c76:	6823      	ldr	r3, [r4, #0]
   b4c78:	4620      	mov	r0, r4
   b4c7a:	68db      	ldr	r3, [r3, #12]
    }
   b4c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4c80:	4718      	bx	r3
    }
   b4c82:	bd10      	pop	{r4, pc}

000b4c84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4c84:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4c86:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4c8a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4c8c:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b4c90:	42ae      	cmp	r6, r5
   b4c92:	d004      	beq.n	b4c9e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b4c94:	4628      	mov	r0, r5
   b4c96:	f001 ff05 	bl	b6aa4 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b4c9a:	3510      	adds	r5, #16
   b4c9c:	e7f8      	b.n	b4c90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b4c9e:	6820      	ldr	r0, [r4, #0]
   b4ca0:	f7ff ff66 	bl	b4b70 <free>
    AllocatorT::free(data_);
}
   b4ca4:	4620      	mov	r0, r4
   b4ca6:	bd70      	pop	{r4, r5, r6, pc}

000b4ca8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b4ca8:	b513      	push	{r0, r1, r4, lr}
   b4caa:	460b      	mov	r3, r1
   b4cac:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4cae:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4cb2:	466c      	mov	r4, sp
   b4cb4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4cb8:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4cbc:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4cc0:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4cc4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b4cc8:	b002      	add	sp, #8
   b4cca:	bd10      	pop	{r4, pc}

000b4ccc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4ccc:	4802      	ldr	r0, [pc, #8]	; (b4cd8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4cce:	2300      	movs	r3, #0
   b4cd0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4cd2:	f7ff bce9 	b.w	b46a8 <os_mutex_recursive_create>
   b4cd6:	bf00      	nop
   b4cd8:	2003e690 	.word	0x2003e690

000b4cdc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4cdc:	4770      	bx	lr

000b4cde <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b4cde:	2000      	movs	r0, #0
   b4ce0:	4770      	bx	lr

000b4ce2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4ce2:	b510      	push	{r4, lr}
   b4ce4:	2110      	movs	r1, #16
   b4ce6:	4604      	mov	r4, r0
   b4ce8:	f7ff f9e9 	bl	b40be <_ZdlPvj>
   b4cec:	4620      	mov	r0, r4
   b4cee:	bd10      	pop	{r4, pc}

000b4cf0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b4cf0:	b508      	push	{r3, lr}
      { delete this; }
   b4cf2:	f7ff fff6 	bl	b4ce2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b4cf6:	bd08      	pop	{r3, pc}

000b4cf8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b4cf8:	b530      	push	{r4, r5, lr}
        type_(type) {
   b4cfa:	2200      	movs	r2, #0
   b4cfc:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b4d00:	6002      	str	r2, [r0, #0]
   b4d02:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4d04:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b4d06:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4d08:	680c      	ldr	r4, [r1, #0]
   b4d0a:	8085      	strh	r5, [r0, #4]
   b4d0c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b4d0e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b4d10:	bd30      	pop	{r4, r5, pc}

000b4d12 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b4d12:	b510      	push	{r4, lr}
   b4d14:	4604      	mov	r4, r0
    free((void*)msg_);
   b4d16:	6800      	ldr	r0, [r0, #0]
   b4d18:	f7ff ff2a 	bl	b4b70 <free>
}
   b4d1c:	4620      	mov	r0, r4
   b4d1e:	bd10      	pop	{r4, pc}

000b4d20 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4d20:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b4d22:	68c4      	ldr	r4, [r0, #12]
   b4d24:	b1f4      	cbz	r4, b4d64 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b4d26:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b4d28:	2b02      	cmp	r3, #2
   b4d2a:	d103      	bne.n	b4d34 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b4d2c:	f104 000c 	add.w	r0, r4, #12
   b4d30:	f7ff ffef 	bl	b4d12 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b4d34:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b4d36:	b135      	cbz	r5, b4d46 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b4d38:	4628      	mov	r0, r5
   b4d3a:	f7ff ff86 	bl	b4c4a <_ZNSt14_Function_baseD1Ev>
   b4d3e:	2110      	movs	r1, #16
   b4d40:	4628      	mov	r0, r5
   b4d42:	f7ff f9bc 	bl	b40be <_ZdlPvj>
   b4d46:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b4d48:	b135      	cbz	r5, b4d58 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b4d4a:	4628      	mov	r0, r5
   b4d4c:	f7ff ff7d 	bl	b4c4a <_ZNSt14_Function_baseD1Ev>
   b4d50:	2110      	movs	r1, #16
   b4d52:	4628      	mov	r0, r5
   b4d54:	f7ff f9b3 	bl	b40be <_ZdlPvj>
   b4d58:	4620      	mov	r0, r4
   b4d5a:	2114      	movs	r1, #20
   b4d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4d60:	f7ff b9ad 	b.w	b40be <_ZdlPvj>
   b4d64:	bd38      	pop	{r3, r4, r5, pc}

000b4d66 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4d66:	680b      	ldr	r3, [r1, #0]
   b4d68:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b4d6a:	684b      	ldr	r3, [r1, #4]
   b4d6c:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b4d6e:	b113      	cbz	r3, b4d76 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b4d70:	685a      	ldr	r2, [r3, #4]
   b4d72:	3201      	adds	r2, #1
   b4d74:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4d76:	4770      	bx	lr

000b4d78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b4d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4d7a:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b4d7c:	4668      	mov	r0, sp
   b4d7e:	460d      	mov	r5, r1
   b4d80:	f7ff fff1 	bl	b4d66 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4d84:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4d86:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4d88:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b4d8a:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b4d8c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b4d8e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b4d90:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b4d92:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b4d94:	f7ff ff2f 	bl	b4bf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b4d98:	b135      	cbz	r5, b4da8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b4d9a:	1d28      	adds	r0, r5, #4
   b4d9c:	f7ff ff2b 	bl	b4bf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4da0:	2108      	movs	r1, #8
   b4da2:	4628      	mov	r0, r5
   b4da4:	f7ff f98b 	bl	b40be <_ZdlPvj>
        return p;
    }
   b4da8:	4620      	mov	r0, r4
   b4daa:	b003      	add	sp, #12
   b4dac:	bd30      	pop	{r4, r5, pc}

000b4dae <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b4dae:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4db0:	b510      	push	{r4, lr}
      if (_M_empty())
   b4db2:	b90a      	cbnz	r2, b4db8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b4db4:	f002 fcda 	bl	b776c <_ZSt25__throw_bad_function_callv>
    }
   b4db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4dbc:	68c3      	ldr	r3, [r0, #12]
   b4dbe:	4718      	bx	r3

000b4dc0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4dc0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b4dc2:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4dc4:	f100 0110 	add.w	r1, r0, #16
   b4dc8:	f7ff fff1 	bl	b4dae <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b4dcc:	bd08      	pop	{r3, pc}

000b4dce <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b4dce:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4dd0:	b510      	push	{r4, lr}
      if (_M_empty())
   b4dd2:	b90a      	cbnz	r2, b4dd8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b4dd4:	f002 fcca 	bl	b776c <_ZSt25__throw_bad_function_callv>
    }
   b4dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4ddc:	68c3      	ldr	r3, [r0, #12]
   b4dde:	4718      	bx	r3

000b4de0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4de0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b4de2:	6800      	ldr	r0, [r0, #0]
   b4de4:	f100 0110 	add.w	r1, r0, #16
   b4de8:	f7ff fff1 	bl	b4dce <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b4dec:	bd08      	pop	{r3, pc}
	...

000b4df0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b4df0:	b538      	push	{r3, r4, r5, lr}
   b4df2:	2300      	movs	r3, #0
   b4df4:	4604      	mov	r4, r0
   b4df6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4df8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b4dfa:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4dfc:	f7ff f95b 	bl	b40b6 <_Znwj>
   b4e00:	b128      	cbz	r0, b4e0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b4e02:	2301      	movs	r3, #1
   b4e04:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b4e08:	4b02      	ldr	r3, [pc, #8]	; (b4e14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b4e0a:	6003      	str	r3, [r0, #0]
   b4e0c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4e0e:	6020      	str	r0, [r4, #0]
	}
   b4e10:	4620      	mov	r0, r4
   b4e12:	bd38      	pop	{r3, r4, r5, pc}
   b4e14:	000b7e04 	.word	0x000b7e04

000b4e18 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b4e18:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4e1a:	2300      	movs	r3, #0
   b4e1c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4e1e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4e20:	4604      	mov	r4, r0
   b4e22:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4e24:	b12b      	cbz	r3, b4e32 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4e26:	2202      	movs	r2, #2
   b4e28:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4e2a:	68eb      	ldr	r3, [r5, #12]
   b4e2c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4e2e:	68ab      	ldr	r3, [r5, #8]
   b4e30:	60a3      	str	r3, [r4, #8]
    }
   b4e32:	4620      	mov	r0, r4
   b4e34:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4e38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b4e38:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4e3a:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4e3c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b4e3e:	4668      	mov	r0, sp
   b4e40:	f7ff ff5a 	bl	b4cf8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b4e44:	f04f 0302 	mov.w	r3, #2
   b4e48:	e8d4 2f4f 	ldrexb	r2, [r4]
   b4e4c:	2a00      	cmp	r2, #0
   b4e4e:	d103      	bne.n	b4e58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b4e50:	e8c4 3f41 	strexb	r1, r3, [r4]
   b4e54:	2900      	cmp	r1, #0
   b4e56:	d1f7      	bne.n	b4e48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b4e58:	d125      	bne.n	b4ea6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b4e5a:	f104 050c 	add.w	r5, r4, #12
   b4e5e:	4669      	mov	r1, sp
   b4e60:	4628      	mov	r0, r5
   b4e62:	f7ff ff49 	bl	b4cf8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b4e66:	f3bf 8f5b 	dmb	ish
   b4e6a:	2301      	movs	r3, #1
   b4e6c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b4e6e:	2000      	movs	r0, #0
   b4e70:	f104 0308 	add.w	r3, r4, #8
   b4e74:	f3bf 8f5b 	dmb	ish
   b4e78:	e853 6f00 	ldrex	r6, [r3]
   b4e7c:	e843 0200 	strex	r2, r0, [r3]
   b4e80:	2a00      	cmp	r2, #0
   b4e82:	d1f9      	bne.n	b4e78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b4e84:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b4e88:	b16e      	cbz	r6, b4ea6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b4e8a:	f7ff fdbd 	bl	b4a08 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4e8e:	b178      	cbz	r0, b4eb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b4e90:	4629      	mov	r1, r5
   b4e92:	4630      	mov	r0, r6
   b4e94:	f7ff ff8b 	bl	b4dae <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b4e98:	4630      	mov	r0, r6
   b4e9a:	f7ff fed6 	bl	b4c4a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b4e9e:	2110      	movs	r1, #16
   b4ea0:	4630      	mov	r0, r6
   b4ea2:	f7ff f90c 	bl	b40be <_ZdlPvj>
        p_->setError(std::move(error));
   b4ea6:	4668      	mov	r0, sp
   b4ea8:	f7ff ff33 	bl	b4d12 <_ZN8particle5ErrorD1Ev>
    }
   b4eac:	b009      	add	sp, #36	; 0x24
   b4eae:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b4eb0:	4631      	mov	r1, r6
   b4eb2:	a802      	add	r0, sp, #8
   b4eb4:	f7ff ffb0 	bl	b4e18 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4eb8:	68e0      	ldr	r0, [r4, #12]
   b4eba:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4ebe:	b108      	cbz	r0, b4ec4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b4ec0:	f002 fdfa 	bl	b7ab8 <strdup>
        type_(type) {
   b4ec4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b4ec6:	2010      	movs	r0, #16
   b4ec8:	f8ad 501c 	strh.w	r5, [sp, #28]
   b4ecc:	f7ff f8f3 	bl	b40b6 <_Znwj>
   b4ed0:	4605      	mov	r5, r0
   b4ed2:	b1e8      	cbz	r0, b4f10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b4ed4:	2700      	movs	r7, #0
   b4ed6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4ed8:	2018      	movs	r0, #24
   b4eda:	f7ff f8ec 	bl	b40b6 <_Znwj>
   b4ede:	4604      	mov	r4, r0
   b4ee0:	b188      	cbz	r0, b4f06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b4ee2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b4ee4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b4ee6:	a802      	add	r0, sp, #8
   b4ee8:	f7ff fede 	bl	b4ca8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4eec:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b4eee:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4ef0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4ef2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4ef4:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4ef6:	a906      	add	r1, sp, #24
   b4ef8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4efa:	60e3      	str	r3, [r4, #12]
   b4efc:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b4f00:	9205      	str	r2, [sp, #20]
   b4f02:	f7ff fef9 	bl	b4cf8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b4f06:	4b08      	ldr	r3, [pc, #32]	; (b4f28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b4f08:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b4f0a:	4b08      	ldr	r3, [pc, #32]	; (b4f2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4f0c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b4f0e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b4f10:	a806      	add	r0, sp, #24
   b4f12:	f7ff fefe 	bl	b4d12 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b4f16:	a802      	add	r0, sp, #8
   b4f18:	f7ff fe97 	bl	b4c4a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b4f1c:	2200      	movs	r2, #0
   b4f1e:	4629      	mov	r1, r5
   b4f20:	4803      	ldr	r0, [pc, #12]	; (b4f30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b4f22:	f7ff fd79 	bl	b4a18 <application_thread_invoke>
   b4f26:	e7b7      	b.n	b4e98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b4f28:	000b4dc1 	.word	0x000b4dc1
   b4f2c:	000b5045 	.word	0x000b5045
   b4f30:	000b4c23 	.word	0x000b4c23

000b4f34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b4f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4f38:	b08b      	sub	sp, #44	; 0x2c
   b4f3a:	4605      	mov	r5, r0
   b4f3c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b4f40:	460f      	mov	r7, r1
   b4f42:	4690      	mov	r8, r2
   b4f44:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4f46:	f7ff fd83 	bl	b4a50 <spark_cloud_flag_connected>
   b4f4a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b4f4c:	4683      	mov	fp, r0
   b4f4e:	bb38      	cbnz	r0, b4fa0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b4f50:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b4f54:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b4f56:	a905      	add	r1, sp, #20
   b4f58:	4630      	mov	r0, r6
   b4f5a:	f8ad 3018 	strh.w	r3, [sp, #24]
   b4f5e:	f7ff fecb 	bl	b4cf8 <_ZN8particle5ErrorC1EOS0_>
   b4f62:	2014      	movs	r0, #20
   b4f64:	f7ff f8a7 	bl	b40b6 <_Znwj>
   b4f68:	4604      	mov	r4, r0
   b4f6a:	b148      	cbz	r0, b4f80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b4f6c:	2302      	movs	r3, #2
   b4f6e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4f70:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b4f72:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4f76:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b4f78:	4631      	mov	r1, r6
   b4f7a:	300c      	adds	r0, #12
   b4f7c:	f7ff febc 	bl	b4cf8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4f80:	4628      	mov	r0, r5
	: __shared_count(__p)
   b4f82:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4f84:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b4f88:	f7ff ff32 	bl	b4df0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b4f8c:	4630      	mov	r0, r6
   b4f8e:	f7ff fec0 	bl	b4d12 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b4f92:	a805      	add	r0, sp, #20
   b4f94:	f7ff febd 	bl	b4d12 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b4f98:	4628      	mov	r0, r5
   b4f9a:	b00b      	add	sp, #44	; 0x2c
   b4f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b4fa0:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b4fa2:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b4fa4:	2014      	movs	r0, #20
   b4fa6:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b4faa:	9307      	str	r3, [sp, #28]
   b4fac:	f7ff f883 	bl	b40b6 <_Znwj>
   b4fb0:	4601      	mov	r1, r0
   b4fb2:	b118      	cbz	r0, b4fbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b4fb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b4fb8:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4fba:	7044      	strb	r4, [r0, #1]
   b4fbc:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4fbe:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b4fc0:	f7ff ff16 	bl	b4df0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b4fc4:	4b1e      	ldr	r3, [pc, #120]	; (b5040 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b4fc6:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b4fc8:	2008      	movs	r0, #8
   b4fca:	f7ff f874 	bl	b40b6 <_Znwj>
   b4fce:	4604      	mov	r4, r0
   b4fd0:	b110      	cbz	r0, b4fd8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b4fd2:	a903      	add	r1, sp, #12
   b4fd4:	f7ff fec7 	bl	b4d66 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b4fd8:	9600      	str	r6, [sp, #0]
   b4fda:	fa5f f38a 	uxtb.w	r3, sl
   b4fde:	464a      	mov	r2, r9
   b4fe0:	4641      	mov	r1, r8
   b4fe2:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b4fe4:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b4fe6:	f7ff fd3b 	bl	b4a60 <spark_send_event>
   b4fea:	b9b8      	cbnz	r0, b501c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b4fec:	9b03      	ldr	r3, [sp, #12]
   b4fee:	785b      	ldrb	r3, [r3, #1]
   b4ff0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b4ff4:	b993      	cbnz	r3, b501c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b4ff6:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b4ffa:	a905      	add	r1, sp, #20
   b4ffc:	a803      	add	r0, sp, #12
   b4ffe:	9205      	str	r2, [sp, #20]
   b5000:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5004:	f7ff ff18 	bl	b4e38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5008:	a805      	add	r0, sp, #20
   b500a:	f7ff fe82 	bl	b4d12 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b500e:	a805      	add	r0, sp, #20
   b5010:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5012:	f7ff feb1 	bl	b4d78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b5016:	a806      	add	r0, sp, #24
   b5018:	f7ff fded 	bl	b4bf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b501c:	a903      	add	r1, sp, #12
   b501e:	a805      	add	r0, sp, #20
   b5020:	f7ff fea1 	bl	b4d66 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5024:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5026:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5028:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b502a:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b502c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b502e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b5030:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b5032:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b5034:	f7ff fddf 	bl	b4bf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5038:	a804      	add	r0, sp, #16
   b503a:	f7ff fddc 	bl	b4bf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b503e:	e7ab      	b.n	b4f98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5040:	000b5109 	.word	0x000b5109

000b5044 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b5044:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5048:	4605      	mov	r5, r0
	switch (__op)
   b504a:	d103      	bne.n	b5054 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b504c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b504e:	6003      	str	r3, [r0, #0]
      }
   b5050:	2000      	movs	r0, #0
   b5052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b5054:	2a02      	cmp	r2, #2
   b5056:	d010      	beq.n	b507a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b5058:	2a03      	cmp	r2, #3
   b505a:	d1f9      	bne.n	b5050 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b505c:	6804      	ldr	r4, [r0, #0]
   b505e:	2c00      	cmp	r4, #0
   b5060:	d0f6      	beq.n	b5050 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b5062:	f104 0010 	add.w	r0, r4, #16
   b5066:	f7ff fe54 	bl	b4d12 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b506a:	4620      	mov	r0, r4
   b506c:	f7ff fded 	bl	b4c4a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5070:	2118      	movs	r1, #24
   b5072:	4620      	mov	r0, r4
   b5074:	f7ff f823 	bl	b40be <_ZdlPvj>
   b5078:	e7ea      	b.n	b5050 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b507a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b507c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b507e:	f7ff f81a 	bl	b40b6 <_Znwj>
   b5082:	4604      	mov	r4, r0
   b5084:	b150      	cbz	r0, b509c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b5086:	4631      	mov	r1, r6
   b5088:	f7ff fec6 	bl	b4e18 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b508c:	6930      	ldr	r0, [r6, #16]
   b508e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5092:	b108      	cbz	r0, b5098 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b5094:	f002 fd10 	bl	b7ab8 <strdup>
        type_(type) {
   b5098:	6120      	str	r0, [r4, #16]
   b509a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b509c:	602c      	str	r4, [r5, #0]
	}
   b509e:	e7d7      	b.n	b5050 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b50a0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b50a0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b50a2:	2300      	movs	r3, #0
   b50a4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b50a6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b50a8:	4604      	mov	r4, r0
   b50aa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b50ac:	b12b      	cbz	r3, b50ba <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b50ae:	2202      	movs	r2, #2
   b50b0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b50b2:	68eb      	ldr	r3, [r5, #12]
   b50b4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b50b6:	68ab      	ldr	r3, [r5, #8]
   b50b8:	60a3      	str	r3, [r4, #8]
    }
   b50ba:	4620      	mov	r0, r4
   b50bc:	bd38      	pop	{r3, r4, r5, pc}

000b50be <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b50be:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b50c0:	b570      	push	{r4, r5, r6, lr}
   b50c2:	4604      	mov	r4, r0
	switch (__op)
   b50c4:	d103      	bne.n	b50ce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b50c6:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b50c8:	6003      	str	r3, [r0, #0]
      }
   b50ca:	2000      	movs	r0, #0
   b50cc:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b50ce:	2a02      	cmp	r2, #2
   b50d0:	d00c      	beq.n	b50ec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b50d2:	2a03      	cmp	r2, #3
   b50d4:	d1f9      	bne.n	b50ca <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b50d6:	6804      	ldr	r4, [r0, #0]
   b50d8:	2c00      	cmp	r4, #0
   b50da:	d0f6      	beq.n	b50ca <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b50dc:	4620      	mov	r0, r4
   b50de:	f7ff fdb4 	bl	b4c4a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b50e2:	2114      	movs	r1, #20
   b50e4:	4620      	mov	r0, r4
   b50e6:	f7fe ffea 	bl	b40be <_ZdlPvj>
   b50ea:	e7ee      	b.n	b50ca <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b50ec:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b50ee:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b50f0:	f7fe ffe1 	bl	b40b6 <_Znwj>
   b50f4:	4605      	mov	r5, r0
   b50f6:	b120      	cbz	r0, b5102 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
   b50f8:	4631      	mov	r1, r6
   b50fa:	f7ff ffd1 	bl	b50a0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b50fe:	7c33      	ldrb	r3, [r6, #16]
   b5100:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b5102:	6025      	str	r5, [r4, #0]
	}
   b5104:	e7e1      	b.n	b50ca <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	...

000b5108 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b5108:	b5f0      	push	{r4, r5, r6, r7, lr}
   b510a:	b089      	sub	sp, #36	; 0x24
   b510c:	4604      	mov	r4, r0
   b510e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b5110:	a801      	add	r0, sp, #4
   b5112:	4611      	mov	r1, r2
   b5114:	f7ff fe30 	bl	b4d78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b5118:	b1a4      	cbz	r4, b5144 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b511a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b511c:	b11d      	cbz	r5, b5126 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b511e:	4628      	mov	r0, r5
   b5120:	f002 fcca 	bl	b7ab8 <strdup>
   b5124:	4605      	mov	r5, r0
   b5126:	a801      	add	r0, sp, #4
   b5128:	a903      	add	r1, sp, #12
        type_(type) {
   b512a:	9503      	str	r5, [sp, #12]
   b512c:	f8ad 4010 	strh.w	r4, [sp, #16]
   b5130:	f7ff fe82 	bl	b4e38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5134:	a803      	add	r0, sp, #12
   b5136:	f7ff fdec 	bl	b4d12 <_ZN8particle5ErrorD1Ev>
   b513a:	a802      	add	r0, sp, #8
   b513c:	f7ff fd5b 	bl	b4bf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5140:	b009      	add	sp, #36	; 0x24
   b5142:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b5144:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5146:	2301      	movs	r3, #1
   b5148:	e8d5 2f4f 	ldrexb	r2, [r5]
   b514c:	2a00      	cmp	r2, #0
   b514e:	d103      	bne.n	b5158 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b5150:	e8c5 3f41 	strexb	r1, r3, [r5]
   b5154:	2900      	cmp	r1, #0
   b5156:	d1f7      	bne.n	b5148 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b5158:	d1ef      	bne.n	b513a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b515a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b515c:	f3bf 8f5b 	dmb	ish
   b5160:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5162:	1d2b      	adds	r3, r5, #4
   b5164:	f3bf 8f5b 	dmb	ish
   b5168:	e853 6f00 	ldrex	r6, [r3]
   b516c:	e843 4200 	strex	r2, r4, [r3]
   b5170:	2a00      	cmp	r2, #0
   b5172:	d1f9      	bne.n	b5168 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b5174:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5178:	2e00      	cmp	r6, #0
   b517a:	d0de      	beq.n	b513a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b517c:	4620      	mov	r0, r4
   b517e:	f7ff fc43 	bl	b4a08 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5182:	4607      	mov	r7, r0
   b5184:	b160      	cbz	r0, b51a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5186:	f105 010c 	add.w	r1, r5, #12
   b518a:	4630      	mov	r0, r6
   b518c:	f7ff fe1f 	bl	b4dce <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b5190:	4630      	mov	r0, r6
   b5192:	f7ff fd5a 	bl	b4c4a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5196:	2110      	movs	r1, #16
   b5198:	4630      	mov	r0, r6
   b519a:	f7fe ff90 	bl	b40be <_ZdlPvj>
   b519e:	e7cc      	b.n	b513a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b51a0:	4631      	mov	r1, r6
   b51a2:	a803      	add	r0, sp, #12
   b51a4:	f7ff ff7c 	bl	b50a0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b51a8:	7b2b      	ldrb	r3, [r5, #12]
   b51aa:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b51ae:	2010      	movs	r0, #16
   b51b0:	f7fe ff81 	bl	b40b6 <_Znwj>
   b51b4:	4605      	mov	r5, r0
   b51b6:	b1d0      	cbz	r0, b51ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b51b8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b51ba:	2014      	movs	r0, #20
   b51bc:	f7fe ff7b 	bl	b40b6 <_Znwj>
   b51c0:	4604      	mov	r4, r0
   b51c2:	b178      	cbz	r0, b51e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b51c4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b51c6:	4601      	mov	r1, r0
   b51c8:	a803      	add	r0, sp, #12
   b51ca:	f7ff fd6d 	bl	b4ca8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b51ce:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b51d0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b51d2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b51d4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b51d6:	9205      	str	r2, [sp, #20]
   b51d8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b51da:	60e3      	str	r3, [r4, #12]
   b51dc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b51e0:	9206      	str	r2, [sp, #24]
   b51e2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b51e4:	4b06      	ldr	r3, [pc, #24]	; (b5200 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b51e6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b51e8:	4b06      	ldr	r3, [pc, #24]	; (b5204 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b51ea:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b51ec:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b51ee:	a803      	add	r0, sp, #12
   b51f0:	f7ff fd2b 	bl	b4c4a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b51f4:	2200      	movs	r2, #0
   b51f6:	4629      	mov	r1, r5
   b51f8:	4803      	ldr	r0, [pc, #12]	; (b5208 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b51fa:	f7ff fc0d 	bl	b4a18 <application_thread_invoke>
   b51fe:	e7c7      	b.n	b5190 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b5200:	000b4de1 	.word	0x000b4de1
   b5204:	000b50bf 	.word	0x000b50bf
   b5208:	000b4c23 	.word	0x000b4c23

000b520c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b520c:	2200      	movs	r2, #0
   b520e:	6840      	ldr	r0, [r0, #4]
   b5210:	4611      	mov	r1, r2
   b5212:	f7ff bc6d 	b.w	b4af0 <network_listening>

000b5216 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5216:	2200      	movs	r2, #0
   b5218:	6840      	ldr	r0, [r0, #4]
   b521a:	4611      	mov	r1, r2
   b521c:	f7ff bc78 	b.w	b4b10 <network_get_listen_timeout>

000b5220 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5220:	6840      	ldr	r0, [r0, #4]
   b5222:	2200      	movs	r2, #0
   b5224:	f7ff bc6c 	b.w	b4b00 <network_set_listen_timeout>

000b5228 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5228:	6840      	ldr	r0, [r0, #4]
   b522a:	2200      	movs	r2, #0
   b522c:	f081 0101 	eor.w	r1, r1, #1
   b5230:	f7ff bc56 	b.w	b4ae0 <network_listen>

000b5234 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5234:	2300      	movs	r3, #0
   b5236:	6840      	ldr	r0, [r0, #4]
   b5238:	461a      	mov	r2, r3
   b523a:	4619      	mov	r1, r3
   b523c:	f7ff bc48 	b.w	b4ad0 <network_off>

000b5240 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5240:	2300      	movs	r3, #0
   b5242:	6840      	ldr	r0, [r0, #4]
   b5244:	461a      	mov	r2, r3
   b5246:	4619      	mov	r1, r3
   b5248:	f7ff bc3a 	b.w	b4ac0 <network_on>

000b524c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b524c:	2200      	movs	r2, #0
   b524e:	6840      	ldr	r0, [r0, #4]
   b5250:	4611      	mov	r1, r2
   b5252:	f7ff bc2d 	b.w	b4ab0 <network_ready>

000b5256 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5256:	2200      	movs	r2, #0
   b5258:	6840      	ldr	r0, [r0, #4]
   b525a:	4611      	mov	r1, r2
   b525c:	f7ff bc18 	b.w	b4a90 <network_connecting>

000b5260 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5260:	6840      	ldr	r0, [r0, #4]
   b5262:	2200      	movs	r2, #0
   b5264:	2102      	movs	r1, #2
   b5266:	f7ff bc1b 	b.w	b4aa0 <network_disconnect>

000b526a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b526a:	2300      	movs	r3, #0
   b526c:	6840      	ldr	r0, [r0, #4]
   b526e:	461a      	mov	r2, r3
   b5270:	f7ff bc06 	b.w	b4a80 <network_connect>

000b5274 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5274:	4b02      	ldr	r3, [pc, #8]	; (b5280 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5276:	2203      	movs	r2, #3
   b5278:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b527a:	4a02      	ldr	r2, [pc, #8]	; (b5284 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b527c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b527e:	4770      	bx	lr
   b5280:	2003e694 	.word	0x2003e694
   b5284:	000b7e20 	.word	0x000b7e20

000b5288 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5288:	4770      	bx	lr

000b528a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b528a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b528c:	4606      	mov	r6, r0
   b528e:	4615      	mov	r5, r2
   b5290:	460c      	mov	r4, r1
   b5292:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5294:	42bc      	cmp	r4, r7
   b5296:	d006      	beq.n	b52a6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5298:	6833      	ldr	r3, [r6, #0]
   b529a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b529e:	689b      	ldr	r3, [r3, #8]
   b52a0:	4630      	mov	r0, r6
   b52a2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b52a4:	e7f6      	b.n	b5294 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b52a6:	4628      	mov	r0, r5
   b52a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b52aa <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b52aa:	7c00      	ldrb	r0, [r0, #16]
   b52ac:	2200      	movs	r2, #0
   b52ae:	f7ff ba43 	b.w	b4738 <hal_i2c_write>

000b52b2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b52b2:	7c00      	ldrb	r0, [r0, #16]
   b52b4:	2100      	movs	r1, #0
   b52b6:	f7ff ba47 	b.w	b4748 <hal_i2c_available>

000b52ba <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b52ba:	7c00      	ldrb	r0, [r0, #16]
   b52bc:	2100      	movs	r1, #0
   b52be:	f7ff ba4b 	b.w	b4758 <hal_i2c_read>

000b52c2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b52c2:	7c00      	ldrb	r0, [r0, #16]
   b52c4:	2100      	movs	r1, #0
   b52c6:	f7ff ba4f 	b.w	b4768 <hal_i2c_peek>

000b52ca <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b52ca:	7c00      	ldrb	r0, [r0, #16]
   b52cc:	2100      	movs	r1, #0
   b52ce:	f7ff ba53 	b.w	b4778 <hal_i2c_flush>

000b52d2 <_ZN7TwoWireD0Ev>:
   b52d2:	b510      	push	{r4, lr}
   b52d4:	2114      	movs	r1, #20
   b52d6:	4604      	mov	r4, r0
   b52d8:	f7fe fef1 	bl	b40be <_ZdlPvj>
   b52dc:	4620      	mov	r0, r4
   b52de:	bd10      	pop	{r4, pc}

000b52e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b52e0:	b538      	push	{r3, r4, r5, lr}
   b52e2:	4604      	mov	r4, r0
   b52e4:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b52e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b52ea:	2200      	movs	r2, #0
   b52ec:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b52f0:	4b09      	ldr	r3, [pc, #36]	; (b5318 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b52f2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b52f4:	4608      	mov	r0, r1
   b52f6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b52f8:	4629      	mov	r1, r5
   b52fa:	f7ff fa4d 	bl	b4798 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b52fe:	30bf      	adds	r0, #191	; 0xbf
   b5300:	d108      	bne.n	b5314 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5302:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5304:	07db      	lsls	r3, r3, #31
   b5306:	d505      	bpl.n	b5314 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5308:	6868      	ldr	r0, [r5, #4]
   b530a:	f7ff fc31 	bl	b4b70 <free>
    free(conf.tx_buffer);
   b530e:	68e8      	ldr	r0, [r5, #12]
   b5310:	f7ff fc2e 	bl	b4b70 <free>
}
   b5314:	4620      	mov	r0, r4
   b5316:	bd38      	pop	{r3, r4, r5, pc}
   b5318:	000b7e64 	.word	0x000b7e64

000b531c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b531c:	4770      	bx	lr

000b531e <_ZN9IPAddressD0Ev>:
   b531e:	b510      	push	{r4, lr}
   b5320:	2118      	movs	r1, #24
   b5322:	4604      	mov	r4, r0
   b5324:	f7fe fecb 	bl	b40be <_ZdlPvj>
   b5328:	4620      	mov	r0, r4
   b532a:	bd10      	pop	{r4, pc}

000b532c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b532c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b532e:	7d03      	ldrb	r3, [r0, #20]
   b5330:	2b06      	cmp	r3, #6
{
   b5332:	b08d      	sub	sp, #52	; 0x34
   b5334:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5336:	f100 0704 	add.w	r7, r0, #4
   b533a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b533e:	d012      	beq.n	b5366 <_ZNK9IPAddress7printToER5Print+0x3a>
   b5340:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5344:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5348:	220a      	movs	r2, #10
   b534a:	4630      	mov	r0, r6
   b534c:	f001 fb51 	bl	b69f2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5350:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5352:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5354:	d019      	beq.n	b538a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5356:	2c00      	cmp	r4, #0
   b5358:	d0f4      	beq.n	b5344 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b535a:	212e      	movs	r1, #46	; 0x2e
   b535c:	4630      	mov	r0, r6
   b535e:	f001 fb2f 	bl	b69c0 <_ZN5Print5printEc>
   b5362:	4404      	add	r4, r0
   b5364:	e7ee      	b.n	b5344 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5366:	232f      	movs	r3, #47	; 0x2f
   b5368:	466a      	mov	r2, sp
   b536a:	4639      	mov	r1, r7
   b536c:	200a      	movs	r0, #10
		buf[0] = 0;
   b536e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5372:	f7ff fa21 	bl	b47b8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5376:	4668      	mov	r0, sp
   b5378:	f7fe fe5a 	bl	b4030 <strlen>
   b537c:	6833      	ldr	r3, [r6, #0]
   b537e:	4602      	mov	r2, r0
   b5380:	68db      	ldr	r3, [r3, #12]
   b5382:	4669      	mov	r1, sp
   b5384:	4630      	mov	r0, r6
   b5386:	4798      	blx	r3
   b5388:	4604      	mov	r4, r0
    }
    return n;
}
   b538a:	4620      	mov	r0, r4
   b538c:	b00d      	add	sp, #52	; 0x34
   b538e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5390 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5390:	b510      	push	{r4, lr}
   b5392:	4b05      	ldr	r3, [pc, #20]	; (b53a8 <_ZN9IPAddressC1Ev+0x18>)
   b5394:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5396:	2211      	movs	r2, #17
   b5398:	f840 3b04 	str.w	r3, [r0], #4
   b539c:	2100      	movs	r1, #0
   b539e:	f002 fb35 	bl	b7a0c <memset>
}
   b53a2:	4620      	mov	r0, r4
   b53a4:	bd10      	pop	{r4, pc}
   b53a6:	bf00      	nop
   b53a8:	000b7e90 	.word	0x000b7e90

000b53ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b53ac:	4603      	mov	r3, r0
   b53ae:	4a07      	ldr	r2, [pc, #28]	; (b53cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b53b0:	b510      	push	{r4, lr}
   b53b2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b53b6:	f101 0210 	add.w	r2, r1, #16
   b53ba:	f851 4b04 	ldr.w	r4, [r1], #4
   b53be:	f843 4b04 	str.w	r4, [r3], #4
   b53c2:	4291      	cmp	r1, r2
   b53c4:	d1f9      	bne.n	b53ba <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b53c6:	780a      	ldrb	r2, [r1, #0]
   b53c8:	701a      	strb	r2, [r3, #0]
}
   b53ca:	bd10      	pop	{r4, pc}
   b53cc:	000b7e90 	.word	0x000b7e90

000b53d0 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b53d0:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b53d2:	2b04      	cmp	r3, #4
   b53d4:	d104      	bne.n	b53e0 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b53d6:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b53d8:	3800      	subs	r0, #0
   b53da:	bf18      	it	ne
   b53dc:	2001      	movne	r0, #1
   b53de:	4770      	bx	lr
    } else if (version() == 6) {
   b53e0:	2b06      	cmp	r3, #6
   b53e2:	d107      	bne.n	b53f4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b53e4:	6843      	ldr	r3, [r0, #4]
   b53e6:	b93b      	cbnz	r3, b53f8 <_ZNK9IPAddresscvbEv+0x28>
   b53e8:	6883      	ldr	r3, [r0, #8]
   b53ea:	b92b      	cbnz	r3, b53f8 <_ZNK9IPAddresscvbEv+0x28>
   b53ec:	68c3      	ldr	r3, [r0, #12]
   b53ee:	b91b      	cbnz	r3, b53f8 <_ZNK9IPAddresscvbEv+0x28>
   b53f0:	6900      	ldr	r0, [r0, #16]
   b53f2:	e7f1      	b.n	b53d8 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b53f4:	2000      	movs	r0, #0
   b53f6:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b53f8:	2001      	movs	r0, #1
}
   b53fa:	4770      	bx	lr

000b53fc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b53fc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b53fe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5402:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5406:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b540a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b540e:	2304      	movs	r3, #4
   b5410:	6041      	str	r1, [r0, #4]
   b5412:	7503      	strb	r3, [r0, #20]
}
   b5414:	bd10      	pop	{r4, pc}
	...

000b5418 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5418:	b507      	push	{r0, r1, r2, lr}
   b541a:	4b06      	ldr	r3, [pc, #24]	; (b5434 <_ZN9IPAddressC1EPKh+0x1c>)
   b541c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b541e:	78cb      	ldrb	r3, [r1, #3]
   b5420:	9300      	str	r3, [sp, #0]
   b5422:	788b      	ldrb	r3, [r1, #2]
   b5424:	784a      	ldrb	r2, [r1, #1]
   b5426:	7809      	ldrb	r1, [r1, #0]
   b5428:	f7ff ffe8 	bl	b53fc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b542c:	b003      	add	sp, #12
   b542e:	f85d fb04 	ldr.w	pc, [sp], #4
   b5432:	bf00      	nop
   b5434:	000b7e90 	.word	0x000b7e90

000b5438 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b5438:	f100 0310 	add.w	r3, r0, #16
   b543c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b543e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b5442:	2901      	cmp	r1, #1
   b5444:	4618      	mov	r0, r3
   b5446:	d108      	bne.n	b545a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b5448:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b544c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b5450:	3a01      	subs	r2, #1
   b5452:	f103 0310 	add.w	r3, r3, #16
   b5456:	d1f2      	bne.n	b543e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b5458:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b545a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b545c:	bf04      	itt	eq
   b545e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b5462:	1852      	addeq	r2, r2, r1
   b5464:	e7f4      	b.n	b5450 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b5466 <_ZN5spark16JSONBufferWriterD1Ev>:
private:
    Print &strm_;
    size_t bytesWritten_;
};

class JSONBufferWriter: public JSONWriter {
   b5466:	4770      	bx	lr

000b5468 <_ZN5spark16JSONBufferWriterD0Ev>:
   b5468:	b510      	push	{r4, lr}
   b546a:	2114      	movs	r1, #20
   b546c:	4604      	mov	r4, r0
   b546e:	f7fe fe26 	bl	b40be <_ZdlPvj>
   b5472:	4620      	mov	r0, r4
   b5474:	bd10      	pop	{r4, pc}

000b5476 <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   b5476:	b538      	push	{r3, r4, r5, lr}
   b5478:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
   b547a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   b547e:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   b5480:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
   b5482:	d207      	bcs.n	b5494 <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
   b5484:	1ad2      	subs	r2, r2, r3
   b5486:	6880      	ldr	r0, [r0, #8]
   b5488:	42aa      	cmp	r2, r5
   b548a:	bf28      	it	cs
   b548c:	462a      	movcs	r2, r5
   b548e:	4418      	add	r0, r3
   b5490:	f002 fa94 	bl	b79bc <memcpy>
    }
    n_ += size;
   b5494:	6922      	ldr	r2, [r4, #16]
   b5496:	442a      	add	r2, r5
   b5498:	6122      	str	r2, [r4, #16]
}
   b549a:	bd38      	pop	{r3, r4, r5, pc}

000b549c <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
   b549c:	b40e      	push	{r1, r2, r3}
   b549e:	b517      	push	{r0, r1, r2, r4, lr}
   b54a0:	ab05      	add	r3, sp, #20
   b54a2:	4604      	mov	r4, r0
   b54a4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   b54a8:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
   b54aa:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   b54ac:	6903      	ldr	r3, [r0, #16]
   b54ae:	6880      	ldr	r0, [r0, #8]
   b54b0:	428b      	cmp	r3, r1
   b54b2:	bf38      	it	cc
   b54b4:	1ac9      	subcc	r1, r1, r3
   b54b6:	4418      	add	r0, r3
   b54b8:	bf28      	it	cs
   b54ba:	2100      	movcs	r1, #0
   b54bc:	9b01      	ldr	r3, [sp, #4]
   b54be:	f7ff fb67 	bl	b4b90 <vsnprintf>
    va_end(args);
    n_ += n;
   b54c2:	6923      	ldr	r3, [r4, #16]
   b54c4:	4418      	add	r0, r3
   b54c6:	6120      	str	r0, [r4, #16]
}
   b54c8:	b003      	add	sp, #12
   b54ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b54ce:	b003      	add	sp, #12
   b54d0:	4770      	bx	lr

000b54d2 <_ZN5spark10JSONWriter6printfEPKcz>:
void spark::JSONWriter::printf(const char *fmt, ...) {
   b54d2:	b40e      	push	{r1, r2, r3}
   b54d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b54d6:	b088      	sub	sp, #32
   b54d8:	af00      	add	r7, sp, #0
   b54da:	f107 0534 	add.w	r5, r7, #52	; 0x34
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b54de:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b54e0:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b54e4:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b54e6:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b54e8:	462b      	mov	r3, r5
   b54ea:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b54ec:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b54ee:	f7ff fb4f 	bl	b4b90 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b54f2:	280f      	cmp	r0, #15
   b54f4:	687a      	ldr	r2, [r7, #4]
   b54f6:	d91a      	bls.n	b552e <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b54f8:	f100 0308 	add.w	r3, r0, #8
   b54fc:	f023 0307 	bic.w	r3, r3, #7
        }
   b5500:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b5502:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5506:	1c41      	adds	r1, r0, #1
   b5508:	462b      	mov	r3, r5
   b550a:	4668      	mov	r0, sp
        va_start(args, fmt);
   b550c:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b550e:	f7ff fb3f 	bl	b4b90 <vsnprintf>
        if (n > 0) {
   b5512:	1e02      	subs	r2, r0, #0
   b5514:	dd04      	ble.n	b5520 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b5516:	6823      	ldr	r3, [r4, #0]
   b5518:	4669      	mov	r1, sp
   b551a:	689b      	ldr	r3, [r3, #8]
   b551c:	4620      	mov	r0, r4
   b551e:	4798      	blx	r3
   b5520:	46b5      	mov	sp, r6
}
   b5522:	3720      	adds	r7, #32
   b5524:	46bd      	mov	sp, r7
   b5526:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b552a:	b003      	add	sp, #12
   b552c:	4770      	bx	lr
    } else if (n > 0) {
   b552e:	2800      	cmp	r0, #0
   b5530:	d0f7      	beq.n	b5522 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b5532:	6823      	ldr	r3, [r4, #0]
   b5534:	4602      	mov	r2, r0
   b5536:	689b      	ldr	r3, [r3, #8]
   b5538:	f107 0110 	add.w	r1, r7, #16
   b553c:	4620      	mov	r0, r4
   b553e:	4798      	blx	r3
}
   b5540:	e7ef      	b.n	b5522 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b5542 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5542:	b538      	push	{r3, r4, r5, lr}
   b5544:	680b      	ldr	r3, [r1, #0]
   b5546:	6003      	str	r3, [r0, #0]
   b5548:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b554a:	6843      	ldr	r3, [r0, #4]
   b554c:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b554e:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b5550:	d008      	beq.n	b5564 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b5552:	b115      	cbz	r5, b555a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b5554:	686b      	ldr	r3, [r5, #4]
   b5556:	3301      	adds	r3, #1
   b5558:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b555a:	6860      	ldr	r0, [r4, #4]
   b555c:	b108      	cbz	r0, b5562 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b555e:	f7ff fb7d 	bl	b4c5c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b5562:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5564:	bd38      	pop	{r3, r4, r5, pc}

000b5566 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b5566:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b5568:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b556a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b556e:	689b      	ldr	r3, [r3, #8]
   b5570:	2201      	movs	r2, #1
   b5572:	f10d 0107 	add.w	r1, sp, #7
   b5576:	4798      	blx	r3
}
   b5578:	b003      	add	sp, #12
   b557a:	f85d fb04 	ldr.w	pc, [sp], #4

000b557e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b557e:	460b      	mov	r3, r1
   b5580:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b5582:	2200      	movs	r2, #0
   b5584:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b5586:	e9c0 2200 	strd	r2, r2, [r0]
   b558a:	4604      	mov	r4, r0
        t_ = t;
   b558c:	6083      	str	r3, [r0, #8]
    if (t) {
   b558e:	b90b      	cbnz	r3, b5594 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b5590:	4620      	mov	r0, r4
   b5592:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b5594:	f7ff ffd5 	bl	b5542 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b5598:	e7fa      	b.n	b5590 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b559a <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b559a:	6883      	ldr	r3, [r0, #8]
   b559c:	b1eb      	cbz	r3, b55da <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b559e:	781a      	ldrb	r2, [r3, #0]
   b55a0:	2a03      	cmp	r2, #3
   b55a2:	d81a      	bhi.n	b55da <_ZNK5spark9JSONValue4typeEv+0x40>
   b55a4:	e8df f002 	tbb	[pc, r2]
   b55a8:	1b021704 	.word	0x1b021704
   b55ac:	2005      	movs	r0, #5
   b55ae:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b55b0:	6802      	ldr	r2, [r0, #0]
   b55b2:	685b      	ldr	r3, [r3, #4]
   b55b4:	6852      	ldr	r2, [r2, #4]
   b55b6:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b55b8:	282d      	cmp	r0, #45	; 0x2d
   b55ba:	d012      	beq.n	b55e2 <_ZNK5spark9JSONValue4typeEv+0x48>
   b55bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b55c0:	2b09      	cmp	r3, #9
   b55c2:	d90e      	bls.n	b55e2 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b55c4:	2874      	cmp	r0, #116	; 0x74
   b55c6:	d00e      	beq.n	b55e6 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b55c8:	2866      	cmp	r0, #102	; 0x66
   b55ca:	d00c      	beq.n	b55e6 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b55cc:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b55d0:	4258      	negs	r0, r3
   b55d2:	4158      	adcs	r0, r3
   b55d4:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b55d6:	2006      	movs	r0, #6
   b55d8:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b55da:	2000      	movs	r0, #0
   b55dc:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b55de:	2004      	movs	r0, #4
   b55e0:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b55e2:	2003      	movs	r0, #3
   b55e4:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b55e6:	2002      	movs	r0, #2
}
   b55e8:	4770      	bx	lr

000b55ea <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b55ea:	b510      	push	{r4, lr}
   b55ec:	4604      	mov	r4, r0
    switch (type()) {
   b55ee:	f7ff ffd4 	bl	b559a <_ZNK5spark9JSONValue4typeEv>
   b55f2:	2802      	cmp	r0, #2
   b55f4:	d00e      	beq.n	b5614 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b55f6:	1ec3      	subs	r3, r0, #3
   b55f8:	b2db      	uxtb	r3, r3
   b55fa:	2b01      	cmp	r3, #1
   b55fc:	d814      	bhi.n	b5628 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b55fe:	6822      	ldr	r2, [r4, #0]
   b5600:	68a3      	ldr	r3, [r4, #8]
   b5602:	6850      	ldr	r0, [r2, #4]
   b5604:	685b      	ldr	r3, [r3, #4]
}
   b5606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b560a:	220a      	movs	r2, #10
   b560c:	2100      	movs	r1, #0
   b560e:	4418      	add	r0, r3
   b5610:	f002 bb1a 	b.w	b7c48 <strtol>
        const char* const s = d_->json + t_->start;
   b5614:	6822      	ldr	r2, [r4, #0]
   b5616:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b5618:	6852      	ldr	r2, [r2, #4]
   b561a:	685b      	ldr	r3, [r3, #4]
   b561c:	5cd0      	ldrb	r0, [r2, r3]
   b561e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b5622:	4258      	negs	r0, r3
   b5624:	4158      	adcs	r0, r3
}
   b5626:	bd10      	pop	{r4, pc}
    switch (type()) {
   b5628:	2000      	movs	r0, #0
   b562a:	e7fc      	b.n	b5626 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b562c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b562c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b562e:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b5630:	e9c0 3300 	strd	r3, r3, [r0]
   b5634:	4604      	mov	r4, r0
        n_(0) {
   b5636:	480e      	ldr	r0, [pc, #56]	; (b5670 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b5638:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b563c:	b1a9      	cbz	r1, b566a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b563e:	780b      	ldrb	r3, [r1, #0]
   b5640:	2b03      	cmp	r3, #3
   b5642:	d006      	beq.n	b5652 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b5644:	b98b      	cbnz	r3, b566a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b5646:	6813      	ldr	r3, [r2, #0]
   b5648:	6858      	ldr	r0, [r3, #4]
   b564a:	684b      	ldr	r3, [r1, #4]
   b564c:	5cc3      	ldrb	r3, [r0, r3]
   b564e:	2b6e      	cmp	r3, #110	; 0x6e
   b5650:	d007      	beq.n	b5662 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b5652:	6813      	ldr	r3, [r2, #0]
   b5654:	684d      	ldr	r5, [r1, #4]
   b5656:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b5658:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b565a:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b565c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b565e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b5660:	60e3      	str	r3, [r4, #12]
   b5662:	4611      	mov	r1, r2
   b5664:	4620      	mov	r0, r4
   b5666:	f7ff ff6c 	bl	b5542 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b566a:	4620      	mov	r0, r4
   b566c:	bd38      	pop	{r3, r4, r5, pc}
   b566e:	bf00      	nop
   b5670:	000b7d5c 	.word	0x000b7d5c

000b5674 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b5674:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b5676:	2500      	movs	r5, #0
   b5678:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b567a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b567e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b5682:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b5686:	4604      	mov	r4, r0
   b5688:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b568a:	b14b      	cbz	r3, b56a0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b568c:	781a      	ldrb	r2, [r3, #0]
   b568e:	2a01      	cmp	r2, #1
   b5690:	d106      	bne.n	b56a0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b5692:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b5696:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b5698:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b569a:	6143      	str	r3, [r0, #20]
   b569c:	f7ff ff51 	bl	b5542 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b56a0:	4620      	mov	r0, r4
   b56a2:	bd38      	pop	{r3, r4, r5, pc}

000b56a4 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b56a4:	b510      	push	{r4, lr}
    if (!n_) {
   b56a6:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b56a8:	4604      	mov	r4, r0
    if (!n_) {
   b56aa:	b163      	cbz	r3, b56c6 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b56ac:	6880      	ldr	r0, [r0, #8]
   b56ae:	60e0      	str	r0, [r4, #12]
    --n_;
   b56b0:	3b01      	subs	r3, #1
    ++t_;
   b56b2:	3010      	adds	r0, #16
   b56b4:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b56b6:	6120      	str	r0, [r4, #16]
    --n_;
   b56b8:	6163      	str	r3, [r4, #20]
    if (n_) {
   b56ba:	b113      	cbz	r3, b56c2 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b56bc:	f7ff febc 	bl	b5438 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b56c0:	60a0      	str	r0, [r4, #8]
    return true;
   b56c2:	2001      	movs	r0, #1
   b56c4:	e000      	b.n	b56c8 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b56c6:	4618      	mov	r0, r3
}
   b56c8:	bd10      	pop	{r4, pc}

000b56ca <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b56ca:	b510      	push	{r4, lr}
    write('}');
   b56cc:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b56ce:	4604      	mov	r4, r0
    write('}');
   b56d0:	f7ff ff49 	bl	b5566 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b56d4:	2301      	movs	r3, #1
   b56d6:	7123      	strb	r3, [r4, #4]
}
   b56d8:	4620      	mov	r0, r4
   b56da:	bd10      	pop	{r4, pc}

000b56dc <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
   b56dc:	b508      	push	{r3, lr}
    switch (state_) {
   b56de:	7903      	ldrb	r3, [r0, #4]
   b56e0:	2b01      	cmp	r3, #1
   b56e2:	d002      	beq.n	b56ea <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b56e4:	2b02      	cmp	r3, #2
   b56e6:	d004      	beq.n	b56f2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
   b56e8:	bd08      	pop	{r3, pc}
        write(',');
   b56ea:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b56ec:	f7ff ff3b 	bl	b5566 <_ZN5spark10JSONWriter5writeEc>
}
   b56f0:	e7fa      	b.n	b56e8 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b56f2:	213a      	movs	r1, #58	; 0x3a
   b56f4:	e7fa      	b.n	b56ec <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b56f6 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b56f6:	b510      	push	{r4, lr}
   b56f8:	4604      	mov	r4, r0
    writeSeparator();
   b56fa:	f7ff ffef 	bl	b56dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b56fe:	4620      	mov	r0, r4
   b5700:	217b      	movs	r1, #123	; 0x7b
   b5702:	f7ff ff30 	bl	b5566 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b5706:	2300      	movs	r3, #0
   b5708:	7123      	strb	r3, [r4, #4]
}
   b570a:	4620      	mov	r0, r4
   b570c:	bd10      	pop	{r4, pc}
	...

000b5710 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b5710:	b513      	push	{r0, r1, r4, lr}
   b5712:	4604      	mov	r4, r0
   b5714:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b5716:	f7ff ffe1 	bl	b56dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b571a:	6823      	ldr	r3, [r4, #0]
   b571c:	9a01      	ldr	r2, [sp, #4]
   b571e:	68db      	ldr	r3, [r3, #12]
   b5720:	4903      	ldr	r1, [pc, #12]	; (b5730 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b5722:	4620      	mov	r0, r4
   b5724:	4798      	blx	r3
    state_ = NEXT;
   b5726:	2301      	movs	r3, #1
}
   b5728:	4620      	mov	r0, r4
    state_ = NEXT;
   b572a:	7123      	strb	r3, [r4, #4]
}
   b572c:	b002      	add	sp, #8
   b572e:	bd10      	pop	{r4, pc}
   b5730:	000b800c 	.word	0x000b800c

000b5734 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b5734:	b513      	push	{r0, r1, r4, lr}
   b5736:	4604      	mov	r4, r0
   b5738:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b573a:	f7ff ffcf 	bl	b56dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b573e:	6823      	ldr	r3, [r4, #0]
   b5740:	9a01      	ldr	r2, [sp, #4]
   b5742:	68db      	ldr	r3, [r3, #12]
   b5744:	4903      	ldr	r1, [pc, #12]	; (b5754 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b5746:	4620      	mov	r0, r4
   b5748:	4798      	blx	r3
    state_ = NEXT;
   b574a:	2301      	movs	r3, #1
}
   b574c:	4620      	mov	r0, r4
    state_ = NEXT;
   b574e:	7123      	strb	r3, [r4, #4]
}
   b5750:	b002      	add	sp, #8
   b5752:	bd10      	pop	{r4, pc}
   b5754:	000b7e9c 	.word	0x000b7e9c

000b5758 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b5758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b575c:	460d      	mov	r5, r1
    write('"');
   b575e:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b5760:	4690      	mov	r8, r2
   b5762:	4604      	mov	r4, r0
    write('"');
   b5764:	f7ff feff 	bl	b5566 <_ZN5spark10JSONWriter5writeEc>
                printf("u%04x", (unsigned)c);
   b5768:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b5810 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b576c:	44a8      	add	r8, r5
    const char *s = str;
   b576e:	462f      	mov	r7, r5
    while (s != end) {
   b5770:	4547      	cmp	r7, r8
   b5772:	46ba      	mov	sl, r7
   b5774:	d03d      	beq.n	b57f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b5776:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b577a:	2e22      	cmp	r6, #34	; 0x22
   b577c:	d006      	beq.n	b578c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b577e:	2e5c      	cmp	r6, #92	; 0x5c
   b5780:	d004      	beq.n	b578c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b5782:	4630      	mov	r0, r6
   b5784:	f002 f912 	bl	b79ac <isprint>
   b5788:	2800      	cmp	r0, #0
   b578a:	d1f1      	bne.n	b5770 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b578c:	6823      	ldr	r3, [r4, #0]
   b578e:	ebaa 0205 	sub.w	r2, sl, r5
   b5792:	689b      	ldr	r3, [r3, #8]
   b5794:	4629      	mov	r1, r5
   b5796:	4620      	mov	r0, r4
   b5798:	4798      	blx	r3
            write('\\');
   b579a:	215c      	movs	r1, #92	; 0x5c
   b579c:	4620      	mov	r0, r4
   b579e:	f7ff fee2 	bl	b5566 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b57a2:	2e0d      	cmp	r6, #13
   b57a4:	d80a      	bhi.n	b57bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b57a6:	2e07      	cmp	r6, #7
   b57a8:	d91c      	bls.n	b57e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b57aa:	f1a6 0308 	sub.w	r3, r6, #8
   b57ae:	2b05      	cmp	r3, #5
   b57b0:	d818      	bhi.n	b57e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b57b2:	e8df f003 	tbb	[pc, r3]
   b57b6:	0f0d      	.short	0x0f0d
   b57b8:	15131711 	.word	0x15131711
   b57bc:	2e22      	cmp	r6, #34	; 0x22
   b57be:	d001      	beq.n	b57c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b57c0:	2e5c      	cmp	r6, #92	; 0x5c
   b57c2:	d10f      	bne.n	b57e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b57c4:	4631      	mov	r1, r6
                write('b');
   b57c6:	4620      	mov	r0, r4
   b57c8:	f7ff fecd 	bl	b5566 <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
   b57cc:	463d      	mov	r5, r7
    while (s != end) {
   b57ce:	e7cf      	b.n	b5770 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b57d0:	2162      	movs	r1, #98	; 0x62
   b57d2:	e7f8      	b.n	b57c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b57d4:	2174      	movs	r1, #116	; 0x74
   b57d6:	e7f6      	b.n	b57c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b57d8:	216e      	movs	r1, #110	; 0x6e
   b57da:	e7f4      	b.n	b57c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b57dc:	2166      	movs	r1, #102	; 0x66
   b57de:	e7f2      	b.n	b57c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b57e0:	2172      	movs	r1, #114	; 0x72
   b57e2:	e7f0      	b.n	b57c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b57e4:	6823      	ldr	r3, [r4, #0]
   b57e6:	4632      	mov	r2, r6
   b57e8:	68db      	ldr	r3, [r3, #12]
   b57ea:	4649      	mov	r1, r9
   b57ec:	4620      	mov	r0, r4
   b57ee:	4798      	blx	r3
                break;
   b57f0:	e7ec      	b.n	b57cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
    if (s != str) {
   b57f2:	42bd      	cmp	r5, r7
   b57f4:	d005      	beq.n	b5802 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b57f6:	6823      	ldr	r3, [r4, #0]
   b57f8:	1b7a      	subs	r2, r7, r5
   b57fa:	689b      	ldr	r3, [r3, #8]
   b57fc:	4629      	mov	r1, r5
   b57fe:	4620      	mov	r0, r4
   b5800:	4798      	blx	r3
    write('"');
   b5802:	2122      	movs	r1, #34	; 0x22
   b5804:	4620      	mov	r0, r4
   b5806:	f7ff feae 	bl	b5566 <_ZN5spark10JSONWriter5writeEc>
}
   b580a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b580e:	bf00      	nop
   b5810:	000b7e9f 	.word	0x000b7e9f

000b5814 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b5814:	b513      	push	{r0, r1, r4, lr}
   b5816:	4604      	mov	r4, r0
   b5818:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b581c:	f7ff ff5e 	bl	b56dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b5820:	4620      	mov	r0, r4
   b5822:	e9dd 2100 	ldrd	r2, r1, [sp]
   b5826:	f7ff ff97 	bl	b5758 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b582a:	2302      	movs	r3, #2
}
   b582c:	4620      	mov	r0, r4
    state_ = VALUE;
   b582e:	7123      	strb	r3, [r4, #4]
}
   b5830:	b002      	add	sp, #8
   b5832:	bd10      	pop	{r4, pc}

000b5834 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b5834:	b513      	push	{r0, r1, r4, lr}
   b5836:	4604      	mov	r4, r0
   b5838:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b583c:	f7ff ff4e 	bl	b56dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b5840:	4620      	mov	r0, r4
   b5842:	e9dd 2100 	ldrd	r2, r1, [sp]
   b5846:	f7ff ff87 	bl	b5758 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b584a:	2301      	movs	r3, #1
}
   b584c:	4620      	mov	r0, r4
    state_ = NEXT;
   b584e:	7123      	strb	r3, [r4, #4]
}
   b5850:	b002      	add	sp, #8
   b5852:	bd10      	pop	{r4, pc}

000b5854 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5854:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5858:	4604      	mov	r4, r0
   b585a:	460d      	mov	r5, r1
   b585c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b585e:	d914      	bls.n	b588a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b5860:	4290      	cmp	r0, r2
   b5862:	d213      	bcs.n	b588c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b5864:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b5868:	1a75      	subs	r5, r6, r1
   b586a:	f1a1 0710 	sub.w	r7, r1, #16
   b586e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5870:	42b7      	cmp	r7, r6
   b5872:	d018      	beq.n	b58a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b5874:	b11c      	cbz	r4, b587e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b5876:	4631      	mov	r1, r6
   b5878:	4620      	mov	r0, r4
   b587a:	f001 f990 	bl	b6b9e <_ZN6StringC1EOS_>
                end->~T();
   b587e:	4630      	mov	r0, r6
   b5880:	f001 f910 	bl	b6aa4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5884:	3e10      	subs	r6, #16
   b5886:	3c10      	subs	r4, #16
   b5888:	e7f2      	b.n	b5870 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b588a:	d00c      	beq.n	b58a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b588c:	42b5      	cmp	r5, r6
   b588e:	d00a      	beq.n	b58a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b5890:	b11c      	cbz	r4, b589a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b5892:	4629      	mov	r1, r5
   b5894:	4620      	mov	r0, r4
   b5896:	f001 f982 	bl	b6b9e <_ZN6StringC1EOS_>
                p->~T();
   b589a:	4628      	mov	r0, r5
   b589c:	f001 f902 	bl	b6aa4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b58a0:	3510      	adds	r5, #16
   b58a2:	3410      	adds	r4, #16
   b58a4:	e7f2      	b.n	b588c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b58a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b58a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b58a8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b58aa:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b58ac:	4605      	mov	r5, r0
        if (n > 0) {
   b58ae:	dd11      	ble.n	b58d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b58b0:	0130      	lsls	r0, r6, #4
   b58b2:	f7ff f955 	bl	b4b60 <malloc>
            if (!d) {
   b58b6:	4604      	mov	r4, r0
   b58b8:	b158      	cbz	r0, b58d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b58ba:	e9d5 1200 	ldrd	r1, r2, [r5]
   b58be:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b58c2:	f7ff ffc7 	bl	b5854 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b58c6:	6828      	ldr	r0, [r5, #0]
   b58c8:	f7ff f952 	bl	b4b70 <free>
        data_ = d;
   b58cc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b58ce:	60ae      	str	r6, [r5, #8]
        return true;
   b58d0:	2001      	movs	r0, #1
    }
   b58d2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b58d4:	2400      	movs	r4, #0
   b58d6:	e7f6      	b.n	b58c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b58d8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:

inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
   b58d8:	b510      	push	{r4, lr}
   b58da:	4604      	mov	r4, r0
    bytesWritten_ += strm_.write((const uint8_t*)data, size);
   b58dc:	6880      	ldr	r0, [r0, #8]
   b58de:	6803      	ldr	r3, [r0, #0]
   b58e0:	68db      	ldr	r3, [r3, #12]
   b58e2:	4798      	blx	r3
   b58e4:	68e3      	ldr	r3, [r4, #12]
   b58e6:	4418      	add	r0, r3
   b58e8:	60e0      	str	r0, [r4, #12]
}
   b58ea:	bd10      	pop	{r4, pc}

000b58ec <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b58ec:	4770      	bx	lr

000b58ee <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b58ee:	4608      	mov	r0, r1
   b58f0:	b111      	cbz	r1, b58f8 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b58f2:	680b      	ldr	r3, [r1, #0]
   b58f4:	685b      	ldr	r3, [r3, #4]
   b58f6:	4718      	bx	r3
}
   b58f8:	4770      	bx	lr

000b58fa <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b58fa:	4770      	bx	lr

000b58fc <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b58fc:	4770      	bx	lr

000b58fe <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b58fe:	4770      	bx	lr

000b5900 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b5900:	4770      	bx	lr

000b5902 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b5902:	b538      	push	{r3, r4, r5, lr}
   b5904:	4604      	mov	r4, r0
   b5906:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b5908:	6800      	ldr	r0, [r0, #0]
   b590a:	212e      	movs	r1, #46	; 0x2e
   b590c:	f002 f8c1 	bl	b7a92 <strchrnul>
    size = s - category;
   b5910:	6823      	ldr	r3, [r4, #0]
   b5912:	1ac3      	subs	r3, r0, r3
   b5914:	602b      	str	r3, [r5, #0]
    if (size) {
   b5916:	b123      	cbz	r3, b5922 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b5918:	7803      	ldrb	r3, [r0, #0]
   b591a:	b103      	cbz	r3, b591e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b591c:	3001      	adds	r0, #1
   b591e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5920:	6020      	str	r0, [r4, #0]
}
   b5922:	4618      	mov	r0, r3
   b5924:	bd38      	pop	{r3, r4, r5, pc}

000b5926 <_ZN5spark16JSONStreamWriterD0Ev>:
   b5926:	b510      	push	{r4, lr}
   b5928:	2110      	movs	r1, #16
   b592a:	4604      	mov	r4, r0
   b592c:	f7fe fbc7 	bl	b40be <_ZdlPvj>
   b5930:	4620      	mov	r0, r4
   b5932:	bd10      	pop	{r4, pc}

000b5934 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b5934:	b510      	push	{r4, lr}
   b5936:	2104      	movs	r1, #4
   b5938:	4604      	mov	r4, r0
   b593a:	f7fe fbc0 	bl	b40be <_ZdlPvj>
   b593e:	4620      	mov	r0, r4
   b5940:	bd10      	pop	{r4, pc}

000b5942 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5942:	b510      	push	{r4, lr}
   b5944:	2104      	movs	r1, #4
   b5946:	4604      	mov	r4, r0
   b5948:	f7fe fbb9 	bl	b40be <_ZdlPvj>
   b594c:	4620      	mov	r0, r4
   b594e:	bd10      	pop	{r4, pc}

000b5950 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b5950:	f7fe beba 	b.w	b46c8 <os_mutex_recursive_lock>

000b5954 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b5954:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b5956:	f7fe fb61 	bl	b401c <strcmp>
}
   b595a:	fab0 f080 	clz	r0, r0
   b595e:	0940      	lsrs	r0, r0, #5
   b5960:	bd08      	pop	{r3, pc}

000b5962 <__tcf_1>:
   b5962:	4770      	bx	lr

000b5964 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b5964:	b510      	push	{r4, lr}
   b5966:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b5968:	f001 fd28 	bl	b73bc <_Z16_fetch_usbserialv>
   b596c:	4284      	cmp	r4, r0
   b596e:	d010      	beq.n	b5992 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b5970:	f001 fed4 	bl	b771c <_Z22__fetch_global_Serial1v>
   b5974:	4284      	cmp	r4, r0
   b5976:	d105      	bne.n	b5984 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b5978:	f001 fed0 	bl	b771c <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b597c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b5980:	f001 bcb7 	b.w	b72f2 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b5984:	b12c      	cbz	r4, b5992 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b5986:	6823      	ldr	r3, [r4, #0]
   b5988:	4620      	mov	r0, r4
   b598a:	685b      	ldr	r3, [r3, #4]
}
   b598c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5990:	4718      	bx	r3
   b5992:	bd10      	pop	{r4, pc}

000b5994 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5994:	680b      	ldr	r3, [r1, #0]
   b5996:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b5998:	684b      	ldr	r3, [r1, #4]
   b599a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b599c:	b113      	cbz	r3, b59a4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b599e:	685a      	ldr	r2, [r3, #4]
   b59a0:	3201      	adds	r2, #1
   b59a2:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b59a4:	4770      	bx	lr

000b59a6 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b59a6:	b513      	push	{r0, r1, r4, lr}
   b59a8:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b59aa:	4608      	mov	r0, r1
   b59ac:	9101      	str	r1, [sp, #4]
   b59ae:	f7fe fb3f 	bl	b4030 <strlen>
   b59b2:	9901      	ldr	r1, [sp, #4]
   b59b4:	4602      	mov	r2, r0
   b59b6:	4620      	mov	r0, r4
}
   b59b8:	b002      	add	sp, #8
   b59ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b59be:	f7ff bf39 	b.w	b5834 <_ZN5spark10JSONWriter5valueEPKcj>

000b59c2 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b59c2:	b513      	push	{r0, r1, r4, lr}
   b59c4:	4604      	mov	r4, r0
    write(str, strlen(str));
   b59c6:	4608      	mov	r0, r1
   b59c8:	9101      	str	r1, [sp, #4]
   b59ca:	f7fe fb31 	bl	b4030 <strlen>
   b59ce:	6823      	ldr	r3, [r4, #0]
   b59d0:	9901      	ldr	r1, [sp, #4]
   b59d2:	68db      	ldr	r3, [r3, #12]
   b59d4:	4602      	mov	r2, r0
   b59d6:	4620      	mov	r0, r4
}
   b59d8:	b002      	add	sp, #8
   b59da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b59de:	4718      	bx	r3

000b59e0 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b59e0:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b59e2:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b59e4:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b59e8:	68db      	ldr	r3, [r3, #12]
   b59ea:	2201      	movs	r2, #1
   b59ec:	f10d 0107 	add.w	r1, sp, #7
   b59f0:	4798      	blx	r3
}
   b59f2:	b003      	add	sp, #12
   b59f4:	f85d fb04 	ldr.w	pc, [sp], #4

000b59f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b59f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
inline typename spark::Vector<T, AllocatorT>::ConstIterator spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b59fc:	e9d0 8400 	ldrd	r8, r4, [r0]
   b5a00:	f04f 0a14 	mov.w	sl, #20
   b5a04:	9300      	str	r3, [sp, #0]
   b5a06:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b5a0a:	4b18      	ldr	r3, [pc, #96]	; (b5a6c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5a0c:	10a4      	asrs	r4, r4, #2
   b5a0e:	4617      	mov	r7, r2
   b5a10:	435c      	muls	r4, r3
   b5a12:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b5a14:	2c00      	cmp	r4, #0
   b5a16:	dd21      	ble.n	b5a5c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b5a18:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b5a1a:	fb0a f006 	mul.w	r0, sl, r6
   b5a1e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b5a22:	463a      	mov	r2, r7
   b5a24:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b5a28:	5828      	ldr	r0, [r5, r0]
   b5a2a:	9101      	str	r1, [sp, #4]
   b5a2c:	455f      	cmp	r7, fp
   b5a2e:	bf28      	it	cs
   b5a30:	465a      	movcs	r2, fp
   b5a32:	f002 f85e 	bl	b7af2 <strncmp>
                if (cmp == 0) {
   b5a36:	2800      	cmp	r0, #0
   b5a38:	9901      	ldr	r1, [sp, #4]
   b5a3a:	f04f 0301 	mov.w	r3, #1
   b5a3e:	d10b      	bne.n	b5a58 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b5a40:	455f      	cmp	r7, fp
   b5a42:	d103      	bne.n	b5a4c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b5a44:	9a00      	ldr	r2, [sp, #0]
   b5a46:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b5a48:	4634      	mov	r4, r6
   b5a4a:	e7e3      	b.n	b5a14 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b5a4c:	d9fc      	bls.n	b5a48 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b5a4e:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b5a50:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b5a54:	3e01      	subs	r6, #1
   b5a56:	e7f7      	b.n	b5a48 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b5a58:	dbf9      	blt.n	b5a4e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b5a5a:	e7f5      	b.n	b5a48 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b5a5c:	eba5 0508 	sub.w	r5, r5, r8
}
   b5a60:	4802      	ldr	r0, [pc, #8]	; (b5a6c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5a62:	10ad      	asrs	r5, r5, #2
   b5a64:	4368      	muls	r0, r5
   b5a66:	b003      	add	sp, #12
   b5a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5a6c:	cccccccd 	.word	0xcccccccd

000b5a70 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b5a70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b5a72:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b5a74:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b5a76:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b5a78:	b303      	cbz	r3, b5abc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b5a7a:	b1f9      	cbz	r1, b5abc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b5a7c:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b5a7e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b5a82:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b5a84:	a903      	add	r1, sp, #12
   b5a86:	a801      	add	r0, sp, #4
   b5a88:	f7ff ff3b 	bl	b5902 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b5a8c:	4601      	mov	r1, r0
   b5a8e:	b1a8      	cbz	r0, b5abc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b5a90:	f10d 030b 	add.w	r3, sp, #11
   b5a94:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b5a96:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5a9a:	4620      	mov	r0, r4
   b5a9c:	f7ff ffac 	bl	b59f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b5aa0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b5aa4:	b153      	cbz	r3, b5abc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b5aa6:	6823      	ldr	r3, [r4, #0]
   b5aa8:	2414      	movs	r4, #20
   b5aaa:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b5aae:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b5ab0:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b5ab4:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b5ab6:	bfa8      	it	ge
   b5ab8:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b5aba:	e7e3      	b.n	b5a84 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b5abc:	4628      	mov	r0, r5
   b5abe:	b004      	add	sp, #16
   b5ac0:	bd70      	pop	{r4, r5, r6, pc}

000b5ac2 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b5ac2:	b40e      	push	{r1, r2, r3}
   b5ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5ac6:	b08c      	sub	sp, #48	; 0x30
   b5ac8:	af00      	add	r7, sp, #0
   b5aca:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b5ace:	4604      	mov	r4, r0
   b5ad0:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5ad4:	607a      	str	r2, [r7, #4]
   b5ad6:	462b      	mov	r3, r5
   b5ad8:	2120      	movs	r1, #32
   b5ada:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b5ade:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5ae0:	f7ff f856 	bl	b4b90 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b5ae4:	281f      	cmp	r0, #31
   b5ae6:	687a      	ldr	r2, [r7, #4]
   b5ae8:	d91a      	bls.n	b5b20 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b5aea:	f100 0308 	add.w	r3, r0, #8
   b5aee:	f023 0307 	bic.w	r3, r3, #7
        }
   b5af2:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b5af4:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5af8:	1c41      	adds	r1, r0, #1
   b5afa:	462b      	mov	r3, r5
   b5afc:	4668      	mov	r0, sp
        va_start(args, fmt);
   b5afe:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5b00:	f7ff f846 	bl	b4b90 <vsnprintf>
        if (n > 0) {
   b5b04:	1e02      	subs	r2, r0, #0
   b5b06:	dd04      	ble.n	b5b12 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b5b08:	6823      	ldr	r3, [r4, #0]
   b5b0a:	4669      	mov	r1, sp
   b5b0c:	68db      	ldr	r3, [r3, #12]
   b5b0e:	4620      	mov	r0, r4
   b5b10:	4798      	blx	r3
   b5b12:	46b5      	mov	sp, r6
}
   b5b14:	3730      	adds	r7, #48	; 0x30
   b5b16:	46bd      	mov	sp, r7
   b5b18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5b1c:	b003      	add	sp, #12
   b5b1e:	4770      	bx	lr
    } else if (n > 0) {
   b5b20:	2800      	cmp	r0, #0
   b5b22:	d0f7      	beq.n	b5b14 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b5b24:	6823      	ldr	r3, [r4, #0]
   b5b26:	4602      	mov	r2, r0
   b5b28:	68db      	ldr	r3, [r3, #12]
   b5b2a:	f107 0110 	add.w	r1, r7, #16
   b5b2e:	4620      	mov	r0, r4
   b5b30:	4798      	blx	r3
}
   b5b32:	e7ef      	b.n	b5b14 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b5b34 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b5b34:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b5b36:	4c09      	ldr	r4, [pc, #36]	; (b5b5c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b5b38:	7823      	ldrb	r3, [r4, #0]
   b5b3a:	f3bf 8f5b 	dmb	ish
   b5b3e:	07db      	lsls	r3, r3, #31
   b5b40:	d409      	bmi.n	b5b56 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b5b42:	4620      	mov	r0, r4
   b5b44:	f7fe faca 	bl	b40dc <__cxa_guard_acquire>
   b5b48:	b128      	cbz	r0, b5b56 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b5b4a:	4620      	mov	r0, r4
   b5b4c:	f7fe facb 	bl	b40e6 <__cxa_guard_release>
   b5b50:	4803      	ldr	r0, [pc, #12]	; (b5b60 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b5b52:	f001 ff21 	bl	b7998 <atexit>
}
   b5b56:	4803      	ldr	r0, [pc, #12]	; (b5b64 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b5b58:	bd10      	pop	{r4, pc}
   b5b5a:	bf00      	nop
   b5b5c:	2003e6a0 	.word	0x2003e6a0
   b5b60:	000b58fb 	.word	0x000b58fb
   b5b64:	2003dd64 	.word	0x2003dd64

000b5b68 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b5b68:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b5b6a:	4c09      	ldr	r4, [pc, #36]	; (b5b90 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b5b6c:	7823      	ldrb	r3, [r4, #0]
   b5b6e:	f3bf 8f5b 	dmb	ish
   b5b72:	07db      	lsls	r3, r3, #31
   b5b74:	d409      	bmi.n	b5b8a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b5b76:	4620      	mov	r0, r4
   b5b78:	f7fe fab0 	bl	b40dc <__cxa_guard_acquire>
   b5b7c:	b128      	cbz	r0, b5b8a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b5b7e:	4620      	mov	r0, r4
   b5b80:	f7fe fab1 	bl	b40e6 <__cxa_guard_release>
   b5b84:	4803      	ldr	r0, [pc, #12]	; (b5b94 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b5b86:	f001 ff07 	bl	b7998 <atexit>
    return &factory;
}
   b5b8a:	4803      	ldr	r0, [pc, #12]	; (b5b98 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b5b8c:	bd10      	pop	{r4, pc}
   b5b8e:	bf00      	nop
   b5b90:	2003e6a4 	.word	0x2003e6a4
   b5b94:	000b5963 	.word	0x000b5963
   b5b98:	2003dd68 	.word	0x2003dd68

000b5b9c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b5b9c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b5b9e:	2500      	movs	r5, #0
   b5ba0:	4604      	mov	r4, r0
   b5ba2:	e9c0 5500 	strd	r5, r5, [r0]
   b5ba6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b5baa:	6085      	str	r5, [r0, #8]
   b5bac:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b5bae:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b5bb2:	f7fe fd79 	bl	b46a8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b5bb6:	f7ff ffbd 	bl	b5b34 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b5bba:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b5bbc:	f7ff ffd4 	bl	b5b68 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b5bc0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b5bc2:	6220      	str	r0, [r4, #32]
}
   b5bc4:	4620      	mov	r0, r4
   b5bc6:	bd38      	pop	{r3, r4, r5, pc}

000b5bc8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b5bc8:	b510      	push	{r4, lr}
    static LogManager mgr;
   b5bca:	4c0a      	ldr	r4, [pc, #40]	; (b5bf4 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b5bcc:	7823      	ldrb	r3, [r4, #0]
   b5bce:	f3bf 8f5b 	dmb	ish
   b5bd2:	07db      	lsls	r3, r3, #31
   b5bd4:	d40c      	bmi.n	b5bf0 <_ZN5spark10LogManager8instanceEv+0x28>
   b5bd6:	4620      	mov	r0, r4
   b5bd8:	f7fe fa80 	bl	b40dc <__cxa_guard_acquire>
   b5bdc:	b140      	cbz	r0, b5bf0 <_ZN5spark10LogManager8instanceEv+0x28>
   b5bde:	4806      	ldr	r0, [pc, #24]	; (b5bf8 <_ZN5spark10LogManager8instanceEv+0x30>)
   b5be0:	f7ff ffdc 	bl	b5b9c <_ZN5spark10LogManagerC1Ev>
   b5be4:	4620      	mov	r0, r4
   b5be6:	f7fe fa7e 	bl	b40e6 <__cxa_guard_release>
   b5bea:	4804      	ldr	r0, [pc, #16]	; (b5bfc <_ZN5spark10LogManager8instanceEv+0x34>)
   b5bec:	f001 fed4 	bl	b7998 <atexit>
    return &mgr;
}
   b5bf0:	4801      	ldr	r0, [pc, #4]	; (b5bf8 <_ZN5spark10LogManager8instanceEv+0x30>)
   b5bf2:	bd10      	pop	{r4, pc}
   b5bf4:	2003e69c 	.word	0x2003e69c
   b5bf8:	2003e6ac 	.word	0x2003e6ac
   b5bfc:	000b6141 	.word	0x000b6141

000b5c00 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b5c00:	4a02      	ldr	r2, [pc, #8]	; (b5c0c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b5c02:	4903      	ldr	r1, [pc, #12]	; (b5c10 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b5c04:	4803      	ldr	r0, [pc, #12]	; (b5c14 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b5c06:	2300      	movs	r3, #0
   b5c08:	f7fe bee6 	b.w	b49d8 <log_set_callbacks>
   b5c0c:	000b5f25 	.word	0x000b5f25
   b5c10:	000b5eb1 	.word	0x000b5eb1
   b5c14:	000b5e31 	.word	0x000b5e31

000b5c18 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b5c18:	2300      	movs	r3, #0
   b5c1a:	461a      	mov	r2, r3
   b5c1c:	4619      	mov	r1, r3
   b5c1e:	4618      	mov	r0, r3
   b5c20:	f7fe beda 	b.w	b49d8 <log_set_callbacks>

000b5c24 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b5c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b5c26:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b5c28:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5c2a:	4668      	mov	r0, sp
   b5c2c:	f7ff feb2 	bl	b5994 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b5c30:	466a      	mov	r2, sp
   b5c32:	4629      	mov	r1, r5
   b5c34:	4620      	mov	r0, r4
   b5c36:	f7ff fd1d 	bl	b5674 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b5c3a:	a801      	add	r0, sp, #4
   b5c3c:	f7fe ffdb 	bl	b4bf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5c40:	4620      	mov	r0, r4
   b5c42:	b003      	add	sp, #12
   b5c44:	bd30      	pop	{r4, r5, pc}

000b5c46 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b5c46:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b5c48:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b5c4a:	4604      	mov	r4, r0
   b5c4c:	4668      	mov	r0, sp
   b5c4e:	f7ff fea1 	bl	b5994 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b5c52:	466a      	mov	r2, sp
   b5c54:	4629      	mov	r1, r5
   b5c56:	4620      	mov	r0, r4
   b5c58:	f7ff fce8 	bl	b562c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b5c5c:	a801      	add	r0, sp, #4
   b5c5e:	f7fe ffca 	bl	b4bf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5c62:	4620      	mov	r0, r4
   b5c64:	b003      	add	sp, #12
   b5c66:	bd30      	pop	{r4, r5, pc}

000b5c68 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b5c68:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b5c6a:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b5c6c:	4604      	mov	r4, r0
   b5c6e:	4668      	mov	r0, sp
   b5c70:	f7ff fe90 	bl	b5994 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b5c74:	466a      	mov	r2, sp
   b5c76:	4629      	mov	r1, r5
   b5c78:	4620      	mov	r0, r4
   b5c7a:	f7ff fc80 	bl	b557e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b5c7e:	a801      	add	r0, sp, #4
   b5c80:	f7fe ffb9 	bl	b4bf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5c84:	4620      	mov	r0, r4
   b5c86:	b003      	add	sp, #12
   b5c88:	bd30      	pop	{r4, r5, pc}
	...

000b5c8c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b5c8c:	b570      	push	{r4, r5, r6, lr}
   b5c8e:	b08a      	sub	sp, #40	; 0x28
   b5c90:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b5c92:	4601      	mov	r1, r0
   b5c94:	a804      	add	r0, sp, #16
   b5c96:	f7ff ffc5 	bl	b5c24 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b5c9a:	4e14      	ldr	r6, [pc, #80]	; (b5cec <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b5c9c:	a804      	add	r0, sp, #16
   b5c9e:	f7ff fd01 	bl	b56a4 <_ZN5spark18JSONObjectIterator4nextEv>
   b5ca2:	b1e8      	cbz	r0, b5ce0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b5ca4:	a904      	add	r1, sp, #16
   b5ca6:	4668      	mov	r0, sp
   b5ca8:	f7ff ffcd 	bl	b5c46 <_ZNK5spark18JSONObjectIterator4nameEv>
   b5cac:	9802      	ldr	r0, [sp, #8]
   b5cae:	4631      	mov	r1, r6
   b5cb0:	f7ff fe50 	bl	b5954 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b5cb4:	4604      	mov	r4, r0
   b5cb6:	b110      	cbz	r0, b5cbe <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b5cb8:	1e2c      	subs	r4, r5, #0
   b5cba:	bf18      	it	ne
   b5cbc:	2401      	movne	r4, #1
   b5cbe:	a801      	add	r0, sp, #4
   b5cc0:	f7fe ff99 	bl	b4bf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5cc4:	2c00      	cmp	r4, #0
   b5cc6:	d0e9      	beq.n	b5c9c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b5cc8:	a904      	add	r1, sp, #16
   b5cca:	4668      	mov	r0, sp
   b5ccc:	f7ff ffcc 	bl	b5c68 <_ZNK5spark18JSONObjectIterator5valueEv>
   b5cd0:	4668      	mov	r0, sp
   b5cd2:	f7ff fc8a 	bl	b55ea <_ZNK5spark9JSONValue5toIntEv>
   b5cd6:	6028      	str	r0, [r5, #0]
   b5cd8:	a801      	add	r0, sp, #4
   b5cda:	f7fe ff8c 	bl	b4bf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5cde:	e7dd      	b.n	b5c9c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b5ce0:	a805      	add	r0, sp, #20
   b5ce2:	f7fe ff88 	bl	b4bf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5ce6:	b00a      	add	sp, #40	; 0x28
   b5ce8:	bd70      	pop	{r4, r5, r6, pc}
   b5cea:	bf00      	nop
   b5cec:	000b7ec0 	.word	0x000b7ec0

000b5cf0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5cf2:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b5cf4:	4620      	mov	r0, r4
   b5cf6:	4913      	ldr	r1, [pc, #76]	; (b5d44 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5cf8:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b5cfa:	f7fe f98f 	bl	b401c <strcmp>
   b5cfe:	b950      	cbnz	r0, b5d16 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b5d00:	f001 fb5c 	bl	b73bc <_Z16_fetch_usbserialv>
   b5d04:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5d08:	f001 fb48 	bl	b739c <_ZN9USBSerial5beginEl>
}
   b5d0c:	b003      	add	sp, #12
   b5d0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b5d12:	f001 bb53 	b.w	b73bc <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b5d16:	490c      	ldr	r1, [pc, #48]	; (b5d48 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b5d18:	4620      	mov	r0, r4
   b5d1a:	f7fe f97f 	bl	b401c <strcmp>
   b5d1e:	b978      	cbnz	r0, b5d40 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b5d20:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b5d24:	a901      	add	r1, sp, #4
   b5d26:	4628      	mov	r0, r5
        int baud = 9600;
   b5d28:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b5d2a:	f7ff ffaf 	bl	b5c8c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b5d2e:	f001 fcf5 	bl	b771c <_Z22__fetch_global_Serial1v>
   b5d32:	9901      	ldr	r1, [sp, #4]
   b5d34:	f001 fada 	bl	b72ec <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b5d38:	f001 fcf0 	bl	b771c <_Z22__fetch_global_Serial1v>
}
   b5d3c:	b003      	add	sp, #12
   b5d3e:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b5d40:	2000      	movs	r0, #0
   b5d42:	e7fb      	b.n	b5d3c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b5d44:	000b7ec5 	.word	0x000b7ec5
   b5d48:	000b7ecc 	.word	0x000b7ecc

000b5d4c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5d4c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5d4e:	e9d0 5300 	ldrd	r5, r3, [r0]
   b5d52:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5d54:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5d56:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5d5a:	42ae      	cmp	r6, r5
   b5d5c:	d005      	beq.n	b5d6a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b5d5e:	f105 0008 	add.w	r0, r5, #8
   b5d62:	f7ff fff3 	bl	b5d4c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5d66:	3514      	adds	r5, #20
   b5d68:	e7f7      	b.n	b5d5a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5d6a:	6820      	ldr	r0, [r4, #0]
   b5d6c:	f7fe ff00 	bl	b4b70 <free>
}
   b5d70:	4620      	mov	r0, r4
   b5d72:	bd70      	pop	{r4, r5, r6, pc}

000b5d74 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b5d74:	b510      	push	{r4, lr}
   b5d76:	4604      	mov	r4, r0
   b5d78:	300c      	adds	r0, #12
   b5d7a:	f7ff ffe7 	bl	b5d4c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5d7e:	4620      	mov	r0, r4
   b5d80:	f7fe ff80 	bl	b4c84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5d84:	4620      	mov	r0, r4
   b5d86:	bd10      	pop	{r4, pc}

000b5d88 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b5d88:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b5d8a:	4b04      	ldr	r3, [pc, #16]	; (b5d9c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b5d8c:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b5d8e:	f840 3b04 	str.w	r3, [r0], #4
   b5d92:	f7ff ffef 	bl	b5d74 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b5d96:	4620      	mov	r0, r4
   b5d98:	bd10      	pop	{r4, pc}
   b5d9a:	bf00      	nop
   b5d9c:	000b7da0 	.word	0x000b7da0

000b5da0 <_ZN5spark16StreamLogHandlerD0Ev>:
   b5da0:	b510      	push	{r4, lr}
   b5da2:	4604      	mov	r4, r0
   b5da4:	f7ff fff0 	bl	b5d88 <_ZN5spark16StreamLogHandlerD1Ev>
   b5da8:	4620      	mov	r0, r4
   b5daa:	2124      	movs	r1, #36	; 0x24
   b5dac:	f7fe f987 	bl	b40be <_ZdlPvj>
   b5db0:	4620      	mov	r0, r4
   b5db2:	bd10      	pop	{r4, pc}

000b5db4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b5db4:	b510      	push	{r4, lr}
   b5db6:	4b03      	ldr	r3, [pc, #12]	; (b5dc4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b5db8:	6003      	str	r3, [r0, #0]
   b5dba:	4604      	mov	r4, r0
   b5dbc:	f7ff ffe4 	bl	b5d88 <_ZN5spark16StreamLogHandlerD1Ev>
   b5dc0:	4620      	mov	r0, r4
   b5dc2:	bd10      	pop	{r4, pc}
   b5dc4:	000b7f68 	.word	0x000b7f68

000b5dc8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b5dc8:	b510      	push	{r4, lr}
   b5dca:	4604      	mov	r4, r0
   b5dcc:	f7ff fff2 	bl	b5db4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b5dd0:	4620      	mov	r0, r4
   b5dd2:	2124      	movs	r1, #36	; 0x24
   b5dd4:	f7fe f973 	bl	b40be <_ZdlPvj>
   b5dd8:	4620      	mov	r0, r4
   b5dda:	bd10      	pop	{r4, pc}

000b5ddc <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b5ddc:	680a      	ldr	r2, [r1, #0]
   b5dde:	6002      	str	r2, [r0, #0]
   b5de0:	684a      	ldr	r2, [r1, #4]
   b5de2:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b5de4:	2200      	movs	r2, #0
   b5de6:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b5dea:	b510      	push	{r4, lr}
   b5dec:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5dee:	688c      	ldr	r4, [r1, #8]
   b5df0:	6084      	str	r4, [r0, #8]
   b5df2:	68cc      	ldr	r4, [r1, #12]
   b5df4:	60c4      	str	r4, [r0, #12]
   b5df6:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5df8:	608a      	str	r2, [r1, #8]
   b5dfa:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5dfc:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5dfe:	610a      	str	r2, [r1, #16]
   b5e00:	bd10      	pop	{r4, pc}

000b5e02 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
   b5e02:	2200      	movs	r2, #0
   b5e04:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b5e08:	b510      	push	{r4, lr}
        capacity_(0) {
   b5e0a:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5e0c:	680c      	ldr	r4, [r1, #0]
   b5e0e:	6004      	str	r4, [r0, #0]
   b5e10:	684c      	ldr	r4, [r1, #4]
   b5e12:	6044      	str	r4, [r0, #4]
   b5e14:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5e16:	600a      	str	r2, [r1, #0]
   b5e18:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5e1a:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5e1c:	608a      	str	r2, [r1, #8]
}
   b5e1e:	bd10      	pop	{r4, pc}

000b5e20 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b5e20:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b5e22:	6803      	ldr	r3, [r0, #0]
   b5e24:	4604      	mov	r4, r0
   b5e26:	6818      	ldr	r0, [r3, #0]
   b5e28:	f7fe fc56 	bl	b46d8 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b5e2c:	4620      	mov	r0, r4
   b5e2e:	bd10      	pop	{r4, pc}

000b5e30 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b5e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5e34:	b087      	sub	sp, #28
   b5e36:	4680      	mov	r8, r0
   b5e38:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b5e3a:	4b1c      	ldr	r3, [pc, #112]	; (b5eac <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b5e3c:	685b      	ldr	r3, [r3, #4]
   b5e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5e42:	4689      	mov	r9, r1
   b5e44:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   b5e46:	b96b      	cbnz	r3, b5e64 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b5e48:	f7ff febe 	bl	b5bc8 <_ZN5spark10LogManager8instanceEv>
   b5e4c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b5e4e:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b5e52:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5e54:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b5e56:	f7ff fd7b 	bl	b5950 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b5e5a:	7b23      	ldrb	r3, [r4, #12]
   b5e5c:	b12b      	cbz	r3, b5e6a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b5e5e:	a805      	add	r0, sp, #20
   b5e60:	f7ff ffde 	bl	b5e20 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b5e64:	b007      	add	sp, #28
   b5e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b5e6a:	2301      	movs	r3, #1
   b5e6c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b5e6e:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b5e72:	fa5f f989 	uxtb.w	r9, r9
   b5e76:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5e7a:	45aa      	cmp	sl, r5
   b5e7c:	d012      	beq.n	b5ea4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b5e7e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b5e82:	4631      	mov	r1, r6
   b5e84:	1d38      	adds	r0, r7, #4
   b5e86:	f7ff fdf3 	bl	b5a70 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b5e8a:	4581      	cmp	r9, r0
   b5e8c:	d3f5      	bcc.n	b5e7a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b5e8e:	683b      	ldr	r3, [r7, #0]
   b5e90:	9a03      	ldr	r2, [sp, #12]
   b5e92:	9200      	str	r2, [sp, #0]
   b5e94:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b5e98:	464a      	mov	r2, r9
   b5e9a:	4633      	mov	r3, r6
   b5e9c:	4641      	mov	r1, r8
   b5e9e:	4638      	mov	r0, r7
   b5ea0:	47d8      	blx	fp
   b5ea2:	e7ea      	b.n	b5e7a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b5ea4:	2300      	movs	r3, #0
   b5ea6:	7323      	strb	r3, [r4, #12]
   b5ea8:	e7d9      	b.n	b5e5e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b5eaa:	bf00      	nop
   b5eac:	e000ed00 	.word	0xe000ed00

000b5eb0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b5eb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5eb4:	469b      	mov	fp, r3
   b5eb6:	4b1a      	ldr	r3, [pc, #104]	; (b5f20 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b5eb8:	685b      	ldr	r3, [r3, #4]
   b5eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5ebe:	4680      	mov	r8, r0
   b5ec0:	4689      	mov	r9, r1
   b5ec2:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   b5ec4:	b96b      	cbnz	r3, b5ee2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b5ec6:	f7ff fe7f 	bl	b5bc8 <_ZN5spark10LogManager8instanceEv>
   b5eca:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b5ecc:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b5ed0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5ed2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5ed4:	f7ff fd3c 	bl	b5950 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b5ed8:	7b23      	ldrb	r3, [r4, #12]
   b5eda:	b12b      	cbz	r3, b5ee8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b5edc:	a801      	add	r0, sp, #4
   b5ede:	f7ff ff9f 	bl	b5e20 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b5ee2:	b003      	add	sp, #12
   b5ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b5ee8:	2301      	movs	r3, #1
   b5eea:	7323      	strb	r3, [r4, #12]
   b5eec:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b5ef0:	b2f6      	uxtb	r6, r6
   b5ef2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5ef6:	4555      	cmp	r5, sl
   b5ef8:	d00e      	beq.n	b5f18 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b5efa:	f855 7b04 	ldr.w	r7, [r5], #4
   b5efe:	4659      	mov	r1, fp
   b5f00:	1d38      	adds	r0, r7, #4
   b5f02:	f7ff fdb5 	bl	b5a70 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b5f06:	4286      	cmp	r6, r0
   b5f08:	d3f5      	bcc.n	b5ef6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b5f0a:	683b      	ldr	r3, [r7, #0]
   b5f0c:	464a      	mov	r2, r9
   b5f0e:	68db      	ldr	r3, [r3, #12]
   b5f10:	4641      	mov	r1, r8
   b5f12:	4638      	mov	r0, r7
   b5f14:	4798      	blx	r3
   b5f16:	e7ee      	b.n	b5ef6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b5f18:	2300      	movs	r3, #0
   b5f1a:	7323      	strb	r3, [r4, #12]
   b5f1c:	e7de      	b.n	b5edc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b5f1e:	bf00      	nop
   b5f20:	e000ed00 	.word	0xe000ed00

000b5f24 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b5f24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5f28:	4b16      	ldr	r3, [pc, #88]	; (b5f84 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b5f2a:	685b      	ldr	r3, [r3, #4]
   b5f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5f30:	4605      	mov	r5, r0
   b5f32:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   b5f34:	bb1b      	cbnz	r3, b5f7e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b5f36:	f7ff fe47 	bl	b5bc8 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b5f3a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b5f3e:	4604      	mov	r4, r0
   b5f40:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5f42:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5f44:	f7ff fd04 	bl	b5950 <_ZN14RecursiveMutex4lockEv.isra.0>
   b5f48:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b5f4c:	2446      	movs	r4, #70	; 0x46
   b5f4e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5f52:	45b0      	cmp	r8, r6
   b5f54:	d109      	bne.n	b5f6a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b5f56:	a801      	add	r0, sp, #4
   b5f58:	f7ff ff62 	bl	b5e20 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b5f5c:	42a5      	cmp	r5, r4
   b5f5e:	bfb4      	ite	lt
   b5f60:	2000      	movlt	r0, #0
   b5f62:	2001      	movge	r0, #1
}
   b5f64:	b002      	add	sp, #8
   b5f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b5f6a:	f856 0b04 	ldr.w	r0, [r6], #4
   b5f6e:	4639      	mov	r1, r7
   b5f70:	3004      	adds	r0, #4
   b5f72:	f7ff fd7d 	bl	b5a70 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b5f76:	4284      	cmp	r4, r0
   b5f78:	bfa8      	it	ge
   b5f7a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b5f7c:	e7e9      	b.n	b5f52 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b5f7e:	2000      	movs	r0, #0
   b5f80:	e7f0      	b.n	b5f64 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b5f82:	bf00      	nop
   b5f84:	e000ed00 	.word	0xe000ed00

000b5f88 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5f8a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b5f8e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5f90:	4604      	mov	r4, r0
   b5f92:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5f94:	db0d      	blt.n	b5fb2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b5f96:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b5f98:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5f9a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5f9c:	dd04      	ble.n	b5fa8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b5f9e:	00b9      	lsls	r1, r7, #2
   b5fa0:	f7fe fdee 	bl	b4b80 <realloc>
            if (!d) {
   b5fa4:	b918      	cbnz	r0, b5fae <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b5fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b5fa8:	f7fe fde2 	bl	b4b70 <free>
        T* d = nullptr;
   b5fac:	2000      	movs	r0, #0
        data_ = d;
   b5fae:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5fb0:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b5fb2:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5fb4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5fb6:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b5fba:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5fbc:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b5fc0:	1d08      	adds	r0, r1, #4
   b5fc2:	f001 fd09 	bl	b79d8 <memmove>
    new(p) T(std::move(value));
   b5fc6:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b5fca:	6863      	ldr	r3, [r4, #4]
   b5fcc:	3301      	adds	r3, #1
   b5fce:	6063      	str	r3, [r4, #4]
    return true;
   b5fd0:	2001      	movs	r0, #1
   b5fd2:	e7e8      	b.n	b5fa6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b5fd4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b5fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b5fd6:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b5fda:	4604      	mov	r4, r0
   b5fdc:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5fde:	9301      	str	r3, [sp, #4]
   b5fe0:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b5fe2:	f7ff fcb5 	bl	b5950 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b5fe6:	e9d4 3200 	ldrd	r3, r2, [r4]
   b5fea:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b5fee:	4293      	cmp	r3, r2
   b5ff0:	4619      	mov	r1, r3
   b5ff2:	d00b      	beq.n	b600c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b5ff4:	6809      	ldr	r1, [r1, #0]
   b5ff6:	42a9      	cmp	r1, r5
   b5ff8:	f103 0304 	add.w	r3, r3, #4
   b5ffc:	d1f7      	bne.n	b5fee <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b5ffe:	a801      	add	r0, sp, #4
   b6000:	f7ff ff0e 	bl	b5e20 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b6004:	2500      	movs	r5, #0
}
   b6006:	4628      	mov	r0, r5
   b6008:	b003      	add	sp, #12
   b600a:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b600c:	4629      	mov	r1, r5
   b600e:	4620      	mov	r0, r4
   b6010:	f7ff ffba 	bl	b5f88 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b6014:	4605      	mov	r5, r0
   b6016:	2800      	cmp	r0, #0
   b6018:	d0f1      	beq.n	b5ffe <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b601a:	6863      	ldr	r3, [r4, #4]
   b601c:	2b01      	cmp	r3, #1
   b601e:	d101      	bne.n	b6024 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b6020:	f7ff fdee 	bl	b5c00 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b6024:	a801      	add	r0, sp, #4
   b6026:	f7ff fefb 	bl	b5e20 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b602a:	e7ec      	b.n	b6006 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b602c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b602c:	b570      	push	{r4, r5, r6, lr}
   b602e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b6030:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6034:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b6036:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b603a:	4282      	cmp	r2, r0
   b603c:	d00f      	beq.n	b605e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b603e:	4601      	mov	r1, r0
            if (*p == value) {
   b6040:	681d      	ldr	r5, [r3, #0]
   b6042:	f851 6b04 	ldr.w	r6, [r1], #4
   b6046:	42ae      	cmp	r6, r5
   b6048:	d107      	bne.n	b605a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b604a:	1a52      	subs	r2, r2, r1
   b604c:	f001 fcc4 	bl	b79d8 <memmove>
    --size_;
   b6050:	6863      	ldr	r3, [r4, #4]
   b6052:	3b01      	subs	r3, #1
   b6054:	6063      	str	r3, [r4, #4]
    return true;
   b6056:	2001      	movs	r0, #1
}
   b6058:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b605a:	4608      	mov	r0, r1
   b605c:	e7ed      	b.n	b603a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b605e:	2000      	movs	r0, #0
   b6060:	e7fa      	b.n	b6058 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b6062 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b6062:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b6064:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b6068:	4604      	mov	r4, r0
   b606a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b606c:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b606e:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b6070:	f7ff fc6e 	bl	b5950 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b6074:	a901      	add	r1, sp, #4
   b6076:	4620      	mov	r0, r4
   b6078:	f7ff ffd8 	bl	b602c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b607c:	b118      	cbz	r0, b6086 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b607e:	6863      	ldr	r3, [r4, #4]
   b6080:	b90b      	cbnz	r3, b6086 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b6082:	f7ff fdc9 	bl	b5c18 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b6086:	a803      	add	r0, sp, #12
   b6088:	f7ff feca 	bl	b5e20 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b608c:	b004      	add	sp, #16
   b608e:	bd10      	pop	{r4, pc}

000b6090 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b6090:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b6092:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b6096:	2318      	movs	r3, #24
   b6098:	4604      	mov	r4, r0
   b609a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b609e:	42ae      	cmp	r6, r5
   b60a0:	d015      	beq.n	b60ce <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b60a2:	f105 0110 	add.w	r1, r5, #16
   b60a6:	4620      	mov	r0, r4
   b60a8:	f7ff ffc0 	bl	b602c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b60ac:	6863      	ldr	r3, [r4, #4]
   b60ae:	b90b      	cbnz	r3, b60b4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b60b0:	f7ff fdb2 	bl	b5c18 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b60b4:	69e0      	ldr	r0, [r4, #28]
   b60b6:	6929      	ldr	r1, [r5, #16]
   b60b8:	6803      	ldr	r3, [r0, #0]
   b60ba:	68db      	ldr	r3, [r3, #12]
   b60bc:	4798      	blx	r3
        if (h.stream) {
   b60be:	6969      	ldr	r1, [r5, #20]
   b60c0:	b119      	cbz	r1, b60ca <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b60c2:	6a20      	ldr	r0, [r4, #32]
   b60c4:	6803      	ldr	r3, [r0, #0]
   b60c6:	68db      	ldr	r3, [r3, #12]
   b60c8:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b60ca:	3518      	adds	r5, #24
   b60cc:	e7e7      	b.n	b609e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b60ce:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b60d2:	2618      	movs	r6, #24
   b60d4:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b60d8:	42ae      	cmp	r6, r5
   b60da:	d004      	beq.n	b60e6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b60dc:	4628      	mov	r0, r5
   b60de:	f000 fce1 	bl	b6aa4 <_ZN6StringD1Ev>
   b60e2:	3518      	adds	r5, #24
   b60e4:	e7f8      	b.n	b60d8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b60e6:	2300      	movs	r3, #0
   b60e8:	6163      	str	r3, [r4, #20]
}
   b60ea:	bd70      	pop	{r4, r5, r6, pc}

000b60ec <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b60ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b60ee:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b60f0:	f7ff fd92 	bl	b5c18 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b60f4:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b60f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b60fa:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b60fc:	f7ff fc28 	bl	b5950 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b6100:	4620      	mov	r0, r4
   b6102:	f7ff ffc5 	bl	b6090 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b6106:	a801      	add	r0, sp, #4
   b6108:	f7ff fe8a 	bl	b5e20 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b610c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b610e:	b108      	cbz	r0, b6114 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b6110:	f7fe fad2 	bl	b46b8 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b6114:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b6118:	2618      	movs	r6, #24
   b611a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b611e:	42ae      	cmp	r6, r5
   b6120:	d004      	beq.n	b612c <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b6122:	4628      	mov	r0, r5
   b6124:	f000 fcbe 	bl	b6aa4 <_ZN6StringD1Ev>
   b6128:	3518      	adds	r5, #24
   b612a:	e7f8      	b.n	b611e <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b612c:	6920      	ldr	r0, [r4, #16]
   b612e:	f7fe fd1f 	bl	b4b70 <free>
   b6132:	6820      	ldr	r0, [r4, #0]
   b6134:	f7fe fd1c 	bl	b4b70 <free>
}
   b6138:	4620      	mov	r0, r4
   b613a:	b002      	add	sp, #8
   b613c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b6140 <__tcf_2>:
    static LogManager mgr;
   b6140:	4801      	ldr	r0, [pc, #4]	; (b6148 <__tcf_2+0x8>)
   b6142:	f7ff bfd3 	b.w	b60ec <_ZN5spark10LogManagerD1Ev>
   b6146:	bf00      	nop
   b6148:	2003e6ac 	.word	0x2003e6ac

000b614c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b614c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b614e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6150:	4604      	mov	r4, r0
   b6152:	460d      	mov	r5, r1
   b6154:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6156:	d915      	bls.n	b6184 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b6158:	4290      	cmp	r0, r2
   b615a:	d214      	bcs.n	b6186 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b615c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b6160:	1a75      	subs	r5, r6, r1
   b6162:	f1a1 0714 	sub.w	r7, r1, #20
   b6166:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6168:	42b7      	cmp	r7, r6
   b616a:	d01a      	beq.n	b61a2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b616c:	b11c      	cbz	r4, b6176 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b616e:	4631      	mov	r1, r6
   b6170:	4620      	mov	r0, r4
   b6172:	f7ff fe33 	bl	b5ddc <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b6176:	f106 0008 	add.w	r0, r6, #8
   b617a:	f7ff fde7 	bl	b5d4c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b617e:	3e14      	subs	r6, #20
   b6180:	3c14      	subs	r4, #20
   b6182:	e7f1      	b.n	b6168 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b6184:	d00d      	beq.n	b61a2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b6186:	42b5      	cmp	r5, r6
   b6188:	d00b      	beq.n	b61a2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b618a:	b11c      	cbz	r4, b6194 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b618c:	4629      	mov	r1, r5
   b618e:	4620      	mov	r0, r4
   b6190:	f7ff fe24 	bl	b5ddc <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b6194:	f105 0008 	add.w	r0, r5, #8
   b6198:	f7ff fdd8 	bl	b5d4c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b619c:	3514      	adds	r5, #20
   b619e:	3414      	adds	r4, #20
   b61a0:	e7f1      	b.n	b6186 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b61a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b61a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b61a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b61a8:	4690      	mov	r8, r2
   b61aa:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b61ac:	2300      	movs	r3, #0
   b61ae:	9103      	str	r1, [sp, #12]
    return size_;
   b61b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b61b4:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b61b6:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b61b8:	4299      	cmp	r1, r3
        capacity_(0) {
   b61ba:	e9c0 3300 	strd	r3, r3, [r0]
   b61be:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b61c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b61c6:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b61ca:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b61cc:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b61ce:	dc23      	bgt.n	b6218 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b61d0:	e9d8 5700 	ldrd	r5, r7, [r8]
   b61d4:	2314      	movs	r3, #20
   b61d6:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b61da:	42af      	cmp	r7, r5
   b61dc:	d03b      	beq.n	b6256 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b61de:	4629      	mov	r1, r5
   b61e0:	a80b      	add	r0, sp, #44	; 0x2c
   b61e2:	f000 fcdc 	bl	b6b9e <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b61e6:	a90b      	add	r1, sp, #44	; 0x2c
   b61e8:	a80f      	add	r0, sp, #60	; 0x3c
   b61ea:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b61ec:	f000 fcd7 	bl	b6b9e <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b61f0:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b61f4:	4299      	cmp	r1, r3
   b61f6:	da1b      	bge.n	b6230 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b61f8:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b61fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b61fc:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b6200:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b6204:	4631      	mov	r1, r6
   b6206:	f106 0010 	add.w	r0, r6, #16
   b620a:	f7ff fb23 	bl	b5854 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b620e:	b9ee      	cbnz	r6, b624c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b6210:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6212:	3301      	adds	r3, #1
   b6214:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b6216:	e011      	b.n	b623c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b6218:	a808      	add	r0, sp, #32
   b621a:	f7ff fb45 	bl	b58a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b621e:	2800      	cmp	r0, #0
   b6220:	d1d6      	bne.n	b61d0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b6222:	a808      	add	r0, sp, #32
   b6224:	f7fe fd2e 	bl	b4c84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b6228:	4620      	mov	r0, r4
   b622a:	b015      	add	sp, #84	; 0x54
   b622c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6230:	3101      	adds	r1, #1
   b6232:	a808      	add	r0, sp, #32
   b6234:	f7ff fb38 	bl	b58a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b6238:	2800      	cmp	r0, #0
   b623a:	d1dd      	bne.n	b61f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b623c:	a80f      	add	r0, sp, #60	; 0x3c
   b623e:	f000 fc31 	bl	b6aa4 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b6242:	a80b      	add	r0, sp, #44	; 0x2c
   b6244:	f000 fc2e 	bl	b6aa4 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b6248:	3514      	adds	r5, #20
   b624a:	e7c6      	b.n	b61da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b624c:	a90f      	add	r1, sp, #60	; 0x3c
   b624e:	4630      	mov	r0, r6
   b6250:	f000 fca5 	bl	b6b9e <_ZN6StringC1EOS_>
   b6254:	e7dc      	b.n	b6210 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b6256:	2600      	movs	r6, #0
   b6258:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b625c:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b625e:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b6262:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b6266:	429e      	cmp	r6, r3
   b6268:	da7c      	bge.n	b6364 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b626a:	0133      	lsls	r3, r6, #4
   b626c:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b626e:	9306      	str	r3, [sp, #24]
        if (!category) {
   b6270:	b90b      	cbnz	r3, b6276 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b6272:	3601      	adds	r6, #1
   b6274:	e7f5      	b.n	b6262 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b6276:	2300      	movs	r3, #0
   b6278:	9307      	str	r3, [sp, #28]
   b627a:	fb09 f306 	mul.w	r3, r9, r6
   b627e:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b6280:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b6282:	a907      	add	r1, sp, #28
   b6284:	a806      	add	r0, sp, #24
   b6286:	f7ff fb3c 	bl	b5902 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b628a:	4682      	mov	sl, r0
   b628c:	2800      	cmp	r0, #0
   b628e:	d0f0      	beq.n	b6272 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b6290:	f04f 0300 	mov.w	r3, #0
   b6294:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b6298:	4601      	mov	r1, r0
   b629a:	9a07      	ldr	r2, [sp, #28]
   b629c:	f10d 0317 	add.w	r3, sp, #23
   b62a0:	4628      	mov	r0, r5
   b62a2:	f7ff fba9 	bl	b59f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b62a6:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b62aa:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b62ac:	2f00      	cmp	r7, #0
   b62ae:	d14a      	bne.n	b6346 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b62b0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b62b4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b62b8:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b62bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b62c0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b62c4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b62c8:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b62ca:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b62ce:	4293      	cmp	r3, r2
   b62d0:	db17      	blt.n	b6302 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b62d2:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b62d6:	f1ba 0f00 	cmp.w	sl, #0
   b62da:	dd30      	ble.n	b633e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b62dc:	fb09 f00a 	mul.w	r0, r9, sl
   b62e0:	f7fe fc3e 	bl	b4b60 <malloc>
            if (!d) {
   b62e4:	4683      	mov	fp, r0
   b62e6:	b360      	cbz	r0, b6342 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b62e8:	e9d5 1200 	ldrd	r1, r2, [r5]
   b62ec:	fb09 1202 	mla	r2, r9, r2, r1
   b62f0:	f7ff ff2c 	bl	b614c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b62f4:	6828      	ldr	r0, [r5, #0]
   b62f6:	f7fe fc3b 	bl	b4b70 <free>
        data_ = d;
   b62fa:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b62fe:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b6302:	682b      	ldr	r3, [r5, #0]
   b6304:	9a01      	ldr	r2, [sp, #4]
   b6306:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b630a:	686a      	ldr	r2, [r5, #4]
   b630c:	4651      	mov	r1, sl
   b630e:	fb09 3202 	mla	r2, r9, r2, r3
   b6312:	f10a 0014 	add.w	r0, sl, #20
   b6316:	f7ff ff19 	bl	b614c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b631a:	f1ba 0f00 	cmp.w	sl, #0
   b631e:	d003      	beq.n	b6328 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b6320:	a90f      	add	r1, sp, #60	; 0x3c
   b6322:	4650      	mov	r0, sl
   b6324:	f7ff fd5a 	bl	b5ddc <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b6328:	686b      	ldr	r3, [r5, #4]
   b632a:	3301      	adds	r3, #1
   b632c:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b632e:	a811      	add	r0, sp, #68	; 0x44
   b6330:	f7ff fd0c 	bl	b5d4c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6334:	b13f      	cbz	r7, b6346 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b6336:	a80b      	add	r0, sp, #44	; 0x2c
   b6338:	f7ff fd08 	bl	b5d4c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b633c:	e771      	b.n	b6222 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b633e:	46bb      	mov	fp, r7
   b6340:	e7d8      	b.n	b62f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6342:	2701      	movs	r7, #1
   b6344:	e7f3      	b.n	b632e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b6346:	9b01      	ldr	r3, [sp, #4]
   b6348:	682d      	ldr	r5, [r5, #0]
   b634a:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b634e:	9b06      	ldr	r3, [sp, #24]
   b6350:	781b      	ldrb	r3, [r3, #0]
   b6352:	b92b      	cbnz	r3, b6360 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b6354:	f8d8 3000 	ldr.w	r3, [r8]
   b6358:	9a02      	ldr	r2, [sp, #8]
   b635a:	4413      	add	r3, r2
   b635c:	7c1b      	ldrb	r3, [r3, #16]
   b635e:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b6360:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b6362:	e78e      	b.n	b6282 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6364:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b6366:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6368:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b636a:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b636c:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b636e:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b6370:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b6372:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6374:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6376:	60a2      	str	r2, [r4, #8]
   b6378:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b637a:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b637c:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b637e:	60e2      	str	r2, [r4, #12]
   b6380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b6382:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6384:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6386:	6122      	str	r2, [r4, #16]
   b6388:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b638a:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b638c:	9b03      	ldr	r3, [sp, #12]
   b638e:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b6390:	6162      	str	r2, [r4, #20]
   b6392:	7623      	strb	r3, [r4, #24]
   b6394:	e7cf      	b.n	b6336 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b6398 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b6398:	b5f0      	push	{r4, r5, r6, r7, lr}
   b639a:	4604      	mov	r4, r0
   b639c:	b087      	sub	sp, #28
   b639e:	460d      	mov	r5, r1
        filter_(level, filters) {
   b63a0:	4626      	mov	r6, r4
        stream_(&stream) {
   b63a2:	4619      	mov	r1, r3
   b63a4:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b63a6:	4617      	mov	r7, r2
        stream_(&stream) {
   b63a8:	f7fe f8d7 	bl	b455a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b63ac:	4b0b      	ldr	r3, [pc, #44]	; (b63dc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b63ae:	f846 3b04 	str.w	r3, [r6], #4
   b63b2:	4669      	mov	r1, sp
   b63b4:	a803      	add	r0, sp, #12
   b63b6:	f7fe f8d0 	bl	b455a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b63ba:	aa03      	add	r2, sp, #12
   b63bc:	4639      	mov	r1, r7
   b63be:	4630      	mov	r0, r6
   b63c0:	f7ff fef0 	bl	b61a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b63c4:	a803      	add	r0, sp, #12
   b63c6:	f7fe f887 	bl	b44d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b63ca:	4668      	mov	r0, sp
   b63cc:	f7fe f884 	bl	b44d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b63d0:	4b03      	ldr	r3, [pc, #12]	; (b63e0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b63d2:	6023      	str	r3, [r4, #0]
}
   b63d4:	4620      	mov	r0, r4
        stream_(&stream) {
   b63d6:	6225      	str	r5, [r4, #32]
}
   b63d8:	b007      	add	sp, #28
   b63da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b63dc:	000b7da0 	.word	0x000b7da0
   b63e0:	000b7f50 	.word	0x000b7f50

000b63e4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b63e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b63e6:	460f      	mov	r7, r1
   b63e8:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b63ea:	491d      	ldr	r1, [pc, #116]	; (b6460 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b63ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b63ee:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b63f0:	4616      	mov	r6, r2
   b63f2:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b63f4:	f7fd fe12 	bl	b401c <strcmp>
   b63f8:	b9c0      	cbnz	r0, b642c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b63fa:	b1a4      	cbz	r4, b6426 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b63fc:	4629      	mov	r1, r5
   b63fe:	a801      	add	r0, sp, #4
   b6400:	f7ff fcff 	bl	b5e02 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b6404:	4917      	ldr	r1, [pc, #92]	; (b6464 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b6406:	2024      	movs	r0, #36	; 0x24
   b6408:	f001 f9ac 	bl	b7764 <_ZnwjRKSt9nothrow_t>
   b640c:	4605      	mov	r5, r0
   b640e:	b130      	cbz	r0, b641e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b6410:	ab01      	add	r3, sp, #4
   b6412:	4632      	mov	r2, r6
   b6414:	4621      	mov	r1, r4
   b6416:	f7ff ffbf 	bl	b6398 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b641a:	4b13      	ldr	r3, [pc, #76]	; (b6468 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b641c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b641e:	a801      	add	r0, sp, #4
   b6420:	f7fe f85a 	bl	b44d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6424:	462c      	mov	r4, r5
}
   b6426:	4620      	mov	r0, r4
   b6428:	b005      	add	sp, #20
   b642a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b642c:	490f      	ldr	r1, [pc, #60]	; (b646c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b642e:	4638      	mov	r0, r7
   b6430:	f7fd fdf4 	bl	b401c <strcmp>
   b6434:	b990      	cbnz	r0, b645c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b6436:	2c00      	cmp	r4, #0
   b6438:	d0f5      	beq.n	b6426 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b643a:	4629      	mov	r1, r5
   b643c:	a801      	add	r0, sp, #4
   b643e:	f7ff fce0 	bl	b5e02 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b6442:	4908      	ldr	r1, [pc, #32]	; (b6464 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b6444:	2024      	movs	r0, #36	; 0x24
   b6446:	f001 f98d 	bl	b7764 <_ZnwjRKSt9nothrow_t>
   b644a:	4605      	mov	r5, r0
   b644c:	2800      	cmp	r0, #0
   b644e:	d0e6      	beq.n	b641e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b6450:	ab01      	add	r3, sp, #4
   b6452:	4632      	mov	r2, r6
   b6454:	4621      	mov	r1, r4
   b6456:	f7ff ff9f 	bl	b6398 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b645a:	e7e0      	b.n	b641e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b645c:	2400      	movs	r4, #0
   b645e:	e7e2      	b.n	b6426 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b6460:	000b7ed4 	.word	0x000b7ed4
   b6464:	000b8144 	.word	0x000b8144
   b6468:	000b7f68 	.word	0x000b7f68
   b646c:	000b7ed8 	.word	0x000b7ed8

000b6470 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b6470:	4b01      	ldr	r3, [pc, #4]	; (b6478 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6472:	4a02      	ldr	r2, [pc, #8]	; (b647c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6474:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6476:	4770      	bx	lr
   b6478:	2003e6a8 	.word	0x2003e6a8
   b647c:	000b7ee9 	.word	0x000b7ee9

000b6480 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6484:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b6486:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b648a:	4604      	mov	r4, r0
   b648c:	460e      	mov	r6, r1
   b648e:	4617      	mov	r7, r2
   b6490:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b6492:	f000 ff93 	bl	b73bc <_Z16_fetch_usbserialv>
   b6496:	4581      	cmp	r9, r0
   b6498:	d04c      	beq.n	b6534 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b649a:	792b      	ldrb	r3, [r5, #4]
   b649c:	0719      	lsls	r1, r3, #28
   b649e:	d504      	bpl.n	b64aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b64a0:	696a      	ldr	r2, [r5, #20]
   b64a2:	4954      	ldr	r1, [pc, #336]	; (b65f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b64a4:	4620      	mov	r0, r4
   b64a6:	f7ff fb0c 	bl	b5ac2 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b64aa:	f1b8 0f00 	cmp.w	r8, #0
   b64ae:	d00d      	beq.n	b64cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b64b0:	215b      	movs	r1, #91	; 0x5b
   b64b2:	4620      	mov	r0, r4
   b64b4:	f7ff fa94 	bl	b59e0 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b64b8:	4641      	mov	r1, r8
   b64ba:	4620      	mov	r0, r4
   b64bc:	f7ff fa81 	bl	b59c2 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b64c0:	6823      	ldr	r3, [r4, #0]
   b64c2:	494d      	ldr	r1, [pc, #308]	; (b65f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b64c4:	68db      	ldr	r3, [r3, #12]
   b64c6:	2202      	movs	r2, #2
   b64c8:	4620      	mov	r0, r4
   b64ca:	4798      	blx	r3
    if (attr.has_file) {
   b64cc:	792b      	ldrb	r3, [r5, #4]
   b64ce:	07da      	lsls	r2, r3, #31
   b64d0:	d523      	bpl.n	b651a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b64d2:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b64d6:	212f      	movs	r1, #47	; 0x2f
   b64d8:	4640      	mov	r0, r8
   b64da:	f001 fb1e 	bl	b7b1a <strrchr>
    if (s1) {
   b64de:	b108      	cbz	r0, b64e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b64e0:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b64e4:	4641      	mov	r1, r8
   b64e6:	4620      	mov	r0, r4
   b64e8:	f7ff fa6b 	bl	b59c2 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b64ec:	792b      	ldrb	r3, [r5, #4]
   b64ee:	079b      	lsls	r3, r3, #30
   b64f0:	d508      	bpl.n	b6504 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b64f2:	213a      	movs	r1, #58	; 0x3a
   b64f4:	4620      	mov	r0, r4
   b64f6:	f7ff fa73 	bl	b59e0 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b64fa:	68ea      	ldr	r2, [r5, #12]
   b64fc:	493f      	ldr	r1, [pc, #252]	; (b65fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b64fe:	4620      	mov	r0, r4
   b6500:	f7ff fadf 	bl	b5ac2 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b6504:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b6506:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b6508:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b650c:	68db      	ldr	r3, [r3, #12]
   b650e:	bf14      	ite	ne
   b6510:	493b      	ldrne	r1, [pc, #236]	; (b6600 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b6512:	493c      	ldreq	r1, [pc, #240]	; (b6604 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b6514:	2202      	movs	r2, #2
            write(": ", 2);
   b6516:	4620      	mov	r0, r4
   b6518:	4798      	blx	r3
    if (attr.has_function) {
   b651a:	792b      	ldrb	r3, [r5, #4]
   b651c:	0758      	lsls	r0, r3, #29
   b651e:	d51d      	bpl.n	b655c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6520:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b6522:	460b      	mov	r3, r1
   b6524:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b6526:	f813 0b01 	ldrb.w	r0, [r3], #1
   b652a:	b160      	cbz	r0, b6546 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b652c:	2820      	cmp	r0, #32
   b652e:	d108      	bne.n	b6542 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b6530:	4619      	mov	r1, r3
   b6532:	e7f7      	b.n	b6524 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b6534:	4834      	ldr	r0, [pc, #208]	; (b6608 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b6536:	f000 f982 	bl	b683e <_ZN5spark12NetworkClass9listeningEv>
   b653a:	2800      	cmp	r0, #0
   b653c:	d0ad      	beq.n	b649a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b653e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b6542:	2828      	cmp	r0, #40	; 0x28
   b6544:	d1ee      	bne.n	b6524 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b6546:	6823      	ldr	r3, [r4, #0]
   b6548:	1a52      	subs	r2, r2, r1
   b654a:	68db      	ldr	r3, [r3, #12]
   b654c:	4620      	mov	r0, r4
   b654e:	4798      	blx	r3
        write("(): ", 4);
   b6550:	6823      	ldr	r3, [r4, #0]
   b6552:	492e      	ldr	r1, [pc, #184]	; (b660c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b6554:	68db      	ldr	r3, [r3, #12]
   b6556:	2204      	movs	r2, #4
   b6558:	4620      	mov	r0, r4
   b655a:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b655c:	2100      	movs	r1, #0
   b655e:	4638      	mov	r0, r7
   b6560:	f7fe fa32 	bl	b49c8 <log_level_name>
   b6564:	4601      	mov	r1, r0
    write(s);
   b6566:	4620      	mov	r0, r4
   b6568:	f7ff fa2b 	bl	b59c2 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b656c:	6823      	ldr	r3, [r4, #0]
   b656e:	4925      	ldr	r1, [pc, #148]	; (b6604 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b6570:	68db      	ldr	r3, [r3, #12]
   b6572:	2202      	movs	r2, #2
   b6574:	4620      	mov	r0, r4
   b6576:	4798      	blx	r3
    if (msg) {
   b6578:	b11e      	cbz	r6, b6582 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b657a:	4631      	mov	r1, r6
   b657c:	4620      	mov	r0, r4
   b657e:	f7ff fa20 	bl	b59c2 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b6582:	792b      	ldrb	r3, [r5, #4]
   b6584:	f013 0f30 	tst.w	r3, #48	; 0x30
   b6588:	d02c      	beq.n	b65e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b658a:	6823      	ldr	r3, [r4, #0]
   b658c:	4920      	ldr	r1, [pc, #128]	; (b6610 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b658e:	68db      	ldr	r3, [r3, #12]
   b6590:	2202      	movs	r2, #2
   b6592:	4620      	mov	r0, r4
   b6594:	4798      	blx	r3
        if (attr.has_code) {
   b6596:	792b      	ldrb	r3, [r5, #4]
   b6598:	06d9      	lsls	r1, r3, #27
   b659a:	d50a      	bpl.n	b65b2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b659c:	6823      	ldr	r3, [r4, #0]
   b659e:	491d      	ldr	r1, [pc, #116]	; (b6614 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b65a0:	68db      	ldr	r3, [r3, #12]
   b65a2:	2207      	movs	r2, #7
   b65a4:	4620      	mov	r0, r4
   b65a6:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b65a8:	69aa      	ldr	r2, [r5, #24]
   b65aa:	491b      	ldr	r1, [pc, #108]	; (b6618 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b65ac:	4620      	mov	r0, r4
   b65ae:	f7ff fa88 	bl	b5ac2 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b65b2:	792b      	ldrb	r3, [r5, #4]
   b65b4:	069a      	lsls	r2, r3, #26
   b65b6:	d511      	bpl.n	b65dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b65b8:	06db      	lsls	r3, r3, #27
   b65ba:	d505      	bpl.n	b65c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b65bc:	6823      	ldr	r3, [r4, #0]
   b65be:	4910      	ldr	r1, [pc, #64]	; (b6600 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b65c0:	68db      	ldr	r3, [r3, #12]
   b65c2:	2202      	movs	r2, #2
   b65c4:	4620      	mov	r0, r4
   b65c6:	4798      	blx	r3
            write("details = ", 10);
   b65c8:	6823      	ldr	r3, [r4, #0]
   b65ca:	4914      	ldr	r1, [pc, #80]	; (b661c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b65cc:	68db      	ldr	r3, [r3, #12]
   b65ce:	4620      	mov	r0, r4
   b65d0:	220a      	movs	r2, #10
   b65d2:	4798      	blx	r3
            write(attr.details);
   b65d4:	69e9      	ldr	r1, [r5, #28]
   b65d6:	4620      	mov	r0, r4
   b65d8:	f7ff f9f3 	bl	b59c2 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b65dc:	215d      	movs	r1, #93	; 0x5d
   b65de:	4620      	mov	r0, r4
   b65e0:	f7ff f9fe 	bl	b59e0 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b65e4:	6823      	ldr	r3, [r4, #0]
   b65e6:	490e      	ldr	r1, [pc, #56]	; (b6620 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b65e8:	68db      	ldr	r3, [r3, #12]
   b65ea:	4620      	mov	r0, r4
   b65ec:	2202      	movs	r2, #2
}
   b65ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b65f2:	4718      	bx	r3
   b65f4:	000b7eed 	.word	0x000b7eed
   b65f8:	000b7ef4 	.word	0x000b7ef4
   b65fc:	000b800c 	.word	0x000b800c
   b6600:	000b7ef7 	.word	0x000b7ef7
   b6604:	000b7efc 	.word	0x000b7efc
   b6608:	2003e6d4 	.word	0x2003e6d4
   b660c:	000b7efa 	.word	0x000b7efa
   b6610:	000b7eff 	.word	0x000b7eff
   b6614:	000b7f02 	.word	0x000b7f02
   b6618:	000b7f0a 	.word	0x000b7f0a
   b661c:	000b7f0d 	.word	0x000b7f0d
   b6620:	000b7d5a 	.word	0x000b7d5a

000b6624 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b6624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6628:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   b662a:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b662c:	460d      	mov	r5, r1
   b662e:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   b6630:	f000 fec4 	bl	b73bc <_Z16_fetch_usbserialv>
   b6634:	4287      	cmp	r7, r0
   b6636:	d007      	beq.n	b6648 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   b6638:	6a20      	ldr	r0, [r4, #32]
   b663a:	6803      	ldr	r3, [r0, #0]
   b663c:	4632      	mov	r2, r6
   b663e:	4629      	mov	r1, r5
   b6640:	68db      	ldr	r3, [r3, #12]
}
   b6642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   b6646:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   b6648:	4803      	ldr	r0, [pc, #12]	; (b6658 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   b664a:	f000 f8f8 	bl	b683e <_ZN5spark12NetworkClass9listeningEv>
   b664e:	2800      	cmp	r0, #0
   b6650:	d0f2      	beq.n	b6638 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   b6652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6656:	bf00      	nop
   b6658:	2003e6d4 	.word	0x2003e6d4

000b665c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b665c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6660:	b085      	sub	sp, #20
    return stream_;
   b6662:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b6666:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b6668:	4605      	mov	r5, r0
   b666a:	460f      	mov	r7, r1
   b666c:	4690      	mov	r8, r2
   b666e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b6670:	f000 fea4 	bl	b73bc <_Z16_fetch_usbserialv>
   b6674:	4581      	cmp	r9, r0
   b6676:	d105      	bne.n	b6684 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b6678:	4849      	ldr	r0, [pc, #292]	; (b67a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b667a:	f000 f8e0 	bl	b683e <_ZN5spark12NetworkClass9listeningEv>
   b667e:	2800      	cmp	r0, #0
   b6680:	f040 808a 	bne.w	b6798 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b6684:	6a2b      	ldr	r3, [r5, #32]
        bytesWritten_(0) {
   b6686:	4a47      	ldr	r2, [pc, #284]	; (b67a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b6688:	9200      	str	r2, [sp, #0]
        state_(BEGIN) {
   b668a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b668e:	4668      	mov	r0, sp
        bytesWritten_(0) {
   b6690:	e9cd 3902 	strd	r3, r9, [sp, #8]
        state_(BEGIN) {
   b6694:	f88d 9004 	strb.w	r9, [sp, #4]
   b6698:	f7ff f82d 	bl	b56f6 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b669c:	4649      	mov	r1, r9
   b669e:	4640      	mov	r0, r8
   b66a0:	f7fe f992 	bl	b49c8 <log_level_name>
    json.name("l", 1).value(s);
   b66a4:	4940      	ldr	r1, [pc, #256]	; (b67a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b66a6:	4680      	mov	r8, r0
   b66a8:	2201      	movs	r2, #1
   b66aa:	4668      	mov	r0, sp
   b66ac:	f7ff f8b2 	bl	b5814 <_ZN5spark10JSONWriter4nameEPKcj>
   b66b0:	4641      	mov	r1, r8
   b66b2:	f7ff f978 	bl	b59a6 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b66b6:	b13f      	cbz	r7, b66c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6c>
        json.name("m", 1).value(msg);
   b66b8:	493c      	ldr	r1, [pc, #240]	; (b67ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b66ba:	2201      	movs	r2, #1
   b66bc:	4668      	mov	r0, sp
   b66be:	f7ff f8a9 	bl	b5814 <_ZN5spark10JSONWriter4nameEPKcj>
   b66c2:	4639      	mov	r1, r7
   b66c4:	f7ff f96f 	bl	b59a6 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b66c8:	b13e      	cbz	r6, b66da <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7e>
        json.name("c", 1).value(category);
   b66ca:	4939      	ldr	r1, [pc, #228]	; (b67b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b66cc:	2201      	movs	r2, #1
   b66ce:	4668      	mov	r0, sp
   b66d0:	f7ff f8a0 	bl	b5814 <_ZN5spark10JSONWriter4nameEPKcj>
   b66d4:	4631      	mov	r1, r6
   b66d6:	f7ff f966 	bl	b59a6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b66da:	7923      	ldrb	r3, [r4, #4]
   b66dc:	07df      	lsls	r7, r3, #31
   b66de:	d50e      	bpl.n	b66fe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa2>
        s = extractFileName(attr.file); // Strip directory path
   b66e0:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b66e2:	212f      	movs	r1, #47	; 0x2f
   b66e4:	4630      	mov	r0, r6
   b66e6:	f001 fa18 	bl	b7b1a <strrchr>
    if (s1) {
   b66ea:	b100      	cbz	r0, b66ee <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x92>
        return s1 + 1;
   b66ec:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b66ee:	4931      	ldr	r1, [pc, #196]	; (b67b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b66f0:	2201      	movs	r2, #1
   b66f2:	4668      	mov	r0, sp
   b66f4:	f7ff f88e 	bl	b5814 <_ZN5spark10JSONWriter4nameEPKcj>
   b66f8:	4631      	mov	r1, r6
   b66fa:	f7ff f954 	bl	b59a6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b66fe:	7923      	ldrb	r3, [r4, #4]
   b6700:	079e      	lsls	r6, r3, #30
   b6702:	d507      	bpl.n	b6714 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb8>
        json.name("ln", 2).value(attr.line);
   b6704:	492c      	ldr	r1, [pc, #176]	; (b67b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b6706:	2202      	movs	r2, #2
   b6708:	4668      	mov	r0, sp
   b670a:	f7ff f883 	bl	b5814 <_ZN5spark10JSONWriter4nameEPKcj>
   b670e:	68e1      	ldr	r1, [r4, #12]
   b6710:	f7fe fffe 	bl	b5710 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b6714:	7923      	ldrb	r3, [r4, #4]
   b6716:	0758      	lsls	r0, r3, #29
   b6718:	d514      	bpl.n	b6744 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe8>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b671a:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b671c:	4633      	mov	r3, r6
   b671e:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b6720:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6724:	b12a      	cbz	r2, b6732 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd6>
        if (*s == ' ') {
   b6726:	2a20      	cmp	r2, #32
   b6728:	d101      	bne.n	b672e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd2>
            s1 = s + 1; // Skip return type
   b672a:	461e      	mov	r6, r3
   b672c:	e7f7      	b.n	b671e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        } else if (*s == '(') {
   b672e:	2a28      	cmp	r2, #40	; 0x28
   b6730:	d1f5      	bne.n	b671e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        json.name("fn", 2).value(s, n);
   b6732:	4922      	ldr	r1, [pc, #136]	; (b67bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b6734:	2202      	movs	r2, #2
   b6736:	4668      	mov	r0, sp
   b6738:	f7ff f86c 	bl	b5814 <_ZN5spark10JSONWriter4nameEPKcj>
   b673c:	1bba      	subs	r2, r7, r6
   b673e:	4631      	mov	r1, r6
   b6740:	f7ff f878 	bl	b5834 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b6744:	7923      	ldrb	r3, [r4, #4]
   b6746:	0719      	lsls	r1, r3, #28
   b6748:	d507      	bpl.n	b675a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfe>
        json.name("t", 1).value((unsigned)attr.time);
   b674a:	491d      	ldr	r1, [pc, #116]	; (b67c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b674c:	2201      	movs	r2, #1
   b674e:	4668      	mov	r0, sp
   b6750:	f7ff f860 	bl	b5814 <_ZN5spark10JSONWriter4nameEPKcj>
   b6754:	6961      	ldr	r1, [r4, #20]
   b6756:	f7fe ffed 	bl	b5734 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b675a:	7923      	ldrb	r3, [r4, #4]
   b675c:	06da      	lsls	r2, r3, #27
   b675e:	d507      	bpl.n	b6770 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b6760:	4918      	ldr	r1, [pc, #96]	; (b67c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b6762:	2204      	movs	r2, #4
   b6764:	4668      	mov	r0, sp
   b6766:	f7ff f855 	bl	b5814 <_ZN5spark10JSONWriter4nameEPKcj>
   b676a:	69a1      	ldr	r1, [r4, #24]
   b676c:	f7fe ffd0 	bl	b5710 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b6770:	7923      	ldrb	r3, [r4, #4]
   b6772:	069b      	lsls	r3, r3, #26
   b6774:	d507      	bpl.n	b6786 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b6776:	4914      	ldr	r1, [pc, #80]	; (b67c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b6778:	2206      	movs	r2, #6
   b677a:	4668      	mov	r0, sp
   b677c:	f7ff f84a 	bl	b5814 <_ZN5spark10JSONWriter4nameEPKcj>
   b6780:	69e1      	ldr	r1, [r4, #28]
   b6782:	f7ff f910 	bl	b59a6 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b6786:	4668      	mov	r0, sp
   b6788:	f7fe ff9f 	bl	b56ca <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b678c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b678e:	490f      	ldr	r1, [pc, #60]	; (b67cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b6790:	6803      	ldr	r3, [r0, #0]
   b6792:	2202      	movs	r2, #2
   b6794:	68db      	ldr	r3, [r3, #12]
   b6796:	4798      	blx	r3
}
   b6798:	b005      	add	sp, #20
   b679a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b679e:	bf00      	nop
   b67a0:	2003e6d4 	.word	0x2003e6d4
   b67a4:	000b7f38 	.word	0x000b7f38
   b67a8:	000b7eca 	.word	0x000b7eca
   b67ac:	000b7f18 	.word	0x000b7f18
   b67b0:	000b82a7 	.word	0x000b82a7
   b67b4:	000b7f1a 	.word	0x000b7f1a
   b67b8:	000b7f1c 	.word	0x000b7f1c
   b67bc:	000b7f1f 	.word	0x000b7f1f
   b67c0:	000b7deb 	.word	0x000b7deb
   b67c4:	000b7f22 	.word	0x000b7f22
   b67c8:	000b7f27 	.word	0x000b7f27
   b67cc:	000b7d5a 	.word	0x000b7d5a

000b67d0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b67d0:	2300      	movs	r3, #0
   b67d2:	6840      	ldr	r0, [r0, #4]
   b67d4:	461a      	mov	r2, r3
   b67d6:	f7fe b953 	b.w	b4a80 <network_connect>

000b67da <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b67da:	6840      	ldr	r0, [r0, #4]
   b67dc:	2200      	movs	r2, #0
   b67de:	2102      	movs	r1, #2
   b67e0:	f7fe b95e 	b.w	b4aa0 <network_disconnect>

000b67e4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b67e4:	2200      	movs	r2, #0
   b67e6:	6840      	ldr	r0, [r0, #4]
   b67e8:	4611      	mov	r1, r2
   b67ea:	f7fe b951 	b.w	b4a90 <network_connecting>

000b67ee <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b67ee:	2200      	movs	r2, #0
   b67f0:	6840      	ldr	r0, [r0, #4]
   b67f2:	4611      	mov	r1, r2
   b67f4:	f7fe b95c 	b.w	b4ab0 <network_ready>

000b67f8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b67f8:	2300      	movs	r3, #0
   b67fa:	6840      	ldr	r0, [r0, #4]
   b67fc:	461a      	mov	r2, r3
   b67fe:	4619      	mov	r1, r3
   b6800:	f7fe b95e 	b.w	b4ac0 <network_on>

000b6804 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6804:	2300      	movs	r3, #0
   b6806:	6840      	ldr	r0, [r0, #4]
   b6808:	461a      	mov	r2, r3
   b680a:	4619      	mov	r1, r3
   b680c:	f7fe b960 	b.w	b4ad0 <network_off>

000b6810 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6810:	6840      	ldr	r0, [r0, #4]
   b6812:	2100      	movs	r1, #0
   b6814:	f7fe b984 	b.w	b4b20 <network_is_on>

000b6818 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6818:	6840      	ldr	r0, [r0, #4]
   b681a:	2100      	movs	r1, #0
   b681c:	f7fe b988 	b.w	b4b30 <network_is_off>

000b6820 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6820:	6840      	ldr	r0, [r0, #4]
   b6822:	2200      	movs	r2, #0
   b6824:	f081 0101 	eor.w	r1, r1, #1
   b6828:	f7fe b95a 	b.w	b4ae0 <network_listen>

000b682c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b682c:	6840      	ldr	r0, [r0, #4]
   b682e:	2200      	movs	r2, #0
   b6830:	f7fe b966 	b.w	b4b00 <network_set_listen_timeout>

000b6834 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6834:	2200      	movs	r2, #0
   b6836:	6840      	ldr	r0, [r0, #4]
   b6838:	4611      	mov	r1, r2
   b683a:	f7fe b969 	b.w	b4b10 <network_get_listen_timeout>

000b683e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b683e:	2200      	movs	r2, #0
   b6840:	6840      	ldr	r0, [r0, #4]
   b6842:	4611      	mov	r1, r2
   b6844:	f7fe b954 	b.w	b4af0 <network_listening>

000b6848 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
   b6848:	6840      	ldr	r0, [r0, #4]
   b684a:	2100      	movs	r1, #0
   b684c:	f7fe b980 	b.w	b4b50 <network_is_preferred>

000b6850 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6854:	b095      	sub	sp, #84	; 0x54
   b6856:	4614      	mov	r4, r2
   b6858:	460d      	mov	r5, r1
   b685a:	4607      	mov	r7, r0
    IPAddress addr;
   b685c:	f7fe fd98 	bl	b5390 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6860:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6862:	221c      	movs	r2, #28
   b6864:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6866:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6868:	f001 f8d0 	bl	b7a0c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b686c:	2340      	movs	r3, #64	; 0x40
   b686e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6870:	4620      	mov	r0, r4
   b6872:	466b      	mov	r3, sp
   b6874:	aa0c      	add	r2, sp, #48	; 0x30
   b6876:	2100      	movs	r1, #0
   b6878:	f7fd ffbe 	bl	b47f8 <netdb_getaddrinfo>
    if (!r) {
   b687c:	4604      	mov	r4, r0
   b687e:	2800      	cmp	r0, #0
   b6880:	d14b      	bne.n	b691a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6882:	4602      	mov	r2, r0
   b6884:	2101      	movs	r1, #1
   b6886:	6868      	ldr	r0, [r5, #4]
   b6888:	f7fe f912 	bl	b4ab0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b688c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b688e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6890:	4622      	mov	r2, r4
   b6892:	6868      	ldr	r0, [r5, #4]
   b6894:	f7fe f90c 	bl	b4ab0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6898:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b689a:	4681      	mov	r9, r0
        bool ok = false;
   b689c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b689e:	2e00      	cmp	r6, #0
   b68a0:	d03b      	beq.n	b691a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b68a2:	2900      	cmp	r1, #0
   b68a4:	d139      	bne.n	b691a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b68a6:	6873      	ldr	r3, [r6, #4]
   b68a8:	2b02      	cmp	r3, #2
   b68aa:	d003      	beq.n	b68b4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b68ac:	2b0a      	cmp	r3, #10
   b68ae:	d011      	beq.n	b68d4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b68b0:	69f6      	ldr	r6, [r6, #28]
   b68b2:	e7f4      	b.n	b689e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b68b4:	f1b8 0f00 	cmp.w	r8, #0
   b68b8:	d0fa      	beq.n	b68b0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b68ba:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b68bc:	a806      	add	r0, sp, #24
   b68be:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b68c0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b68c2:	f7fe fda9 	bl	b5418 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b68c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b68c8:	1d3c      	adds	r4, r7, #4
   b68ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b68cc:	682b      	ldr	r3, [r5, #0]
   b68ce:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b68d0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b68d2:	e7ed      	b.n	b68b0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b68d4:	f1b9 0f00 	cmp.w	r9, #0
   b68d8:	d0ea      	beq.n	b68b0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b68da:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b68dc:	2210      	movs	r2, #16
   b68de:	a801      	add	r0, sp, #4
   b68e0:	f001 f894 	bl	b7a0c <memset>
                    a.v = 6;
   b68e4:	2306      	movs	r3, #6
   b68e6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b68ea:	ad01      	add	r5, sp, #4
   b68ec:	f104 0308 	add.w	r3, r4, #8
   b68f0:	3418      	adds	r4, #24
   b68f2:	6818      	ldr	r0, [r3, #0]
   b68f4:	6859      	ldr	r1, [r3, #4]
   b68f6:	462a      	mov	r2, r5
   b68f8:	c203      	stmia	r2!, {r0, r1}
   b68fa:	3308      	adds	r3, #8
   b68fc:	42a3      	cmp	r3, r4
   b68fe:	4615      	mov	r5, r2
   b6900:	d1f7      	bne.n	b68f2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6902:	a901      	add	r1, sp, #4
   b6904:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6906:	ad07      	add	r5, sp, #28
   b6908:	f7fe fd50 	bl	b53ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b690c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b690e:	1d3c      	adds	r4, r7, #4
   b6910:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6912:	682b      	ldr	r3, [r5, #0]
   b6914:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6916:	4649      	mov	r1, r9
   b6918:	e7ca      	b.n	b68b0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b691a:	9800      	ldr	r0, [sp, #0]
   b691c:	f7fd ff64 	bl	b47e8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6920:	4638      	mov	r0, r7
   b6922:	b015      	add	sp, #84	; 0x54
   b6924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6928 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
   b6928:	3803      	subs	r0, #3
   b692a:	2802      	cmp	r0, #2
   b692c:	bf9a      	itte	ls
   b692e:	4b02      	ldrls	r3, [pc, #8]	; (b6938 <_ZN5spark12NetworkClass4fromEm+0x10>)
   b6930:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
   b6934:	4801      	ldrhi	r0, [pc, #4]	; (b693c <_ZN5spark12NetworkClass4fromEm+0x14>)
}
   b6936:	4770      	bx	lr
   b6938:	000b7fa8 	.word	0x000b7fa8
   b693c:	2003e6d4 	.word	0x2003e6d4

000b6940 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
   b6940:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
   b6942:	2200      	movs	r2, #0
   b6944:	6840      	ldr	r0, [r0, #4]
   b6946:	f7fe f8fb 	bl	b4b40 <network_prefer>
}
   b694a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
   b694e:	f7ff bfeb 	b.w	b6928 <_ZN5spark12NetworkClass4fromEm>
	...

000b6954 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6954:	4b02      	ldr	r3, [pc, #8]	; (b6960 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6956:	4a03      	ldr	r2, [pc, #12]	; (b6964 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6958:	601a      	str	r2, [r3, #0]
   b695a:	2200      	movs	r2, #0
   b695c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b695e:	4770      	bx	lr
   b6960:	2003e6d4 	.word	0x2003e6d4
   b6964:	000b7fbc 	.word	0x000b7fbc

000b6968 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b696a:	4606      	mov	r6, r0
   b696c:	460d      	mov	r5, r1
  size_t n = 0;
   b696e:	188f      	adds	r7, r1, r2
   b6970:	2400      	movs	r4, #0
  while (size--) {
   b6972:	42bd      	cmp	r5, r7
   b6974:	d00c      	beq.n	b6990 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6976:	6833      	ldr	r3, [r6, #0]
   b6978:	f815 1b01 	ldrb.w	r1, [r5], #1
   b697c:	689b      	ldr	r3, [r3, #8]
   b697e:	4630      	mov	r0, r6
   b6980:	4798      	blx	r3
     if (chunk>=0)
   b6982:	1e03      	subs	r3, r0, #0
   b6984:	db01      	blt.n	b698a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6986:	441c      	add	r4, r3
  while (size--) {
   b6988:	e7f3      	b.n	b6972 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b698a:	2c00      	cmp	r4, #0
   b698c:	bf08      	it	eq
   b698e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6990:	4620      	mov	r0, r4
   b6992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6994 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6994:	b513      	push	{r0, r1, r4, lr}
   b6996:	4604      	mov	r4, r0
    }
   b6998:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b699a:	b159      	cbz	r1, b69b4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b699c:	9101      	str	r1, [sp, #4]
   b699e:	f7fd fb47 	bl	b4030 <strlen>
   b69a2:	6823      	ldr	r3, [r4, #0]
   b69a4:	9901      	ldr	r1, [sp, #4]
   b69a6:	68db      	ldr	r3, [r3, #12]
   b69a8:	4602      	mov	r2, r0
   b69aa:	4620      	mov	r0, r4
    }
   b69ac:	b002      	add	sp, #8
   b69ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b69b2:	4718      	bx	r3
    }
   b69b4:	b002      	add	sp, #8
   b69b6:	bd10      	pop	{r4, pc}

000b69b8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b69b8:	b508      	push	{r3, lr}
  return write(str);
   b69ba:	f7ff ffeb 	bl	b6994 <_ZN5Print5writeEPKc>
}
   b69be:	bd08      	pop	{r3, pc}

000b69c0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b69c0:	6803      	ldr	r3, [r0, #0]
   b69c2:	689b      	ldr	r3, [r3, #8]
   b69c4:	4718      	bx	r3

000b69c6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b69c6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b69c8:	210d      	movs	r1, #13
{
   b69ca:	4605      	mov	r5, r0
  size_t n = print('\r');
   b69cc:	f7ff fff8 	bl	b69c0 <_ZN5Print5printEc>
  n += print('\n');
   b69d0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b69d2:	4604      	mov	r4, r0
  n += print('\n');
   b69d4:	4628      	mov	r0, r5
   b69d6:	f7ff fff3 	bl	b69c0 <_ZN5Print5printEc>
  return n;
}
   b69da:	4420      	add	r0, r4
   b69dc:	bd38      	pop	{r3, r4, r5, pc}

000b69de <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b69de:	b538      	push	{r3, r4, r5, lr}
   b69e0:	4605      	mov	r5, r0
  return write(str);
   b69e2:	f7ff ffd7 	bl	b6994 <_ZN5Print5writeEPKc>
   b69e6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b69e8:	4628      	mov	r0, r5
   b69ea:	f7ff ffec 	bl	b69c6 <_ZN5Print7printlnEv>
  return n;
}
   b69ee:	4420      	add	r0, r4
   b69f0:	bd38      	pop	{r3, r4, r5, pc}

000b69f2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b69f2:	b530      	push	{r4, r5, lr}
   b69f4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b69f6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b69f8:	2a01      	cmp	r2, #1
  *str = '\0';
   b69fa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b69fe:	bf98      	it	ls
   b6a00:	220a      	movls	r2, #10
   b6a02:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6a04:	460d      	mov	r5, r1
   b6a06:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6a0a:	fb01 5312 	mls	r3, r1, r2, r5
   b6a0e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6a12:	2b09      	cmp	r3, #9
   b6a14:	bf94      	ite	ls
   b6a16:	3330      	addls	r3, #48	; 0x30
   b6a18:	3337      	addhi	r3, #55	; 0x37
   b6a1a:	b2db      	uxtb	r3, r3
  } while(n);
   b6a1c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6a1e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6a22:	d9ef      	bls.n	b6a04 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6a24:	4621      	mov	r1, r4
   b6a26:	f7ff ffb5 	bl	b6994 <_ZN5Print5writeEPKc>
}
   b6a2a:	b00b      	add	sp, #44	; 0x2c
   b6a2c:	bd30      	pop	{r4, r5, pc}
	...

000b6a30 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b6a30:	4b01      	ldr	r3, [pc, #4]	; (b6a38 <_GLOBAL__sub_I_RGB+0x8>)
   b6a32:	2200      	movs	r2, #0
   b6a34:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6a36:	4770      	bx	lr
   b6a38:	2003e6dc 	.word	0x2003e6dc

000b6a3c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6a3c:	b510      	push	{r4, lr}
   b6a3e:	4604      	mov	r4, r0
   b6a40:	4608      	mov	r0, r1
{
    _spi = spi;
   b6a42:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6a44:	f7fd ff10 	bl	b4868 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6a48:	2300      	movs	r3, #0
   b6a4a:	6063      	str	r3, [r4, #4]
}
   b6a4c:	4620      	mov	r0, r4
   b6a4e:	bd10      	pop	{r4, pc}

000b6a50 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b6a50:	b510      	push	{r4, lr}
   b6a52:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6a54:	f7fd fe58 	bl	b4708 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b6a58:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b6a5a:	6823      	ldr	r3, [r4, #0]
   b6a5c:	4620      	mov	r0, r4
   b6a5e:	695b      	ldr	r3, [r3, #20]
   b6a60:	4798      	blx	r3
    if (c >= 0) return c;
   b6a62:	2800      	cmp	r0, #0
   b6a64:	da08      	bge.n	b6a78 <_ZN6Stream9timedReadEv+0x28>
   b6a66:	f7fd fe4f 	bl	b4708 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b6a6a:	68e3      	ldr	r3, [r4, #12]
   b6a6c:	1ac0      	subs	r0, r0, r3
   b6a6e:	68a3      	ldr	r3, [r4, #8]
   b6a70:	4298      	cmp	r0, r3
   b6a72:	d3f2      	bcc.n	b6a5a <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b6a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b6a78:	bd10      	pop	{r4, pc}

000b6a7a <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b6a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6a7e:	4607      	mov	r7, r0
   b6a80:	460c      	mov	r4, r1
   b6a82:	188e      	adds	r6, r1, r2
   b6a84:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b6a86:	42b5      	cmp	r5, r6
   b6a88:	eba5 0804 	sub.w	r8, r5, r4
   b6a8c:	d007      	beq.n	b6a9e <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b6a8e:	4638      	mov	r0, r7
   b6a90:	f7ff ffde 	bl	b6a50 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b6a94:	1e03      	subs	r3, r0, #0
   b6a96:	db02      	blt.n	b6a9e <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b6a98:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b6a9c:	e7f3      	b.n	b6a86 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b6a9e:	4640      	mov	r0, r8
   b6aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6aa4 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   b6aa4:	b510      	push	{r4, lr}
   b6aa6:	4604      	mov	r4, r0
{
    free(buffer);
   b6aa8:	6800      	ldr	r0, [r0, #0]
   b6aaa:	f7fe f861 	bl	b4b70 <free>
}
   b6aae:	4620      	mov	r0, r4
   b6ab0:	bd10      	pop	{r4, pc}

000b6ab2 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   b6ab2:	b510      	push	{r4, lr}
   b6ab4:	4604      	mov	r4, r0
    if (buffer) {
   b6ab6:	6800      	ldr	r0, [r0, #0]
   b6ab8:	b108      	cbz	r0, b6abe <_ZN6String10invalidateEv+0xc>
        free(buffer);
   b6aba:	f7fe f859 	bl	b4b70 <free>
    }
    buffer = nullptr;
   b6abe:	2300      	movs	r3, #0
    capacity_ = len = 0;
   b6ac0:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   b6ac4:	6023      	str	r3, [r4, #0]
}
   b6ac6:	bd10      	pop	{r4, pc}

000b6ac8 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6ac8:	b538      	push	{r3, r4, r5, lr}
   b6aca:	4604      	mov	r4, r0
   b6acc:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6ace:	6800      	ldr	r0, [r0, #0]
   b6ad0:	3101      	adds	r1, #1
   b6ad2:	f7fe f855 	bl	b4b80 <realloc>
    if (newbuffer) {
   b6ad6:	b110      	cbz	r0, b6ade <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
   b6ad8:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   b6adc:	2001      	movs	r0, #1
    }
    return 0;
}
   b6ade:	bd38      	pop	{r3, r4, r5, pc}

000b6ae0 <_ZN6String7reserveEj>:
{
   b6ae0:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
   b6ae2:	6803      	ldr	r3, [r0, #0]
{
   b6ae4:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
   b6ae6:	b123      	cbz	r3, b6af2 <_ZN6String7reserveEj+0x12>
   b6ae8:	6843      	ldr	r3, [r0, #4]
   b6aea:	428b      	cmp	r3, r1
   b6aec:	d301      	bcc.n	b6af2 <_ZN6String7reserveEj+0x12>
   b6aee:	2001      	movs	r0, #1
}
   b6af0:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   b6af2:	4620      	mov	r0, r4
   b6af4:	f7ff ffe8 	bl	b6ac8 <_ZN6String12changeBufferEj>
   b6af8:	2800      	cmp	r0, #0
   b6afa:	d0f9      	beq.n	b6af0 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   b6afc:	68a3      	ldr	r3, [r4, #8]
   b6afe:	2b00      	cmp	r3, #0
   b6b00:	d1f5      	bne.n	b6aee <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   b6b02:	6822      	ldr	r2, [r4, #0]
   b6b04:	7013      	strb	r3, [r2, #0]
   b6b06:	e7f2      	b.n	b6aee <_ZN6String7reserveEj+0xe>

000b6b08 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6b0a:	460d      	mov	r5, r1
    if (!reserve(length)) {
   b6b0c:	4611      	mov	r1, r2
   b6b0e:	9201      	str	r2, [sp, #4]
{
   b6b10:	4604      	mov	r4, r0
    if (!reserve(length)) {
   b6b12:	f7ff ffe5 	bl	b6ae0 <_ZN6String7reserveEj>
   b6b16:	9a01      	ldr	r2, [sp, #4]
   b6b18:	b928      	cbnz	r0, b6b26 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   b6b1a:	4620      	mov	r0, r4
   b6b1c:	f7ff ffc9 	bl	b6ab2 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   b6b20:	4620      	mov	r0, r4
   b6b22:	b003      	add	sp, #12
   b6b24:	bd30      	pop	{r4, r5, pc}
    len = length;
   b6b26:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   b6b28:	4629      	mov	r1, r5
   b6b2a:	6820      	ldr	r0, [r4, #0]
   b6b2c:	f000 ff46 	bl	b79bc <memcpy>
    buffer[len] = 0;
   b6b30:	6822      	ldr	r2, [r4, #0]
   b6b32:	68a3      	ldr	r3, [r4, #8]
   b6b34:	2100      	movs	r1, #0
   b6b36:	54d1      	strb	r1, [r2, r3]
    return *this;
   b6b38:	e7f2      	b.n	b6b20 <_ZN6String4copyEPKcj+0x18>

000b6b3a <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
   b6b3a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6b3c:	b513      	push	{r0, r1, r4, lr}
    capacity_ = 0;
   b6b3e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6b42:	4604      	mov	r4, r0
    len = 0;
   b6b44:	6083      	str	r3, [r0, #8]
    flags = 0;
   b6b46:	7303      	strb	r3, [r0, #12]
    if (cstr) {
   b6b48:	b141      	cbz	r1, b6b5c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
   b6b4a:	4608      	mov	r0, r1
   b6b4c:	9101      	str	r1, [sp, #4]
   b6b4e:	f7fd fa6f 	bl	b4030 <strlen>
   b6b52:	9901      	ldr	r1, [sp, #4]
   b6b54:	4602      	mov	r2, r0
   b6b56:	4620      	mov	r0, r4
   b6b58:	f7ff ffd6 	bl	b6b08 <_ZN6String4copyEPKcj>
}
   b6b5c:	4620      	mov	r0, r4
   b6b5e:	b002      	add	sp, #8
   b6b60:	bd10      	pop	{r4, pc}

000b6b62 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b6b62:	b538      	push	{r3, r4, r5, lr}
   b6b64:	4605      	mov	r5, r0
    if (buffer) {
   b6b66:	6800      	ldr	r0, [r0, #0]
{
   b6b68:	460c      	mov	r4, r1
    if (buffer) {
   b6b6a:	b170      	cbz	r0, b6b8a <_ZN6String4moveERS_+0x28>
        if (capacity_ >= rhs.len && rhs.buffer) {
   b6b6c:	686a      	ldr	r2, [r5, #4]
   b6b6e:	688b      	ldr	r3, [r1, #8]
   b6b70:	429a      	cmp	r2, r3
   b6b72:	d308      	bcc.n	b6b86 <_ZN6String4moveERS_+0x24>
   b6b74:	6809      	ldr	r1, [r1, #0]
   b6b76:	b131      	cbz	r1, b6b86 <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
   b6b78:	f000 ff95 	bl	b7aa6 <strcpy>
            len = rhs.len;
   b6b7c:	68a3      	ldr	r3, [r4, #8]
   b6b7e:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
   b6b80:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity_ = rhs.capacity_;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity_ = 0;
    rhs.len = 0;
   b6b82:	60a3      	str	r3, [r4, #8]
}
   b6b84:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
   b6b86:	f7fd fff3 	bl	b4b70 <free>
    buffer = rhs.buffer;
   b6b8a:	6823      	ldr	r3, [r4, #0]
   b6b8c:	602b      	str	r3, [r5, #0]
    capacity_ = rhs.capacity_;
   b6b8e:	6863      	ldr	r3, [r4, #4]
   b6b90:	606b      	str	r3, [r5, #4]
    len = rhs.len;
   b6b92:	68a3      	ldr	r3, [r4, #8]
   b6b94:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
   b6b96:	2300      	movs	r3, #0
    rhs.capacity_ = 0;
   b6b98:	e9c4 3300 	strd	r3, r3, [r4]
   b6b9c:	e7f1      	b.n	b6b82 <_ZN6String4moveERS_+0x20>

000b6b9e <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b6b9e:	b510      	push	{r4, lr}
    buffer = nullptr;
   b6ba0:	2300      	movs	r3, #0
    capacity_ = 0;
   b6ba2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b6ba6:	4604      	mov	r4, r0
    len = 0;
   b6ba8:	6083      	str	r3, [r0, #8]
    flags = 0;
   b6baa:	7303      	strb	r3, [r0, #12]
    move(rval);
   b6bac:	f7ff ffd9 	bl	b6b62 <_ZN6String4moveERS_>
}
   b6bb0:	4620      	mov	r0, r4
   b6bb2:	bd10      	pop	{r4, pc}

000b6bb4 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
   b6bb4:	4288      	cmp	r0, r1
{
   b6bb6:	b510      	push	{r4, lr}
   b6bb8:	4604      	mov	r4, r0
    if (this == &rhs) {
   b6bba:	d005      	beq.n	b6bc8 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
   b6bbc:	680b      	ldr	r3, [r1, #0]
   b6bbe:	b12b      	cbz	r3, b6bcc <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
   b6bc0:	688a      	ldr	r2, [r1, #8]
   b6bc2:	4619      	mov	r1, r3
   b6bc4:	f7ff ffa0 	bl	b6b08 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b6bc8:	4620      	mov	r0, r4
   b6bca:	bd10      	pop	{r4, pc}
        invalidate();
   b6bcc:	f7ff ff71 	bl	b6ab2 <_ZN6String10invalidateEv>
   b6bd0:	e7fa      	b.n	b6bc8 <_ZN6StringaSERKS_+0x14>

000b6bd2 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b6bd2:	b510      	push	{r4, lr}
    buffer = nullptr;
   b6bd4:	2300      	movs	r3, #0
String::String(const String &value)
   b6bd6:	4604      	mov	r4, r0
    capacity_ = 0;
   b6bd8:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
   b6bdc:	6083      	str	r3, [r0, #8]
    flags = 0;
   b6bde:	7303      	strb	r3, [r0, #12]
    *this = value;
   b6be0:	f7ff ffe8 	bl	b6bb4 <_ZN6StringaSERKS_>
}
   b6be4:	4620      	mov	r0, r4
   b6be6:	bd10      	pop	{r4, pc}

000b6be8 <_ZN6StringaSEPKc>:
    return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6be8:	b513      	push	{r0, r1, r4, lr}
   b6bea:	4604      	mov	r4, r0
    if (cstr) {
   b6bec:	b159      	cbz	r1, b6c06 <_ZN6StringaSEPKc+0x1e>
        copy(cstr, strlen(cstr));
   b6bee:	4608      	mov	r0, r1
   b6bf0:	9101      	str	r1, [sp, #4]
   b6bf2:	f7fd fa1d 	bl	b4030 <strlen>
   b6bf6:	9901      	ldr	r1, [sp, #4]
   b6bf8:	4602      	mov	r2, r0
   b6bfa:	4620      	mov	r0, r4
   b6bfc:	f7ff ff84 	bl	b6b08 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b6c00:	4620      	mov	r0, r4
   b6c02:	b002      	add	sp, #8
   b6c04:	bd10      	pop	{r4, pc}
        invalidate();
   b6c06:	f7ff ff54 	bl	b6ab2 <_ZN6String10invalidateEv>
   b6c0a:	e7f9      	b.n	b6c00 <_ZN6StringaSEPKc+0x18>

000b6c0c <_ZNK6String6equalsEPKc>:
{
    return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b6c0c:	b508      	push	{r3, lr}
    if (len == 0) {
   b6c0e:	6882      	ldr	r2, [r0, #8]
   b6c10:	b93a      	cbnz	r2, b6c22 <_ZNK6String6equalsEPKc+0x16>
        return (cstr == nullptr || *cstr == 0);
   b6c12:	b121      	cbz	r1, b6c1e <_ZNK6String6equalsEPKc+0x12>
   b6c14:	7808      	ldrb	r0, [r1, #0]
    }
    if (cstr == nullptr) {
        return buffer[0] == 0;
    }
    return strcmp(buffer, cstr) == 0;
   b6c16:	fab0 f080 	clz	r0, r0
   b6c1a:	0940      	lsrs	r0, r0, #5
   b6c1c:	e000      	b.n	b6c20 <_ZNK6String6equalsEPKc+0x14>
        return (cstr == nullptr || *cstr == 0);
   b6c1e:	2001      	movs	r0, #1
}
   b6c20:	bd08      	pop	{r3, pc}
        return buffer[0] == 0;
   b6c22:	6800      	ldr	r0, [r0, #0]
    if (cstr == nullptr) {
   b6c24:	b909      	cbnz	r1, b6c2a <_ZNK6String6equalsEPKc+0x1e>
        return buffer[0] == 0;
   b6c26:	7800      	ldrb	r0, [r0, #0]
   b6c28:	e7f5      	b.n	b6c16 <_ZNK6String6equalsEPKc+0xa>
    return strcmp(buffer, cstr) == 0;
   b6c2a:	f7fd f9f7 	bl	b401c <strcmp>
   b6c2e:	e7f2      	b.n	b6c16 <_ZNK6String6equalsEPKc+0xa>

000b6c30 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6c30:	4b05      	ldr	r3, [pc, #20]	; (b6c48 <_GLOBAL__sub_I_System+0x18>)
   b6c32:	2202      	movs	r2, #2
   b6c34:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6c36:	4b05      	ldr	r3, [pc, #20]	; (b6c4c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6c38:	4a05      	ldr	r2, [pc, #20]	; (b6c50 <_GLOBAL__sub_I_System+0x20>)
   b6c3a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6c3c:	2000      	movs	r0, #0
   b6c3e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6c42:	f7fd bed1 	b.w	b49e8 <set_system_mode>
   b6c46:	bf00      	nop
   b6c48:	2003e6f8 	.word	0x2003e6f8
   b6c4c:	2003e6ec 	.word	0x2003e6ec
   b6c50:	ffff0000 	.word	0xffff0000

000b6c54 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b6c54:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6c56:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b6c58:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6c5c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   b6c5e:	2201      	movs	r2, #1
   b6c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6c64:	f10d 0107 	add.w	r1, sp, #7
   b6c68:	47a0      	blx	r4
}
   b6c6a:	b002      	add	sp, #8
   b6c6c:	bd10      	pop	{r4, pc}

000b6c6e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b6c6e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6c70:	6803      	ldr	r3, [r0, #0]
   b6c72:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   b6c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6c78:	46a4      	mov	ip, r4
}
   b6c7a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6c7e:	4760      	bx	ip

000b6c80 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6c80:	b513      	push	{r0, r1, r4, lr}
   b6c82:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b6c84:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6c86:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b6c8a:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b6c8c:	f10d 0107 	add.w	r1, sp, #7
   b6c90:	2201      	movs	r2, #1
   b6c92:	47a0      	blx	r4
}
   b6c94:	b002      	add	sp, #8
   b6c96:	bd10      	pop	{r4, pc}

000b6c98 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b6c98:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b6c9a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6c9c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6ca0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6ca4:	429a      	cmp	r2, r3
int TCPClient::read() {
   b6ca6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6ca8:	d008      	beq.n	b6cbc <_ZN9TCPClient4readEv+0x24>
   b6caa:	6963      	ldr	r3, [r4, #20]
   b6cac:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6cb0:	1c51      	adds	r1, r2, #1
   b6cb2:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b6cb6:	4413      	add	r3, r2
   b6cb8:	7918      	ldrb	r0, [r3, #4]
}
   b6cba:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6cbc:	6803      	ldr	r3, [r0, #0]
   b6cbe:	691b      	ldr	r3, [r3, #16]
   b6cc0:	4798      	blx	r3
   b6cc2:	2800      	cmp	r0, #0
   b6cc4:	d1f1      	bne.n	b6caa <_ZN9TCPClient4readEv+0x12>
   b6cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6cca:	e7f6      	b.n	b6cba <_ZN9TCPClient4readEv+0x22>

000b6ccc <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6ccc:	4770      	bx	lr

000b6cce <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b6cce:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b6cd0:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b6cd2:	43c0      	mvns	r0, r0
   b6cd4:	0fc0      	lsrs	r0, r0, #31
   b6cd6:	4770      	bx	lr

000b6cd8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6cd8:	4770      	bx	lr
	...

000b6cdc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6cdc:	4b06      	ldr	r3, [pc, #24]	; (b6cf8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6cde:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6ce0:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6ce2:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6ce6:	d005      	beq.n	b6cf4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6ce8:	4608      	mov	r0, r1
   b6cea:	f000 fd43 	bl	b7774 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6cee:	2800      	cmp	r0, #0
   b6cf0:	bf08      	it	eq
   b6cf2:	2400      	moveq	r4, #0
      }
   b6cf4:	4620      	mov	r0, r4
   b6cf6:	bd10      	pop	{r4, pc}
   b6cf8:	000b7df4 	.word	0x000b7df4

000b6cfc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6cfc:	b510      	push	{r4, lr}
   b6cfe:	21ac      	movs	r1, #172	; 0xac
   b6d00:	4604      	mov	r4, r0
   b6d02:	f7fd f9dc 	bl	b40be <_ZdlPvj>
   b6d06:	4620      	mov	r0, r4
   b6d08:	bd10      	pop	{r4, pc}

000b6d0a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6d0a:	21ac      	movs	r1, #172	; 0xac
   b6d0c:	f7fd b9d7 	b.w	b40be <_ZdlPvj>

000b6d10 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b6d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6d14:	f04f 0800 	mov.w	r8, #0
   b6d18:	b086      	sub	sp, #24
   b6d1a:	461c      	mov	r4, r3
   b6d1c:	f8c0 8004 	str.w	r8, [r0, #4]
   b6d20:	4605      	mov	r5, r0
   b6d22:	460e      	mov	r6, r1
   b6d24:	4617      	mov	r7, r2
    struct timeval tv = {};
   b6d26:	4641      	mov	r1, r8
   b6d28:	2210      	movs	r2, #16
   b6d2a:	a802      	add	r0, sp, #8
   b6d2c:	f000 fe6e 	bl	b7a0c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b6d30:	1c63      	adds	r3, r4, #1
   b6d32:	d009      	beq.n	b6d48 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6d34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6d38:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6d3c:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6d40:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6d44:	435c      	muls	r4, r3
   b6d46:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6d48:	6968      	ldr	r0, [r5, #20]
   b6d4a:	2310      	movs	r3, #16
   b6d4c:	9300      	str	r3, [sp, #0]
   b6d4e:	6800      	ldr	r0, [r0, #0]
   b6d50:	ab02      	add	r3, sp, #8
   b6d52:	f241 0205 	movw	r2, #4101	; 0x1005
   b6d56:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6d5a:	f7fd fd55 	bl	b4808 <sock_setsockopt>
    if (ret < 0) {
   b6d5e:	2800      	cmp	r0, #0
   b6d60:	da07      	bge.n	b6d72 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b6d62:	f7fd ff2d 	bl	b4bc0 <__errno>
   b6d66:	6803      	ldr	r3, [r0, #0]
   b6d68:	606b      	str	r3, [r5, #4]
        return 0;
   b6d6a:	2000      	movs	r0, #0
}
   b6d6c:	b006      	add	sp, #24
   b6d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b6d72:	6968      	ldr	r0, [r5, #20]
   b6d74:	2300      	movs	r3, #0
   b6d76:	6800      	ldr	r0, [r0, #0]
   b6d78:	463a      	mov	r2, r7
   b6d7a:	4631      	mov	r1, r6
   b6d7c:	f7fd fd64 	bl	b4848 <sock_send>
    if (ret < 0) {
   b6d80:	1e03      	subs	r3, r0, #0
   b6d82:	dbee      	blt.n	b6d62 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b6d84:	4618      	mov	r0, r3
   b6d86:	e7f1      	b.n	b6d6c <_ZN9TCPClient5writeEPKhjm+0x5c>

000b6d88 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b6d88:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b6d8a:	6984      	ldr	r4, [r0, #24]
   b6d8c:	4b0a      	ldr	r3, [pc, #40]	; (b6db8 <_ZN9TCPClientD1Ev+0x30>)
   b6d8e:	6003      	str	r3, [r0, #0]
   b6d90:	4605      	mov	r5, r0
   b6d92:	b17c      	cbz	r4, b6db4 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b6d94:	6863      	ldr	r3, [r4, #4]
   b6d96:	3b01      	subs	r3, #1
   b6d98:	6063      	str	r3, [r4, #4]
   b6d9a:	b95b      	cbnz	r3, b6db4 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b6d9c:	6823      	ldr	r3, [r4, #0]
   b6d9e:	4620      	mov	r0, r4
   b6da0:	689b      	ldr	r3, [r3, #8]
   b6da2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6da4:	68a3      	ldr	r3, [r4, #8]
   b6da6:	3b01      	subs	r3, #1
   b6da8:	60a3      	str	r3, [r4, #8]
   b6daa:	b91b      	cbnz	r3, b6db4 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b6dac:	6823      	ldr	r3, [r4, #0]
   b6dae:	4620      	mov	r0, r4
   b6db0:	68db      	ldr	r3, [r3, #12]
   b6db2:	4798      	blx	r3
   b6db4:	4628      	mov	r0, r5
   b6db6:	bd38      	pop	{r3, r4, r5, pc}
   b6db8:	000b8034 	.word	0x000b8034

000b6dbc <_ZN9TCPClientD0Ev>:
   b6dbc:	b510      	push	{r4, lr}
   b6dbe:	4604      	mov	r4, r0
   b6dc0:	f7ff ffe2 	bl	b6d88 <_ZN9TCPClientD1Ev>
   b6dc4:	4620      	mov	r0, r4
   b6dc6:	211c      	movs	r1, #28
   b6dc8:	f7fd f979 	bl	b40be <_ZdlPvj>
   b6dcc:	4620      	mov	r0, r4
   b6dce:	bd10      	pop	{r4, pc}

000b6dd0 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b6dd0:	b530      	push	{r4, r5, lr}
   b6dd2:	b087      	sub	sp, #28
   b6dd4:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b6dd6:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b6dd8:	4668      	mov	r0, sp
   b6dda:	f7fe fb1d 	bl	b5418 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6dde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6de0:	3404      	adds	r4, #4
   b6de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6de4:	682b      	ldr	r3, [r5, #0]
   b6de6:	7023      	strb	r3, [r4, #0]
    }
   b6de8:	b007      	add	sp, #28
   b6dea:	bd30      	pop	{r4, r5, pc}

000b6dec <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b6dec:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b6dee:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b6df0:	4b05      	ldr	r3, [pc, #20]	; (b6e08 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b6df2:	4604      	mov	r4, r0
   b6df4:	358c      	adds	r5, #140	; 0x8c
   b6df6:	f844 3b04 	str.w	r3, [r4], #4
   b6dfa:	4606      	mov	r6, r0
   b6dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6e00:	682b      	ldr	r3, [r5, #0]
   b6e02:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b6e04:	4630      	mov	r0, r6
   b6e06:	bd70      	pop	{r4, r5, r6, pc}
   b6e08:	000b7e90 	.word	0x000b7e90

000b6e0c <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6e10:	4698      	mov	r8, r3
    stop();
   b6e12:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6e14:	b093      	sub	sp, #76	; 0x4c
   b6e16:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b6e18:	2400      	movs	r4, #0
    stop();
   b6e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6e1c:	4606      	mov	r6, r0
   b6e1e:	4617      	mov	r7, r2
    stop();
   b6e20:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6e22:	4628      	mov	r0, r5
   b6e24:	466b      	mov	r3, sp
   b6e26:	4622      	mov	r2, r4
   b6e28:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b6e2a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6e2c:	f7fd fce4 	bl	b47f8 <netdb_getaddrinfo>
   b6e30:	4605      	mov	r5, r0
   b6e32:	2800      	cmp	r0, #0
   b6e34:	d163      	bne.n	b6efe <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b6e36:	9b00      	ldr	r3, [sp, #0]
   b6e38:	2b00      	cmp	r3, #0
   b6e3a:	d04b      	beq.n	b6ed4 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6e3c:	695b      	ldr	r3, [r3, #20]
   b6e3e:	2b00      	cmp	r3, #0
   b6e40:	d048      	beq.n	b6ed4 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b6e42:	a806      	add	r0, sp, #24
   b6e44:	f7fe faa4 	bl	b5390 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b6e48:	9b00      	ldr	r3, [sp, #0]
   b6e4a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b6e4c:	7863      	ldrb	r3, [r4, #1]
   b6e4e:	2b02      	cmp	r3, #2
   b6e50:	d104      	bne.n	b6e5c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b6e52:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b6e54:	a806      	add	r0, sp, #24
   b6e56:	f7ff ffbb 	bl	b6dd0 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b6e5a:	e026      	b.n	b6eaa <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6e5c:	2b0a      	cmp	r3, #10
   b6e5e:	d124      	bne.n	b6eaa <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b6e60:	2211      	movs	r2, #17
   b6e62:	4629      	mov	r1, r5
   b6e64:	a801      	add	r0, sp, #4
   b6e66:	f000 fdd1 	bl	b7a0c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6e6a:	68a3      	ldr	r3, [r4, #8]
   b6e6c:	2b00      	cmp	r3, #0
   b6e6e:	d038      	beq.n	b6ee2 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6e70:	f104 0308 	add.w	r3, r4, #8
   b6e74:	f10d 0c04 	add.w	ip, sp, #4
   b6e78:	3418      	adds	r4, #24
   b6e7a:	6818      	ldr	r0, [r3, #0]
   b6e7c:	6859      	ldr	r1, [r3, #4]
   b6e7e:	4662      	mov	r2, ip
   b6e80:	c203      	stmia	r2!, {r0, r1}
   b6e82:	3308      	adds	r3, #8
   b6e84:	42a3      	cmp	r3, r4
   b6e86:	4694      	mov	ip, r2
   b6e88:	d1f7      	bne.n	b6e7a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b6e8a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6e8c:	a901      	add	r1, sp, #4
   b6e8e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b6e90:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b6e94:	f7fe fa8a 	bl	b53ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6e98:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6e9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6ea0:	ac07      	add	r4, sp, #28
   b6ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ea4:	f8dc 3000 	ldr.w	r3, [ip]
   b6ea8:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b6eaa:	a806      	add	r0, sp, #24
   b6eac:	f7fe fa90 	bl	b53d0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b6eb0:	b180      	cbz	r0, b6ed4 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b6eb2:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b6eb4:	ad07      	add	r5, sp, #28
   b6eb6:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
   b6eba:	4b12      	ldr	r3, [pc, #72]	; (b6f04 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b6ebc:	930c      	str	r3, [sp, #48]	; 0x30
   b6ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6ec0:	ac0d      	add	r4, sp, #52	; 0x34
   b6ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ec4:	682b      	ldr	r3, [r5, #0]
   b6ec6:	7023      	strb	r3, [r4, #0]
   b6ec8:	463a      	mov	r2, r7
   b6eca:	4643      	mov	r3, r8
   b6ecc:	a90c      	add	r1, sp, #48	; 0x30
   b6ece:	4630      	mov	r0, r6
   b6ed0:	47c8      	blx	r9
   b6ed2:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b6ed4:	9800      	ldr	r0, [sp, #0]
   b6ed6:	f7fd fc87 	bl	b47e8 <netdb_freeaddrinfo>
}
   b6eda:	4628      	mov	r0, r5
   b6edc:	b013      	add	sp, #76	; 0x4c
   b6ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6ee2:	68e3      	ldr	r3, [r4, #12]
   b6ee4:	2b00      	cmp	r3, #0
   b6ee6:	d1c3      	bne.n	b6e70 <_ZN9TCPClient7connectEPKctm+0x64>
   b6ee8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b6eec:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b6ef0:	f7fd fc6a 	bl	b47c8 <inet_htonl>
   b6ef4:	4581      	cmp	r9, r0
   b6ef6:	d1bb      	bne.n	b6e70 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b6ef8:	f104 0114 	add.w	r1, r4, #20
   b6efc:	e7aa      	b.n	b6e54 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6efe:	4625      	mov	r5, r4
   b6f00:	e7e8      	b.n	b6ed4 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6f02:	bf00      	nop
   b6f04:	000b7e90 	.word	0x000b7e90

000b6f08 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b6f08:	b538      	push	{r3, r4, r5, lr}
   b6f0a:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b6f0c:	681a      	ldr	r2, [r3, #0]
   b6f0e:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b6f10:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b6f12:	da10      	bge.n	b6f36 <_ZN9TCPClient9connectedEv+0x2e>
   b6f14:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6f18:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6f1c:	429a      	cmp	r2, r3
   b6f1e:	d10a      	bne.n	b6f36 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b6f20:	6803      	ldr	r3, [r0, #0]
   b6f22:	691b      	ldr	r3, [r3, #16]
   b6f24:	4798      	blx	r3
        if (!rv) {
   b6f26:	4604      	mov	r4, r0
   b6f28:	b928      	cbnz	r0, b6f36 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b6f2a:	682b      	ldr	r3, [r5, #0]
   b6f2c:	4628      	mov	r0, r5
   b6f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6f30:	4798      	blx	r3
        rv = available();
   b6f32:	4620      	mov	r0, r4
}
   b6f34:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b6f36:	2001      	movs	r0, #1
   b6f38:	e7fc      	b.n	b6f34 <_ZN9TCPClient9connectedEv+0x2c>

000b6f3a <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b6f3a:	b510      	push	{r4, lr}
   b6f3c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6f3e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6f42:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6f46:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b6f48:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6f4a:	d005      	beq.n	b6f58 <_ZN9TCPClient4peekEv+0x1e>
   b6f4c:	6963      	ldr	r3, [r4, #20]
   b6f4e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6f52:	4413      	add	r3, r2
   b6f54:	7918      	ldrb	r0, [r3, #4]
}
   b6f56:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6f58:	6803      	ldr	r3, [r0, #0]
   b6f5a:	691b      	ldr	r3, [r3, #16]
   b6f5c:	4798      	blx	r3
   b6f5e:	2800      	cmp	r0, #0
   b6f60:	d1f4      	bne.n	b6f4c <_ZN9TCPClient4peekEv+0x12>
   b6f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6f66:	e7f6      	b.n	b6f56 <_ZN9TCPClient4peekEv+0x1c>

000b6f68 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6f6a:	6943      	ldr	r3, [r0, #20]
   b6f6c:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b6f6e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6f72:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6f76:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6f78:	4605      	mov	r5, r0
   b6f7a:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b6f7c:	d016      	beq.n	b6fac <_ZN9TCPClient4readEPhj+0x44>
   b6f7e:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b6f80:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b6f84:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b6f88:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b6f8a:	42bc      	cmp	r4, r7
   b6f8c:	bf28      	it	cs
   b6f8e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b6f90:	3304      	adds	r3, #4
   b6f92:	4622      	mov	r2, r4
   b6f94:	4419      	add	r1, r3
   b6f96:	4630      	mov	r0, r6
   b6f98:	f000 fd10 	bl	b79bc <memcpy>
   b6f9c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b6f9e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b6fa2:	4423      	add	r3, r4
   b6fa4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b6fa8:	4620      	mov	r0, r4
   b6faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b6fac:	6803      	ldr	r3, [r0, #0]
   b6fae:	691b      	ldr	r3, [r3, #16]
   b6fb0:	4798      	blx	r3
   b6fb2:	2800      	cmp	r0, #0
   b6fb4:	d1e3      	bne.n	b6f7e <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b6fb6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b6fba:	e7f5      	b.n	b6fa8 <_ZN9TCPClient4readEPhj+0x40>

000b6fbc <_ZN9TCPClient12flush_bufferEv>:
   b6fbc:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b6fbe:	2300      	movs	r3, #0
   b6fc0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b6fc4:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b6fc6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b6fca:	4770      	bx	lr

000b6fcc <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6fce:	461f      	mov	r7, r3
    stop();
   b6fd0:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6fd2:	460c      	mov	r4, r1
    stop();
   b6fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6fd6:	b08b      	sub	sp, #44	; 0x2c
   b6fd8:	4605      	mov	r5, r0
   b6fda:	4616      	mov	r6, r2
    stop();
   b6fdc:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b6fde:	7d23      	ldrb	r3, [r4, #20]
   b6fe0:	2b04      	cmp	r3, #4
   b6fe2:	bf0c      	ite	eq
   b6fe4:	2002      	moveq	r0, #2
   b6fe6:	200a      	movne	r0, #10
   b6fe8:	2206      	movs	r2, #6
   b6fea:	2101      	movs	r1, #1
   b6fec:	f7fd fc34 	bl	b4858 <sock_socket>
   b6ff0:	696b      	ldr	r3, [r5, #20]
   b6ff2:	6018      	str	r0, [r3, #0]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b6ff4:	696b      	ldr	r3, [r5, #20]
   b6ff6:	681b      	ldr	r3, [r3, #0]
   b6ff8:	2b00      	cmp	r3, #0
   b6ffa:	da07      	bge.n	b700c <_ZN9TCPClient7connectE9IPAddresstm+0x40>
    NAMED_SCOPE_GUARD(done, {
   b6ffc:	682b      	ldr	r3, [r5, #0]
   b6ffe:	4628      	mov	r0, r5
   b7000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7002:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b7004:	4798      	blx	r3
}
   b7006:	4620      	mov	r0, r4
   b7008:	b00b      	add	sp, #44	; 0x2c
   b700a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    flush_buffer();
   b700c:	4628      	mov	r0, r5
   b700e:	f7ff ffd5 	bl	b6fbc <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b7012:	b1b7      	cbz	r7, b7042 <_ZN9TCPClient7connectE9IPAddresstm+0x76>
        struct ifreq ifr = {};
   b7014:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7016:	a903      	add	r1, sp, #12
   b7018:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b701a:	9303      	str	r3, [sp, #12]
   b701c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7020:	f7fd fbc2 	bl	b47a8 <if_index_to_name>
   b7024:	2800      	cmp	r0, #0
   b7026:	d1e9      	bne.n	b6ffc <_ZN9TCPClient7connectE9IPAddresstm+0x30>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7028:	6968      	ldr	r0, [r5, #20]
   b702a:	2306      	movs	r3, #6
   b702c:	9300      	str	r3, [sp, #0]
   b702e:	6800      	ldr	r0, [r0, #0]
   b7030:	ab03      	add	r3, sp, #12
   b7032:	f241 020b 	movw	r2, #4107	; 0x100b
   b7036:	f640 71ff 	movw	r1, #4095	; 0xfff
   b703a:	f7fd fbe5 	bl	b4808 <sock_setsockopt>
   b703e:	2800      	cmp	r0, #0
   b7040:	d1dc      	bne.n	b6ffc <_ZN9TCPClient7connectE9IPAddresstm+0x30>
    sockaddr_storage saddr = {};
   b7042:	221c      	movs	r2, #28
   b7044:	2100      	movs	r1, #0
   b7046:	a803      	add	r0, sp, #12
   b7048:	f000 fce0 	bl	b7a0c <memset>
    if (ip.version() == 4) {
   b704c:	7d23      	ldrb	r3, [r4, #20]
   b704e:	2b04      	cmp	r3, #4
   b7050:	d11d      	bne.n	b708e <_ZN9TCPClient7connectE9IPAddresstm+0xc2>
        s->sin_len = sizeof(saddr);
   b7052:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7056:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7058:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b705c:	f7fd fbbc 	bl	b47d8 <inet_htons>
   b7060:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7064:	6860      	ldr	r0, [r4, #4]
   b7066:	f7fd fbaf 	bl	b47c8 <inet_htonl>
   b706a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b706c:	696b      	ldr	r3, [r5, #20]
   b706e:	221c      	movs	r2, #28
   b7070:	6818      	ldr	r0, [r3, #0]
   b7072:	a903      	add	r1, sp, #12
   b7074:	f7fd fbd8 	bl	b4828 <sock_connect>
   b7078:	2800      	cmp	r0, #0
   b707a:	d1bf      	bne.n	b6ffc <_ZN9TCPClient7connectE9IPAddresstm+0x30>
   b707c:	3404      	adds	r4, #4
   b707e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7080:	696d      	ldr	r5, [r5, #20]
   b7082:	358c      	adds	r5, #140	; 0x8c
   b7084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7086:	6823      	ldr	r3, [r4, #0]
   b7088:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b708a:	2401      	movs	r4, #1
   b708c:	e7bb      	b.n	b7006 <_ZN9TCPClient7connectE9IPAddresstm+0x3a>
        s->sin6_len = sizeof(saddr);
   b708e:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b7092:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7094:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7098:	f7fd fb9e 	bl	b47d8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b709c:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b709e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b70a2:	1d23      	adds	r3, r4, #4
   b70a4:	f104 0714 	add.w	r7, r4, #20
   b70a8:	6818      	ldr	r0, [r3, #0]
   b70aa:	6859      	ldr	r1, [r3, #4]
   b70ac:	4632      	mov	r2, r6
   b70ae:	c203      	stmia	r2!, {r0, r1}
   b70b0:	3308      	adds	r3, #8
   b70b2:	42bb      	cmp	r3, r7
   b70b4:	4616      	mov	r6, r2
   b70b6:	d1f7      	bne.n	b70a8 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>
   b70b8:	e7d8      	b.n	b706c <_ZN9TCPClient7connectE9IPAddresstm+0xa0>
	...

000b70bc <_ZN9TCPClient9availableEv>:
{
   b70bc:	b530      	push	{r4, r5, lr}
   b70be:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b70c0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b70c4:	b08b      	sub	sp, #44	; 0x2c
   b70c6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b70c8:	b12b      	cbz	r3, b70d6 <_ZN9TCPClient9availableEv+0x1a>
   b70ca:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b70ce:	429a      	cmp	r2, r3
   b70d0:	d101      	bne.n	b70d6 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b70d2:	f7ff ff73 	bl	b6fbc <_ZN9TCPClient12flush_bufferEv>
   b70d6:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b70d8:	6808      	ldr	r0, [r1, #0]
   b70da:	2800      	cmp	r0, #0
   b70dc:	db18      	blt.n	b7110 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b70de:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b70e2:	2d7f      	cmp	r5, #127	; 0x7f
   b70e4:	d814      	bhi.n	b7110 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b70e6:	3104      	adds	r1, #4
   b70e8:	2308      	movs	r3, #8
   b70ea:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b70ee:	4429      	add	r1, r5
   b70f0:	f7fd fba2 	bl	b4838 <sock_recv>
            if (ret > 0) {
   b70f4:	2800      	cmp	r0, #0
   b70f6:	dd13      	ble.n	b7120 <_ZN9TCPClient9availableEv+0x64>
   b70f8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b70fa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b70fe:	b90a      	cbnz	r2, b7104 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7100:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7104:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7106:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b710a:	4410      	add	r0, r2
   b710c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7110:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7112:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7116:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b711a:	1ac0      	subs	r0, r0, r3
   b711c:	b00b      	add	sp, #44	; 0x2c
   b711e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7120:	f7fd fd4e 	bl	b4bc0 <__errno>
   b7124:	6803      	ldr	r3, [r0, #0]
   b7126:	2b0b      	cmp	r3, #11
   b7128:	d0f2      	beq.n	b7110 <_ZN9TCPClient9availableEv+0x54>
   b712a:	f7fd fd49 	bl	b4bc0 <__errno>
   b712e:	6803      	ldr	r3, [r0, #0]
   b7130:	2b0b      	cmp	r3, #11
   b7132:	d0ed      	beq.n	b7110 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7134:	2320      	movs	r3, #32
   b7136:	2500      	movs	r5, #0
   b7138:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b713c:	f7fd fd40 	bl	b4bc0 <__errno>
   b7140:	6803      	ldr	r3, [r0, #0]
   b7142:	9301      	str	r3, [sp, #4]
   b7144:	4b08      	ldr	r3, [pc, #32]	; (b7168 <_ZN9TCPClient9availableEv+0xac>)
   b7146:	4909      	ldr	r1, [pc, #36]	; (b716c <_ZN9TCPClient9availableEv+0xb0>)
   b7148:	9300      	str	r3, [sp, #0]
   b714a:	aa02      	add	r2, sp, #8
   b714c:	462b      	mov	r3, r5
   b714e:	2032      	movs	r0, #50	; 0x32
   b7150:	f7fd fc32 	bl	b49b8 <log_message>
                    sock_close(d_->sock);
   b7154:	6963      	ldr	r3, [r4, #20]
   b7156:	6818      	ldr	r0, [r3, #0]
   b7158:	f7fd fb5e 	bl	b4818 <sock_close>
   b715c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b715e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7162:	601a      	str	r2, [r3, #0]
   b7164:	e7d4      	b.n	b7110 <_ZN9TCPClient9availableEv+0x54>
   b7166:	bf00      	nop
   b7168:	000b7fff 	.word	0x000b7fff
   b716c:	000b7ff8 	.word	0x000b7ff8

000b7170 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7170:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7172:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7174:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b7176:	6818      	ldr	r0, [r3, #0]
   b7178:	2800      	cmp	r0, #0
   b717a:	db01      	blt.n	b7180 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b717c:	f7fd fb4c 	bl	b4818 <sock_close>
   b7180:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7182:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7186:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b7188:	6960      	ldr	r0, [r4, #20]
   b718a:	2211      	movs	r2, #17
   b718c:	2100      	movs	r1, #0
   b718e:	308c      	adds	r0, #140	; 0x8c
   b7190:	f000 fc3c 	bl	b7a0c <memset>
    flush_buffer();
   b7194:	4620      	mov	r0, r4
}
   b7196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b719a:	f7ff bf0f 	b.w	b6fbc <_ZN9TCPClient12flush_bufferEv>

000b719e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b719e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b71a0:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b71a2:	4604      	mov	r4, r0
          total(0) {
   b71a4:	6001      	str	r1, [r0, #0]
   b71a6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b71aa:	3088      	adds	r0, #136	; 0x88
   b71ac:	f7fe f8f0 	bl	b5390 <_ZN9IPAddressC1Ev>
}
   b71b0:	4620      	mov	r0, r4
   b71b2:	bd10      	pop	{r4, pc}

000b71b4 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b71b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b71b6:	2300      	movs	r3, #0
   b71b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b71bc:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b71c0:	4a0e      	ldr	r2, [pc, #56]	; (b71fc <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b71c2:	6103      	str	r3, [r0, #16]
   b71c4:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b71c6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b71c8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b71ca:	20ac      	movs	r0, #172	; 0xac
   b71cc:	9101      	str	r1, [sp, #4]
   b71ce:	f7fc ff72 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b71d2:	1e05      	subs	r5, r0, #0
   b71d4:	f105 060c 	add.w	r6, r5, #12
   b71d8:	d008      	beq.n	b71ec <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b71da:	2301      	movs	r3, #1
   b71dc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b71e0:	4b07      	ldr	r3, [pc, #28]	; (b7200 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b71e2:	9901      	ldr	r1, [sp, #4]
   b71e4:	602b      	str	r3, [r5, #0]
   b71e6:	4630      	mov	r0, r6
   b71e8:	f7ff ffd9 	bl	b719e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b71ec:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b71ee:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b71f2:	f7ff fee3 	bl	b6fbc <_ZN9TCPClient12flush_bufferEv>
}
   b71f6:	b002      	add	sp, #8
   b71f8:	bd70      	pop	{r4, r5, r6, pc}
   b71fa:	bf00      	nop
   b71fc:	000b8034 	.word	0x000b8034
   b7200:	000b8018 	.word	0x000b8018

000b7204 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7204:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7206:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b720a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b720c:	f7ff ffd2 	bl	b71b4 <_ZN9TCPClientC1Ei>
}
   b7210:	4620      	mov	r0, r4
   b7212:	bd10      	pop	{r4, pc}

000b7214 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7214:	b510      	push	{r4, lr}
   b7216:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7218:	6800      	ldr	r0, [r0, #0]
   b721a:	2800      	cmp	r0, #0
   b721c:	db01      	blt.n	b7222 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b721e:	f7fd fafb 	bl	b4818 <sock_close>
    }
}
   b7222:	4620      	mov	r0, r4
   b7224:	bd10      	pop	{r4, pc}

000b7226 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7226:	300c      	adds	r0, #12
   b7228:	f7ff bff4 	b.w	b7214 <_ZN9TCPClient4DataD1Ev>

000b722c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b722c:	4b02      	ldr	r3, [pc, #8]	; (b7238 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b722e:	681a      	ldr	r2, [r3, #0]
   b7230:	4b02      	ldr	r3, [pc, #8]	; (b723c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7232:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7234:	4770      	bx	lr
   b7236:	bf00      	nop
   b7238:	2003dd6c 	.word	0x2003dd6c
   b723c:	2003e6fc 	.word	0x2003e6fc

000b7240 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7240:	4770      	bx	lr

000b7242 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7242:	7441      	strb	r1, [r0, #17]
}
   b7244:	4770      	bx	lr

000b7246 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7246:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7248:	7c00      	ldrb	r0, [r0, #16]
   b724a:	f7fd fb55 	bl	b48f8 <hal_usart_available_data_for_write>
}
   b724e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7252:	bd08      	pop	{r3, pc}

000b7254 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7254:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7256:	7c00      	ldrb	r0, [r0, #16]
   b7258:	f7fd fb26 	bl	b48a8 <hal_usart_available>
}
   b725c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7260:	bd08      	pop	{r3, pc}

000b7262 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7262:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7264:	7c00      	ldrb	r0, [r0, #16]
   b7266:	f7fd fb2f 	bl	b48c8 <hal_usart_peek>
}
   b726a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b726e:	bd08      	pop	{r3, pc}

000b7270 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7270:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7272:	7c00      	ldrb	r0, [r0, #16]
   b7274:	f7fd fb20 	bl	b48b8 <hal_usart_read>
}
   b7278:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b727c:	bd08      	pop	{r3, pc}

000b727e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b727e:	7c00      	ldrb	r0, [r0, #16]
   b7280:	f7fd bb2a 	b.w	b48d8 <hal_usart_flush>

000b7284 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7284:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7286:	7c45      	ldrb	r5, [r0, #17]
{
   b7288:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b728a:	b12d      	cbz	r5, b7298 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b728c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b728e:	b003      	add	sp, #12
   b7290:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7294:	f7fd bb00 	b.w	b4898 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7298:	7c00      	ldrb	r0, [r0, #16]
   b729a:	9101      	str	r1, [sp, #4]
   b729c:	f7fd fb2c 	bl	b48f8 <hal_usart_available_data_for_write>
   b72a0:	2800      	cmp	r0, #0
   b72a2:	9901      	ldr	r1, [sp, #4]
   b72a4:	dcf2      	bgt.n	b728c <_ZN11USARTSerial5writeEh+0x8>
}
   b72a6:	4628      	mov	r0, r5
   b72a8:	b003      	add	sp, #12
   b72aa:	bd30      	pop	{r4, r5, pc}

000b72ac <_ZN11USARTSerialD0Ev>:
   b72ac:	b510      	push	{r4, lr}
   b72ae:	2114      	movs	r1, #20
   b72b0:	4604      	mov	r4, r0
   b72b2:	f7fc ff04 	bl	b40be <_ZdlPvj>
   b72b6:	4620      	mov	r0, r4
   b72b8:	bd10      	pop	{r4, pc}
	...

000b72bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b72bc:	b510      	push	{r4, lr}
   b72be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b72c2:	4604      	mov	r4, r0
   b72c4:	4608      	mov	r0, r1
   b72c6:	4611      	mov	r1, r2
   b72c8:	2200      	movs	r2, #0
   b72ca:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b72ce:	4b04      	ldr	r3, [pc, #16]	; (b72e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b72d0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b72d2:	2301      	movs	r3, #1
  _serial = serial;
   b72d4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b72d6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b72d8:	f7fd fb1e 	bl	b4918 <hal_usart_init_ex>
}
   b72dc:	4620      	mov	r0, r4
   b72de:	bd10      	pop	{r4, pc}
   b72e0:	000b80a0 	.word	0x000b80a0

000b72e4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b72e4:	7c00      	ldrb	r0, [r0, #16]
   b72e6:	2300      	movs	r3, #0
   b72e8:	f7fd bb0e 	b.w	b4908 <hal_usart_begin_config>

000b72ec <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b72ec:	2200      	movs	r2, #0
   b72ee:	f7ff bff9 	b.w	b72e4 <_ZN11USARTSerial5beginEmm>

000b72f2 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b72f2:	7c00      	ldrb	r0, [r0, #16]
   b72f4:	f7fd bac8 	b.w	b4888 <hal_usart_end>

000b72f8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b72f8:	7441      	strb	r1, [r0, #17]
}
   b72fa:	4770      	bx	lr

000b72fc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b72fc:	4770      	bx	lr

000b72fe <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b72fe:	4770      	bx	lr

000b7300 <_ZN9USBSerial4readEv>:
{
   b7300:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7302:	2100      	movs	r1, #0
   b7304:	7c00      	ldrb	r0, [r0, #16]
   b7306:	f7fd fb37 	bl	b4978 <HAL_USB_USART_Receive_Data>
}
   b730a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b730e:	bd08      	pop	{r3, pc}

000b7310 <_ZN9USBSerial4peekEv>:
{
   b7310:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7312:	2101      	movs	r1, #1
   b7314:	7c00      	ldrb	r0, [r0, #16]
   b7316:	f7fd fb2f 	bl	b4978 <HAL_USB_USART_Receive_Data>
}
   b731a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b731e:	bd08      	pop	{r3, pc}

000b7320 <_ZN9USBSerial17availableForWriteEv>:
{
   b7320:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7322:	7c00      	ldrb	r0, [r0, #16]
   b7324:	f7fd fb20 	bl	b4968 <HAL_USB_USART_Available_Data_For_Write>
}
   b7328:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b732c:	bd08      	pop	{r3, pc}

000b732e <_ZN9USBSerial9availableEv>:
{
   b732e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7330:	7c00      	ldrb	r0, [r0, #16]
   b7332:	f7fd fb11 	bl	b4958 <HAL_USB_USART_Available_Data>
}
   b7336:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b733a:	bd08      	pop	{r3, pc}

000b733c <_ZN9USBSerial5writeEh>:
{
   b733c:	b513      	push	{r0, r1, r4, lr}
   b733e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7340:	7c00      	ldrb	r0, [r0, #16]
{
   b7342:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7344:	f7fd fb10 	bl	b4968 <HAL_USB_USART_Available_Data_For_Write>
   b7348:	2800      	cmp	r0, #0
   b734a:	9901      	ldr	r1, [sp, #4]
   b734c:	dc01      	bgt.n	b7352 <_ZN9USBSerial5writeEh+0x16>
   b734e:	7c60      	ldrb	r0, [r4, #17]
   b7350:	b120      	cbz	r0, b735c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7352:	7c20      	ldrb	r0, [r4, #16]
   b7354:	f7fd fb18 	bl	b4988 <HAL_USB_USART_Send_Data>
   b7358:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b735c:	b002      	add	sp, #8
   b735e:	bd10      	pop	{r4, pc}

000b7360 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7360:	7c00      	ldrb	r0, [r0, #16]
   b7362:	f7fd bb19 	b.w	b4998 <HAL_USB_USART_Flush_Data>

000b7366 <_ZN9USBSerialD0Ev>:
   b7366:	b510      	push	{r4, lr}
   b7368:	2114      	movs	r1, #20
   b736a:	4604      	mov	r4, r0
   b736c:	f7fc fea7 	bl	b40be <_ZdlPvj>
   b7370:	4620      	mov	r0, r4
   b7372:	bd10      	pop	{r4, pc}

000b7374 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7374:	b510      	push	{r4, lr}
   b7376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b737a:	4604      	mov	r4, r0
   b737c:	4608      	mov	r0, r1
   b737e:	2100      	movs	r1, #0
   b7380:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7384:	4b04      	ldr	r3, [pc, #16]	; (b7398 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7386:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7388:	2301      	movs	r3, #1
  _serial = serial;
   b738a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b738c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b738e:	4611      	mov	r1, r2
   b7390:	f7fd faca 	bl	b4928 <HAL_USB_USART_Init>
}
   b7394:	4620      	mov	r0, r4
   b7396:	bd10      	pop	{r4, pc}
   b7398:	000b80d4 	.word	0x000b80d4

000b739c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b739c:	7c00      	ldrb	r0, [r0, #16]
   b739e:	2200      	movs	r2, #0
   b73a0:	f7fd baca 	b.w	b4938 <HAL_USB_USART_Begin>

000b73a4 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b73a4:	7c00      	ldrb	r0, [r0, #16]
   b73a6:	f7fd bacf 	b.w	b4948 <HAL_USB_USART_End>

000b73aa <_Z19acquireSerialBufferv>:
{
   b73aa:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b73ac:	2214      	movs	r2, #20
{
   b73ae:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b73b0:	2100      	movs	r1, #0
   b73b2:	f000 fb2b 	bl	b7a0c <memset>
}
   b73b6:	4620      	mov	r0, r4
   b73b8:	bd10      	pop	{r4, pc}
	...

000b73bc <_Z16_fetch_usbserialv>:
{
   b73bc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b73be:	4c0f      	ldr	r4, [pc, #60]	; (b73fc <_Z16_fetch_usbserialv+0x40>)
{
   b73c0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b73c2:	a803      	add	r0, sp, #12
   b73c4:	f7ff fff1 	bl	b73aa <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b73c8:	7821      	ldrb	r1, [r4, #0]
   b73ca:	f3bf 8f5b 	dmb	ish
   b73ce:	f011 0101 	ands.w	r1, r1, #1
   b73d2:	d10f      	bne.n	b73f4 <_Z16_fetch_usbserialv+0x38>
   b73d4:	4620      	mov	r0, r4
   b73d6:	9101      	str	r1, [sp, #4]
   b73d8:	f7fc fe80 	bl	b40dc <__cxa_guard_acquire>
   b73dc:	9901      	ldr	r1, [sp, #4]
   b73de:	b148      	cbz	r0, b73f4 <_Z16_fetch_usbserialv+0x38>
   b73e0:	aa03      	add	r2, sp, #12
   b73e2:	4807      	ldr	r0, [pc, #28]	; (b7400 <_Z16_fetch_usbserialv+0x44>)
   b73e4:	f7ff ffc6 	bl	b7374 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b73e8:	4620      	mov	r0, r4
   b73ea:	f7fc fe7c 	bl	b40e6 <__cxa_guard_release>
   b73ee:	4805      	ldr	r0, [pc, #20]	; (b7404 <_Z16_fetch_usbserialv+0x48>)
   b73f0:	f000 fad2 	bl	b7998 <atexit>
	return _usbserial;
}
   b73f4:	4802      	ldr	r0, [pc, #8]	; (b7400 <_Z16_fetch_usbserialv+0x44>)
   b73f6:	b008      	add	sp, #32
   b73f8:	bd10      	pop	{r4, pc}
   b73fa:	bf00      	nop
   b73fc:	2003e700 	.word	0x2003e700
   b7400:	2003e704 	.word	0x2003e704
   b7404:	000b72fd 	.word	0x000b72fd

000b7408 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7408:	2200      	movs	r2, #0
   b740a:	6840      	ldr	r0, [r0, #4]
   b740c:	4611      	mov	r1, r2
   b740e:	f7fd bb4f 	b.w	b4ab0 <network_ready>

000b7412 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7412:	2200      	movs	r2, #0
   b7414:	6840      	ldr	r0, [r0, #4]
   b7416:	4611      	mov	r1, r2
   b7418:	f7fd bb6a 	b.w	b4af0 <network_listening>

000b741c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b741c:	2200      	movs	r2, #0
   b741e:	6840      	ldr	r0, [r0, #4]
   b7420:	4611      	mov	r1, r2
   b7422:	f7fd bb75 	b.w	b4b10 <network_get_listen_timeout>

000b7426 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7426:	6840      	ldr	r0, [r0, #4]
   b7428:	2200      	movs	r2, #0
   b742a:	f7fd bb69 	b.w	b4b00 <network_set_listen_timeout>

000b742e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b742e:	6840      	ldr	r0, [r0, #4]
   b7430:	2200      	movs	r2, #0
   b7432:	f081 0101 	eor.w	r1, r1, #1
   b7436:	f7fd bb53 	b.w	b4ae0 <network_listen>

000b743a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b743a:	2300      	movs	r3, #0
   b743c:	6840      	ldr	r0, [r0, #4]
   b743e:	461a      	mov	r2, r3
   b7440:	4619      	mov	r1, r3
   b7442:	f7fd bb45 	b.w	b4ad0 <network_off>

000b7446 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7446:	2300      	movs	r3, #0
   b7448:	6840      	ldr	r0, [r0, #4]
   b744a:	461a      	mov	r2, r3
   b744c:	4619      	mov	r1, r3
   b744e:	f7fd bb37 	b.w	b4ac0 <network_on>

000b7452 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7452:	2200      	movs	r2, #0
   b7454:	6840      	ldr	r0, [r0, #4]
   b7456:	4611      	mov	r1, r2
   b7458:	f7fd bb1a 	b.w	b4a90 <network_connecting>

000b745c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b745c:	6840      	ldr	r0, [r0, #4]
   b745e:	2200      	movs	r2, #0
   b7460:	2102      	movs	r1, #2
   b7462:	f7fd bb1d 	b.w	b4aa0 <network_disconnect>

000b7466 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7466:	2300      	movs	r3, #0
   b7468:	6840      	ldr	r0, [r0, #4]
   b746a:	461a      	mov	r2, r3
   b746c:	f7fd bb08 	b.w	b4a80 <network_connect>

000b7470 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7470:	4b02      	ldr	r3, [pc, #8]	; (b747c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7472:	2204      	movs	r2, #4
   b7474:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7476:	4a02      	ldr	r2, [pc, #8]	; (b7480 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7478:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b747a:	4770      	bx	lr
   b747c:	2003e718 	.word	0x2003e718
   b7480:	000b8108 	.word	0x000b8108

000b7484 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7484:	4b01      	ldr	r3, [pc, #4]	; (b748c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7486:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7488:	4770      	bx	lr
   b748a:	bf00      	nop
   b748c:	2003dd70 	.word	0x2003dd70

000b7490 <serialEventRun>:
{
   b7490:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7492:	4b0b      	ldr	r3, [pc, #44]	; (b74c0 <serialEventRun+0x30>)
   b7494:	b143      	cbz	r3, b74a8 <serialEventRun+0x18>
   b7496:	f7ff ff91 	bl	b73bc <_Z16_fetch_usbserialv>
   b749a:	6803      	ldr	r3, [r0, #0]
   b749c:	691b      	ldr	r3, [r3, #16]
   b749e:	4798      	blx	r3
   b74a0:	2800      	cmp	r0, #0
   b74a2:	dd01      	ble.n	b74a8 <serialEventRun+0x18>
        serialEvent();
   b74a4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b74a8:	4b06      	ldr	r3, [pc, #24]	; (b74c4 <serialEventRun+0x34>)
   b74aa:	b143      	cbz	r3, b74be <serialEventRun+0x2e>
   b74ac:	f000 f936 	bl	b771c <_Z22__fetch_global_Serial1v>
   b74b0:	6803      	ldr	r3, [r0, #0]
   b74b2:	691b      	ldr	r3, [r3, #16]
   b74b4:	4798      	blx	r3
   b74b6:	2800      	cmp	r0, #0
   b74b8:	dd01      	ble.n	b74be <serialEventRun+0x2e>
        serialEvent1();
   b74ba:	f3af 8000 	nop.w
}
   b74be:	bd08      	pop	{r3, pc}
	...

000b74c8 <_post_loop>:
{
   b74c8:	b508      	push	{r3, lr}
	serialEventRun();
   b74ca:	f7ff ffe1 	bl	b7490 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b74ce:	f7fd f91b 	bl	b4708 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b74d2:	4b01      	ldr	r3, [pc, #4]	; (b74d8 <_post_loop+0x10>)
   b74d4:	6018      	str	r0, [r3, #0]
}
   b74d6:	bd08      	pop	{r3, pc}
   b74d8:	2003e734 	.word	0x2003e734

000b74dc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b74dc:	4805      	ldr	r0, [pc, #20]	; (b74f4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b74de:	4a06      	ldr	r2, [pc, #24]	; (b74f8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b74e0:	4906      	ldr	r1, [pc, #24]	; (b74fc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b74e2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b74e4:	1a12      	subs	r2, r2, r0
   b74e6:	f000 fa69 	bl	b79bc <memcpy>
    __backup_sram_signature = signature;
   b74ea:	4b05      	ldr	r3, [pc, #20]	; (b7500 <_Z33system_initialize_user_backup_ramv+0x24>)
   b74ec:	4a05      	ldr	r2, [pc, #20]	; (b7504 <_Z33system_initialize_user_backup_ramv+0x28>)
   b74ee:	601a      	str	r2, [r3, #0]
}
   b74f0:	bd08      	pop	{r3, pc}
   b74f2:	bf00      	nop
   b74f4:	2003f400 	.word	0x2003f400
   b74f8:	2003f404 	.word	0x2003f404
   b74fc:	000b8484 	.word	0x000b8484
   b7500:	2003f400 	.word	0x2003f400
   b7504:	9a271c1e 	.word	0x9a271c1e

000b7508 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7508:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b750a:	2300      	movs	r3, #0
   b750c:	9300      	str	r3, [sp, #0]
   b750e:	461a      	mov	r2, r3
   b7510:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7514:	f7fd fa92 	bl	b4a3c <system_ctrl_set_result>
}
   b7518:	b003      	add	sp, #12
   b751a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7520 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7520:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7522:	8843      	ldrh	r3, [r0, #2]
   b7524:	2b0a      	cmp	r3, #10
   b7526:	d008      	beq.n	b753a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7528:	2b50      	cmp	r3, #80	; 0x50
   b752a:	d10b      	bne.n	b7544 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b752c:	4b09      	ldr	r3, [pc, #36]	; (b7554 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b752e:	681b      	ldr	r3, [r3, #0]
   b7530:	b14b      	cbz	r3, b7546 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7532:	b003      	add	sp, #12
   b7534:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7538:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b753a:	f7ff ffe5 	bl	b7508 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b753e:	b003      	add	sp, #12
   b7540:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7544:	2300      	movs	r3, #0
   b7546:	9300      	str	r3, [sp, #0]
   b7548:	461a      	mov	r2, r3
   b754a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b754e:	f7fd fa75 	bl	b4a3c <system_ctrl_set_result>
}
   b7552:	e7f4      	b.n	b753e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7554:	2003e724 	.word	0x2003e724

000b7558 <module_user_init_hook>:
{
   b7558:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b755a:	4812      	ldr	r0, [pc, #72]	; (b75a4 <module_user_init_hook+0x4c>)
   b755c:	2100      	movs	r1, #0
   b755e:	f7fd fb3f 	bl	b4be0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7562:	4b11      	ldr	r3, [pc, #68]	; (b75a8 <module_user_init_hook+0x50>)
   b7564:	681a      	ldr	r2, [r3, #0]
   b7566:	4b11      	ldr	r3, [pc, #68]	; (b75ac <module_user_init_hook+0x54>)
   b7568:	429a      	cmp	r2, r3
   b756a:	4b11      	ldr	r3, [pc, #68]	; (b75b0 <module_user_init_hook+0x58>)
   b756c:	bf0c      	ite	eq
   b756e:	2201      	moveq	r2, #1
   b7570:	2200      	movne	r2, #0
   b7572:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7574:	d001      	beq.n	b757a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7576:	f7ff ffb1 	bl	b74dc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b757a:	f7fd f8b5 	bl	b46e8 <HAL_RNG_GetRandomNumber>
   b757e:	4604      	mov	r4, r0
    srand(seed);
   b7580:	f000 fa4c 	bl	b7a1c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7584:	4b0b      	ldr	r3, [pc, #44]	; (b75b4 <module_user_init_hook+0x5c>)
   b7586:	b113      	cbz	r3, b758e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7588:	4620      	mov	r0, r4
   b758a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b758e:	2100      	movs	r1, #0
   b7590:	4808      	ldr	r0, [pc, #32]	; (b75b4 <module_user_init_hook+0x5c>)
   b7592:	f7fd fa6d 	bl	b4a70 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b759a:	4807      	ldr	r0, [pc, #28]	; (b75b8 <module_user_init_hook+0x60>)
   b759c:	2100      	movs	r1, #0
   b759e:	f7fd ba43 	b.w	b4a28 <system_ctrl_set_app_request_handler>
   b75a2:	bf00      	nop
   b75a4:	000b7485 	.word	0x000b7485
   b75a8:	2003f400 	.word	0x2003f400
   b75ac:	9a271c1e 	.word	0x9a271c1e
   b75b0:	2003e720 	.word	0x2003e720
   b75b4:	00000000 	.word	0x00000000
   b75b8:	000b7521 	.word	0x000b7521

000b75bc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b75bc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b75be:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b75c0:	d902      	bls.n	b75c8 <pinAvailable+0xc>
    return false;
   b75c2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b75c4:	b002      	add	sp, #8
   b75c6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b75c8:	f1a0 030b 	sub.w	r3, r0, #11
   b75cc:	2b02      	cmp	r3, #2
   b75ce:	d81a      	bhi.n	b7606 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b75d0:	4c17      	ldr	r4, [pc, #92]	; (b7630 <pinAvailable+0x74>)
   b75d2:	7821      	ldrb	r1, [r4, #0]
   b75d4:	f3bf 8f5b 	dmb	ish
   b75d8:	f011 0101 	ands.w	r1, r1, #1
   b75dc:	d10b      	bne.n	b75f6 <pinAvailable+0x3a>
   b75de:	4620      	mov	r0, r4
   b75e0:	9101      	str	r1, [sp, #4]
   b75e2:	f7fc fd7b 	bl	b40dc <__cxa_guard_acquire>
   b75e6:	9901      	ldr	r1, [sp, #4]
   b75e8:	b128      	cbz	r0, b75f6 <pinAvailable+0x3a>
   b75ea:	4812      	ldr	r0, [pc, #72]	; (b7634 <pinAvailable+0x78>)
   b75ec:	f7ff fa26 	bl	b6a3c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b75f0:	4620      	mov	r0, r4
   b75f2:	f7fc fd78 	bl	b40e6 <__cxa_guard_release>
   b75f6:	4b0f      	ldr	r3, [pc, #60]	; (b7634 <pinAvailable+0x78>)
   b75f8:	7818      	ldrb	r0, [r3, #0]
   b75fa:	f7fd f93d 	bl	b4878 <hal_spi_is_enabled>
   b75fe:	2800      	cmp	r0, #0
   b7600:	d1df      	bne.n	b75c2 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7602:	2001      	movs	r0, #1
   b7604:	e7de      	b.n	b75c4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7606:	2801      	cmp	r0, #1
   b7608:	d809      	bhi.n	b761e <pinAvailable+0x62>
   b760a:	f000 f847 	bl	b769c <_Z19__fetch_global_Wirev>
   b760e:	2100      	movs	r1, #0
   b7610:	7c00      	ldrb	r0, [r0, #16]
   b7612:	f7fd f8b9 	bl	b4788 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7616:	f080 0001 	eor.w	r0, r0, #1
   b761a:	b2c0      	uxtb	r0, r0
   b761c:	e7d2      	b.n	b75c4 <pinAvailable+0x8>
   b761e:	3809      	subs	r0, #9
   b7620:	2801      	cmp	r0, #1
   b7622:	d8ee      	bhi.n	b7602 <pinAvailable+0x46>
   b7624:	f000 f87a 	bl	b771c <_Z22__fetch_global_Serial1v>
   b7628:	7c00      	ldrb	r0, [r0, #16]
   b762a:	f7fd f95d 	bl	b48e8 <hal_usart_is_enabled>
   b762e:	e7f2      	b.n	b7616 <pinAvailable+0x5a>
   b7630:	2003e728 	.word	0x2003e728
   b7634:	2003e72c 	.word	0x2003e72c

000b7638 <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b7638:	280d      	cmp	r0, #13
{
   b763a:	b510      	push	{r4, lr}
   b763c:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b763e:	bf9c      	itt	ls
   b7640:	340e      	addls	r4, #14
   b7642:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b7644:	4620      	mov	r0, r4
   b7646:	f7ff ffb9 	bl	b75bc <pinAvailable>
   b764a:	b150      	cbz	r0, b7662 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b764c:	2103      	movs	r1, #3
   b764e:	4620      	mov	r0, r4
   b7650:	f7fd f862 	bl	b4718 <hal_pin_validate_function>
   b7654:	2803      	cmp	r0, #3
   b7656:	d104      	bne.n	b7662 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b7658:	4620      	mov	r0, r4
}
   b765a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b765e:	f7fd b863 	b.w	b4728 <hal_adc_read>
}
   b7662:	2000      	movs	r0, #0
   b7664:	bd10      	pop	{r4, pc}

000b7666 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7666:	4770      	bx	lr

000b7668 <_Z17acquireWireBufferv>:
{
   b7668:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b766a:	4b0a      	ldr	r3, [pc, #40]	; (b7694 <_Z17acquireWireBufferv+0x2c>)
   b766c:	6003      	str	r3, [r0, #0]
   b766e:	2301      	movs	r3, #1
{
   b7670:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7672:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7674:	4908      	ldr	r1, [pc, #32]	; (b7698 <_Z17acquireWireBufferv+0x30>)
   b7676:	2020      	movs	r0, #32
   b7678:	f000 f876 	bl	b7768 <_ZnajRKSt9nothrow_t>
	};
   b767c:	2520      	movs	r5, #32
   b767e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7680:	4905      	ldr	r1, [pc, #20]	; (b7698 <_Z17acquireWireBufferv+0x30>)
	};
   b7682:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7684:	4628      	mov	r0, r5
   b7686:	f000 f86f 	bl	b7768 <_ZnajRKSt9nothrow_t>
	};
   b768a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b768e:	4620      	mov	r0, r4
   b7690:	bd38      	pop	{r3, r4, r5, pc}
   b7692:	bf00      	nop
   b7694:	00010018 	.word	0x00010018
   b7698:	000b8144 	.word	0x000b8144

000b769c <_Z19__fetch_global_Wirev>:
{
   b769c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b769e:	4d0e      	ldr	r5, [pc, #56]	; (b76d8 <_Z19__fetch_global_Wirev+0x3c>)
   b76a0:	7829      	ldrb	r1, [r5, #0]
   b76a2:	f3bf 8f5b 	dmb	ish
   b76a6:	f011 0401 	ands.w	r4, r1, #1
{
   b76aa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b76ac:	d111      	bne.n	b76d2 <_Z19__fetch_global_Wirev+0x36>
   b76ae:	4628      	mov	r0, r5
   b76b0:	f7fc fd14 	bl	b40dc <__cxa_guard_acquire>
   b76b4:	b168      	cbz	r0, b76d2 <_Z19__fetch_global_Wirev+0x36>
   b76b6:	4668      	mov	r0, sp
   b76b8:	f7ff ffd6 	bl	b7668 <_Z17acquireWireBufferv>
   b76bc:	466a      	mov	r2, sp
   b76be:	4621      	mov	r1, r4
   b76c0:	4806      	ldr	r0, [pc, #24]	; (b76dc <_Z19__fetch_global_Wirev+0x40>)
   b76c2:	f7fd fe0d 	bl	b52e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b76c6:	4628      	mov	r0, r5
   b76c8:	f7fc fd0d 	bl	b40e6 <__cxa_guard_release>
   b76cc:	4804      	ldr	r0, [pc, #16]	; (b76e0 <_Z19__fetch_global_Wirev+0x44>)
   b76ce:	f000 f963 	bl	b7998 <atexit>
	return wire;
}
   b76d2:	4802      	ldr	r0, [pc, #8]	; (b76dc <_Z19__fetch_global_Wirev+0x40>)
   b76d4:	b007      	add	sp, #28
   b76d6:	bd30      	pop	{r4, r5, pc}
   b76d8:	2003e738 	.word	0x2003e738
   b76dc:	2003e73c 	.word	0x2003e73c
   b76e0:	000b7667 	.word	0x000b7667

000b76e4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b76e4:	4770      	bx	lr
	...

000b76e8 <_Z20acquireSerial1Bufferv>:
{
   b76e8:	b538      	push	{r3, r4, r5, lr}
   b76ea:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b76ec:	2514      	movs	r5, #20
   b76ee:	462a      	mov	r2, r5
   b76f0:	2100      	movs	r1, #0
   b76f2:	f000 f98b 	bl	b7a0c <memset>
   b76f6:	8025      	strh	r5, [r4, #0]
   b76f8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b76fa:	4907      	ldr	r1, [pc, #28]	; (b7718 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b76fc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b76fe:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7700:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7702:	f000 f831 	bl	b7768 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7706:	4904      	ldr	r1, [pc, #16]	; (b7718 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7708:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b770a:	4628      	mov	r0, r5
   b770c:	f000 f82c 	bl	b7768 <_ZnajRKSt9nothrow_t>
    };
   b7710:	60e0      	str	r0, [r4, #12]
}
   b7712:	4620      	mov	r0, r4
   b7714:	bd38      	pop	{r3, r4, r5, pc}
   b7716:	bf00      	nop
   b7718:	000b8144 	.word	0x000b8144

000b771c <_Z22__fetch_global_Serial1v>:
{
   b771c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b771e:	4d0e      	ldr	r5, [pc, #56]	; (b7758 <_Z22__fetch_global_Serial1v+0x3c>)
   b7720:	7829      	ldrb	r1, [r5, #0]
   b7722:	f3bf 8f5b 	dmb	ish
   b7726:	f011 0401 	ands.w	r4, r1, #1
{
   b772a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b772c:	d111      	bne.n	b7752 <_Z22__fetch_global_Serial1v+0x36>
   b772e:	4628      	mov	r0, r5
   b7730:	f7fc fcd4 	bl	b40dc <__cxa_guard_acquire>
   b7734:	b168      	cbz	r0, b7752 <_Z22__fetch_global_Serial1v+0x36>
   b7736:	a801      	add	r0, sp, #4
   b7738:	f7ff ffd6 	bl	b76e8 <_Z20acquireSerial1Bufferv>
   b773c:	aa01      	add	r2, sp, #4
   b773e:	4621      	mov	r1, r4
   b7740:	4806      	ldr	r0, [pc, #24]	; (b775c <_Z22__fetch_global_Serial1v+0x40>)
   b7742:	f7ff fdbb 	bl	b72bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7746:	4628      	mov	r0, r5
   b7748:	f7fc fccd 	bl	b40e6 <__cxa_guard_release>
   b774c:	4804      	ldr	r0, [pc, #16]	; (b7760 <_Z22__fetch_global_Serial1v+0x44>)
   b774e:	f000 f923 	bl	b7998 <atexit>
    return serial1;
}
   b7752:	4802      	ldr	r0, [pc, #8]	; (b775c <_Z22__fetch_global_Serial1v+0x40>)
   b7754:	b007      	add	sp, #28
   b7756:	bd30      	pop	{r4, r5, pc}
   b7758:	2003e750 	.word	0x2003e750
   b775c:	2003e754 	.word	0x2003e754
   b7760:	000b76e5 	.word	0x000b76e5

000b7764 <_ZnwjRKSt9nothrow_t>:
   b7764:	f7fc bca7 	b.w	b40b6 <_Znwj>

000b7768 <_ZnajRKSt9nothrow_t>:
   b7768:	f7fc bca7 	b.w	b40ba <_Znaj>

000b776c <_ZSt25__throw_bad_function_callv>:
   b776c:	b508      	push	{r3, lr}
   b776e:	f7fd fa17 	bl	b4ba0 <abort>
	...

000b7774 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7774:	4901      	ldr	r1, [pc, #4]	; (b777c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7776:	f000 b8f9 	b.w	b796c <_ZNKSt9type_infoeqERKS_>
   b777a:	bf00      	nop
   b777c:	000b8160 	.word	0x000b8160

000b7780 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7780:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7782:	2400      	movs	r4, #0
   b7784:	2310      	movs	r3, #16
   b7786:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b778a:	6803      	ldr	r3, [r0, #0]
   b778c:	4615      	mov	r5, r2
   b778e:	699e      	ldr	r6, [r3, #24]
   b7790:	6812      	ldr	r2, [r2, #0]
   b7792:	466b      	mov	r3, sp
   b7794:	e9cd 4400 	strd	r4, r4, [sp]
   b7798:	47b0      	blx	r6
   b779a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b779e:	f003 0306 	and.w	r3, r3, #6
   b77a2:	2b06      	cmp	r3, #6
   b77a4:	bf03      	ittte	eq
   b77a6:	9b00      	ldreq	r3, [sp, #0]
   b77a8:	602b      	streq	r3, [r5, #0]
   b77aa:	2001      	moveq	r0, #1
   b77ac:	4620      	movne	r0, r4
   b77ae:	b004      	add	sp, #16
   b77b0:	bd70      	pop	{r4, r5, r6, pc}

000b77b2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b77b2:	9800      	ldr	r0, [sp, #0]
   b77b4:	4290      	cmp	r0, r2
   b77b6:	bf14      	ite	ne
   b77b8:	2001      	movne	r0, #1
   b77ba:	2006      	moveq	r0, #6
   b77bc:	4770      	bx	lr
	...

000b77c0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b77c0:	b510      	push	{r4, lr}
   b77c2:	4b03      	ldr	r3, [pc, #12]	; (b77d0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b77c4:	6003      	str	r3, [r0, #0]
   b77c6:	4604      	mov	r4, r0
   b77c8:	f000 f8cd 	bl	b7966 <_ZNSt9type_infoD1Ev>
   b77cc:	4620      	mov	r0, r4
   b77ce:	bd10      	pop	{r4, pc}
   b77d0:	000b81a0 	.word	0x000b81a0

000b77d4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b77d4:	b510      	push	{r4, lr}
   b77d6:	4604      	mov	r4, r0
   b77d8:	f7ff fff2 	bl	b77c0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b77dc:	4620      	mov	r0, r4
   b77de:	2108      	movs	r1, #8
   b77e0:	f7fc fc6d 	bl	b40be <_ZdlPvj>
   b77e4:	4620      	mov	r0, r4
   b77e6:	bd10      	pop	{r4, pc}

000b77e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b77e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b77ec:	461f      	mov	r7, r3
   b77ee:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b77f2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b77f6:	4598      	cmp	r8, r3
   b77f8:	4606      	mov	r6, r0
   b77fa:	4615      	mov	r5, r2
   b77fc:	d107      	bne.n	b780e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b77fe:	9907      	ldr	r1, [sp, #28]
   b7800:	f000 f8b4 	bl	b796c <_ZNKSt9type_infoeqERKS_>
   b7804:	b118      	cbz	r0, b780e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7806:	7165      	strb	r5, [r4, #5]
   b7808:	2000      	movs	r0, #0
   b780a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b780e:	4639      	mov	r1, r7
   b7810:	4630      	mov	r0, r6
   b7812:	f000 f8ab 	bl	b796c <_ZNKSt9type_infoeqERKS_>
   b7816:	2800      	cmp	r0, #0
   b7818:	d0f6      	beq.n	b7808 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b781a:	2301      	movs	r3, #1
   b781c:	f8c4 8000 	str.w	r8, [r4]
   b7820:	7125      	strb	r5, [r4, #4]
   b7822:	71a3      	strb	r3, [r4, #6]
   b7824:	e7f0      	b.n	b7808 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b7826 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b7826:	b538      	push	{r3, r4, r5, lr}
   b7828:	4615      	mov	r5, r2
   b782a:	461c      	mov	r4, r3
   b782c:	f000 f89e 	bl	b796c <_ZNKSt9type_infoeqERKS_>
   b7830:	b120      	cbz	r0, b783c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7832:	2308      	movs	r3, #8
   b7834:	60e3      	str	r3, [r4, #12]
   b7836:	2306      	movs	r3, #6
   b7838:	6025      	str	r5, [r4, #0]
   b783a:	7123      	strb	r3, [r4, #4]
   b783c:	bd38      	pop	{r3, r4, r5, pc}

000b783e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b783e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7840:	4605      	mov	r5, r0
   b7842:	460c      	mov	r4, r1
   b7844:	9201      	str	r2, [sp, #4]
   b7846:	461e      	mov	r6, r3
   b7848:	f000 f890 	bl	b796c <_ZNKSt9type_infoeqERKS_>
   b784c:	b950      	cbnz	r0, b7864 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b784e:	2e03      	cmp	r6, #3
   b7850:	d808      	bhi.n	b7864 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7852:	6823      	ldr	r3, [r4, #0]
   b7854:	9a01      	ldr	r2, [sp, #4]
   b7856:	695b      	ldr	r3, [r3, #20]
   b7858:	4629      	mov	r1, r5
   b785a:	4620      	mov	r0, r4
   b785c:	b002      	add	sp, #8
   b785e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7862:	4718      	bx	r3
   b7864:	b002      	add	sp, #8
   b7866:	bd70      	pop	{r4, r5, r6, pc}

000b7868 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7868:	b510      	push	{r4, lr}
   b786a:	4b03      	ldr	r3, [pc, #12]	; (b7878 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b786c:	6003      	str	r3, [r0, #0]
   b786e:	4604      	mov	r4, r0
   b7870:	f7ff ffa6 	bl	b77c0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7874:	4620      	mov	r0, r4
   b7876:	bd10      	pop	{r4, pc}
   b7878:	000b8200 	.word	0x000b8200

000b787c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b787c:	b510      	push	{r4, lr}
   b787e:	4604      	mov	r4, r0
   b7880:	f7ff fff2 	bl	b7868 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7884:	4620      	mov	r0, r4
   b7886:	210c      	movs	r1, #12
   b7888:	f7fc fc19 	bl	b40be <_ZdlPvj>
   b788c:	4620      	mov	r0, r4
   b788e:	bd10      	pop	{r4, pc}

000b7890 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7892:	9f08      	ldr	r7, [sp, #32]
   b7894:	4297      	cmp	r7, r2
   b7896:	4605      	mov	r5, r0
   b7898:	460e      	mov	r6, r1
   b789a:	4614      	mov	r4, r2
   b789c:	d00a      	beq.n	b78b4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b789e:	68a8      	ldr	r0, [r5, #8]
   b78a0:	6802      	ldr	r2, [r0, #0]
   b78a2:	9708      	str	r7, [sp, #32]
   b78a4:	6a15      	ldr	r5, [r2, #32]
   b78a6:	4631      	mov	r1, r6
   b78a8:	4622      	mov	r2, r4
   b78aa:	46ac      	mov	ip, r5
   b78ac:	b003      	add	sp, #12
   b78ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b78b2:	4760      	bx	ip
   b78b4:	4619      	mov	r1, r3
   b78b6:	9301      	str	r3, [sp, #4]
   b78b8:	f000 f858 	bl	b796c <_ZNKSt9type_infoeqERKS_>
   b78bc:	9b01      	ldr	r3, [sp, #4]
   b78be:	2800      	cmp	r0, #0
   b78c0:	d0ed      	beq.n	b789e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b78c2:	2006      	movs	r0, #6
   b78c4:	b003      	add	sp, #12
   b78c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b78c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b78c8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b78cc:	460d      	mov	r5, r1
   b78ce:	4619      	mov	r1, r3
   b78d0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b78d4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b78d8:	4681      	mov	r9, r0
   b78da:	4617      	mov	r7, r2
   b78dc:	4698      	mov	r8, r3
   b78de:	f000 f845 	bl	b796c <_ZNKSt9type_infoeqERKS_>
   b78e2:	b190      	cbz	r0, b790a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b78e4:	2d00      	cmp	r5, #0
   b78e6:	6034      	str	r4, [r6, #0]
   b78e8:	7137      	strb	r7, [r6, #4]
   b78ea:	db09      	blt.n	b7900 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b78ec:	1961      	adds	r1, r4, r5
   b78ee:	458a      	cmp	sl, r1
   b78f0:	bf0c      	ite	eq
   b78f2:	2106      	moveq	r1, #6
   b78f4:	2101      	movne	r1, #1
   b78f6:	71b1      	strb	r1, [r6, #6]
   b78f8:	2000      	movs	r0, #0
   b78fa:	b001      	add	sp, #4
   b78fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7900:	3502      	adds	r5, #2
   b7902:	d1f9      	bne.n	b78f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7904:	2301      	movs	r3, #1
   b7906:	71b3      	strb	r3, [r6, #6]
   b7908:	e7f6      	b.n	b78f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b790a:	4554      	cmp	r4, sl
   b790c:	d106      	bne.n	b791c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b790e:	4659      	mov	r1, fp
   b7910:	4648      	mov	r0, r9
   b7912:	f000 f82b 	bl	b796c <_ZNKSt9type_infoeqERKS_>
   b7916:	b108      	cbz	r0, b791c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7918:	7177      	strb	r7, [r6, #5]
   b791a:	e7ed      	b.n	b78f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b791c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7920:	6803      	ldr	r3, [r0, #0]
   b7922:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7926:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b792a:	69dc      	ldr	r4, [r3, #28]
   b792c:	463a      	mov	r2, r7
   b792e:	4643      	mov	r3, r8
   b7930:	4629      	mov	r1, r5
   b7932:	46a4      	mov	ip, r4
   b7934:	b001      	add	sp, #4
   b7936:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b793a:	4760      	bx	ip

000b793c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b793c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7940:	4607      	mov	r7, r0
   b7942:	460c      	mov	r4, r1
   b7944:	4615      	mov	r5, r2
   b7946:	461e      	mov	r6, r3
   b7948:	f7ff ff6d 	bl	b7826 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b794c:	b948      	cbnz	r0, b7962 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b794e:	68b8      	ldr	r0, [r7, #8]
   b7950:	6803      	ldr	r3, [r0, #0]
   b7952:	699f      	ldr	r7, [r3, #24]
   b7954:	462a      	mov	r2, r5
   b7956:	4633      	mov	r3, r6
   b7958:	4621      	mov	r1, r4
   b795a:	46bc      	mov	ip, r7
   b795c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7960:	4760      	bx	ip
   b7962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7966 <_ZNSt9type_infoD1Ev>:
   b7966:	4770      	bx	lr

000b7968 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7968:	2000      	movs	r0, #0
   b796a:	4770      	bx	lr

000b796c <_ZNKSt9type_infoeqERKS_>:
   b796c:	4281      	cmp	r1, r0
   b796e:	b508      	push	{r3, lr}
   b7970:	d00e      	beq.n	b7990 <_ZNKSt9type_infoeqERKS_+0x24>
   b7972:	6840      	ldr	r0, [r0, #4]
   b7974:	7803      	ldrb	r3, [r0, #0]
   b7976:	2b2a      	cmp	r3, #42	; 0x2a
   b7978:	d00c      	beq.n	b7994 <_ZNKSt9type_infoeqERKS_+0x28>
   b797a:	6849      	ldr	r1, [r1, #4]
   b797c:	780b      	ldrb	r3, [r1, #0]
   b797e:	2b2a      	cmp	r3, #42	; 0x2a
   b7980:	bf08      	it	eq
   b7982:	3101      	addeq	r1, #1
   b7984:	f7fc fb4a 	bl	b401c <strcmp>
   b7988:	fab0 f080 	clz	r0, r0
   b798c:	0940      	lsrs	r0, r0, #5
   b798e:	bd08      	pop	{r3, pc}
   b7990:	2001      	movs	r0, #1
   b7992:	e7fc      	b.n	b798e <_ZNKSt9type_infoeqERKS_+0x22>
   b7994:	2000      	movs	r0, #0
   b7996:	e7fa      	b.n	b798e <_ZNKSt9type_infoeqERKS_+0x22>

000b7998 <atexit>:
   b7998:	2300      	movs	r3, #0
   b799a:	4601      	mov	r1, r0
   b799c:	461a      	mov	r2, r3
   b799e:	4618      	mov	r0, r3
   b79a0:	f000 b95c 	b.w	b7c5c <__register_exitproc>

000b79a4 <atoi>:
   b79a4:	220a      	movs	r2, #10
   b79a6:	2100      	movs	r1, #0
   b79a8:	f000 b94e 	b.w	b7c48 <strtol>

000b79ac <isprint>:
   b79ac:	4b02      	ldr	r3, [pc, #8]	; (b79b8 <isprint+0xc>)
   b79ae:	4418      	add	r0, r3
   b79b0:	7840      	ldrb	r0, [r0, #1]
   b79b2:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b79b6:	4770      	bx	lr
   b79b8:	000b82a9 	.word	0x000b82a9

000b79bc <memcpy>:
   b79bc:	440a      	add	r2, r1
   b79be:	4291      	cmp	r1, r2
   b79c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b79c4:	d100      	bne.n	b79c8 <memcpy+0xc>
   b79c6:	4770      	bx	lr
   b79c8:	b510      	push	{r4, lr}
   b79ca:	f811 4b01 	ldrb.w	r4, [r1], #1
   b79ce:	f803 4f01 	strb.w	r4, [r3, #1]!
   b79d2:	4291      	cmp	r1, r2
   b79d4:	d1f9      	bne.n	b79ca <memcpy+0xe>
   b79d6:	bd10      	pop	{r4, pc}

000b79d8 <memmove>:
   b79d8:	4288      	cmp	r0, r1
   b79da:	b510      	push	{r4, lr}
   b79dc:	eb01 0402 	add.w	r4, r1, r2
   b79e0:	d902      	bls.n	b79e8 <memmove+0x10>
   b79e2:	4284      	cmp	r4, r0
   b79e4:	4623      	mov	r3, r4
   b79e6:	d807      	bhi.n	b79f8 <memmove+0x20>
   b79e8:	1e43      	subs	r3, r0, #1
   b79ea:	42a1      	cmp	r1, r4
   b79ec:	d008      	beq.n	b7a00 <memmove+0x28>
   b79ee:	f811 2b01 	ldrb.w	r2, [r1], #1
   b79f2:	f803 2f01 	strb.w	r2, [r3, #1]!
   b79f6:	e7f8      	b.n	b79ea <memmove+0x12>
   b79f8:	4402      	add	r2, r0
   b79fa:	4601      	mov	r1, r0
   b79fc:	428a      	cmp	r2, r1
   b79fe:	d100      	bne.n	b7a02 <memmove+0x2a>
   b7a00:	bd10      	pop	{r4, pc}
   b7a02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b7a06:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b7a0a:	e7f7      	b.n	b79fc <memmove+0x24>

000b7a0c <memset>:
   b7a0c:	4402      	add	r2, r0
   b7a0e:	4603      	mov	r3, r0
   b7a10:	4293      	cmp	r3, r2
   b7a12:	d100      	bne.n	b7a16 <memset+0xa>
   b7a14:	4770      	bx	lr
   b7a16:	f803 1b01 	strb.w	r1, [r3], #1
   b7a1a:	e7f9      	b.n	b7a10 <memset+0x4>

000b7a1c <srand>:
   b7a1c:	b538      	push	{r3, r4, r5, lr}
   b7a1e:	4b10      	ldr	r3, [pc, #64]	; (b7a60 <srand+0x44>)
   b7a20:	681d      	ldr	r5, [r3, #0]
   b7a22:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7a24:	4604      	mov	r4, r0
   b7a26:	b9b3      	cbnz	r3, b7a56 <srand+0x3a>
   b7a28:	2018      	movs	r0, #24
   b7a2a:	f7fd f899 	bl	b4b60 <malloc>
   b7a2e:	4602      	mov	r2, r0
   b7a30:	63a8      	str	r0, [r5, #56]	; 0x38
   b7a32:	b920      	cbnz	r0, b7a3e <srand+0x22>
   b7a34:	4b0b      	ldr	r3, [pc, #44]	; (b7a64 <srand+0x48>)
   b7a36:	480c      	ldr	r0, [pc, #48]	; (b7a68 <srand+0x4c>)
   b7a38:	2142      	movs	r1, #66	; 0x42
   b7a3a:	f7fd f8c9 	bl	b4bd0 <__assert_func>
   b7a3e:	490b      	ldr	r1, [pc, #44]	; (b7a6c <srand+0x50>)
   b7a40:	4b0b      	ldr	r3, [pc, #44]	; (b7a70 <srand+0x54>)
   b7a42:	e9c0 1300 	strd	r1, r3, [r0]
   b7a46:	4b0b      	ldr	r3, [pc, #44]	; (b7a74 <srand+0x58>)
   b7a48:	6083      	str	r3, [r0, #8]
   b7a4a:	230b      	movs	r3, #11
   b7a4c:	8183      	strh	r3, [r0, #12]
   b7a4e:	2100      	movs	r1, #0
   b7a50:	2001      	movs	r0, #1
   b7a52:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7a56:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7a58:	2200      	movs	r2, #0
   b7a5a:	611c      	str	r4, [r3, #16]
   b7a5c:	615a      	str	r2, [r3, #20]
   b7a5e:	bd38      	pop	{r3, r4, r5, pc}
   b7a60:	2003dd70 	.word	0x2003dd70
   b7a64:	000b8239 	.word	0x000b8239
   b7a68:	000b8250 	.word	0x000b8250
   b7a6c:	abcd330e 	.word	0xabcd330e
   b7a70:	e66d1234 	.word	0xe66d1234
   b7a74:	0005deec 	.word	0x0005deec

000b7a78 <strchr>:
   b7a78:	b2c9      	uxtb	r1, r1
   b7a7a:	4603      	mov	r3, r0
   b7a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7a80:	b11a      	cbz	r2, b7a8a <strchr+0x12>
   b7a82:	428a      	cmp	r2, r1
   b7a84:	d1f9      	bne.n	b7a7a <strchr+0x2>
   b7a86:	4618      	mov	r0, r3
   b7a88:	4770      	bx	lr
   b7a8a:	2900      	cmp	r1, #0
   b7a8c:	bf18      	it	ne
   b7a8e:	2300      	movne	r3, #0
   b7a90:	e7f9      	b.n	b7a86 <strchr+0xe>

000b7a92 <strchrnul>:
   b7a92:	b510      	push	{r4, lr}
   b7a94:	4604      	mov	r4, r0
   b7a96:	f7ff ffef 	bl	b7a78 <strchr>
   b7a9a:	b918      	cbnz	r0, b7aa4 <strchrnul+0x12>
   b7a9c:	4620      	mov	r0, r4
   b7a9e:	f7fc fac7 	bl	b4030 <strlen>
   b7aa2:	4420      	add	r0, r4
   b7aa4:	bd10      	pop	{r4, pc}

000b7aa6 <strcpy>:
   b7aa6:	4603      	mov	r3, r0
   b7aa8:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7aac:	f803 2b01 	strb.w	r2, [r3], #1
   b7ab0:	2a00      	cmp	r2, #0
   b7ab2:	d1f9      	bne.n	b7aa8 <strcpy+0x2>
   b7ab4:	4770      	bx	lr
	...

000b7ab8 <strdup>:
   b7ab8:	4b02      	ldr	r3, [pc, #8]	; (b7ac4 <strdup+0xc>)
   b7aba:	4601      	mov	r1, r0
   b7abc:	6818      	ldr	r0, [r3, #0]
   b7abe:	f000 b803 	b.w	b7ac8 <_strdup_r>
   b7ac2:	bf00      	nop
   b7ac4:	2003dd70 	.word	0x2003dd70

000b7ac8 <_strdup_r>:
   b7ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7aca:	4604      	mov	r4, r0
   b7acc:	4608      	mov	r0, r1
   b7ace:	460d      	mov	r5, r1
   b7ad0:	f7fc faae 	bl	b4030 <strlen>
   b7ad4:	1c42      	adds	r2, r0, #1
   b7ad6:	4611      	mov	r1, r2
   b7ad8:	4620      	mov	r0, r4
   b7ada:	9201      	str	r2, [sp, #4]
   b7adc:	f7fd f868 	bl	b4bb0 <_malloc_r>
   b7ae0:	4604      	mov	r4, r0
   b7ae2:	b118      	cbz	r0, b7aec <_strdup_r+0x24>
   b7ae4:	9a01      	ldr	r2, [sp, #4]
   b7ae6:	4629      	mov	r1, r5
   b7ae8:	f7ff ff68 	bl	b79bc <memcpy>
   b7aec:	4620      	mov	r0, r4
   b7aee:	b003      	add	sp, #12
   b7af0:	bd30      	pop	{r4, r5, pc}

000b7af2 <strncmp>:
   b7af2:	b510      	push	{r4, lr}
   b7af4:	b17a      	cbz	r2, b7b16 <strncmp+0x24>
   b7af6:	4603      	mov	r3, r0
   b7af8:	3901      	subs	r1, #1
   b7afa:	1884      	adds	r4, r0, r2
   b7afc:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7b00:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7b04:	4290      	cmp	r0, r2
   b7b06:	d101      	bne.n	b7b0c <strncmp+0x1a>
   b7b08:	42a3      	cmp	r3, r4
   b7b0a:	d101      	bne.n	b7b10 <strncmp+0x1e>
   b7b0c:	1a80      	subs	r0, r0, r2
   b7b0e:	bd10      	pop	{r4, pc}
   b7b10:	2800      	cmp	r0, #0
   b7b12:	d1f3      	bne.n	b7afc <strncmp+0xa>
   b7b14:	e7fa      	b.n	b7b0c <strncmp+0x1a>
   b7b16:	4610      	mov	r0, r2
   b7b18:	e7f9      	b.n	b7b0e <strncmp+0x1c>

000b7b1a <strrchr>:
   b7b1a:	b538      	push	{r3, r4, r5, lr}
   b7b1c:	4603      	mov	r3, r0
   b7b1e:	460c      	mov	r4, r1
   b7b20:	b969      	cbnz	r1, b7b3e <strrchr+0x24>
   b7b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7b26:	f7ff bfa7 	b.w	b7a78 <strchr>
   b7b2a:	1c43      	adds	r3, r0, #1
   b7b2c:	4605      	mov	r5, r0
   b7b2e:	4621      	mov	r1, r4
   b7b30:	4618      	mov	r0, r3
   b7b32:	f7ff ffa1 	bl	b7a78 <strchr>
   b7b36:	2800      	cmp	r0, #0
   b7b38:	d1f7      	bne.n	b7b2a <strrchr+0x10>
   b7b3a:	4628      	mov	r0, r5
   b7b3c:	bd38      	pop	{r3, r4, r5, pc}
   b7b3e:	2500      	movs	r5, #0
   b7b40:	e7f5      	b.n	b7b2e <strrchr+0x14>
	...

000b7b44 <_strtol_l.constprop.0>:
   b7b44:	2b01      	cmp	r3, #1
   b7b46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7b4a:	d001      	beq.n	b7b50 <_strtol_l.constprop.0+0xc>
   b7b4c:	2b24      	cmp	r3, #36	; 0x24
   b7b4e:	d906      	bls.n	b7b5e <_strtol_l.constprop.0+0x1a>
   b7b50:	f7fd f836 	bl	b4bc0 <__errno>
   b7b54:	2316      	movs	r3, #22
   b7b56:	6003      	str	r3, [r0, #0]
   b7b58:	2000      	movs	r0, #0
   b7b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7b5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b7c44 <_strtol_l.constprop.0+0x100>
   b7b62:	460d      	mov	r5, r1
   b7b64:	462e      	mov	r6, r5
   b7b66:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7b6a:	f814 700c 	ldrb.w	r7, [r4, ip]
   b7b6e:	f017 0708 	ands.w	r7, r7, #8
   b7b72:	d1f7      	bne.n	b7b64 <_strtol_l.constprop.0+0x20>
   b7b74:	2c2d      	cmp	r4, #45	; 0x2d
   b7b76:	d132      	bne.n	b7bde <_strtol_l.constprop.0+0x9a>
   b7b78:	782c      	ldrb	r4, [r5, #0]
   b7b7a:	2701      	movs	r7, #1
   b7b7c:	1cb5      	adds	r5, r6, #2
   b7b7e:	2b00      	cmp	r3, #0
   b7b80:	d05b      	beq.n	b7c3a <_strtol_l.constprop.0+0xf6>
   b7b82:	2b10      	cmp	r3, #16
   b7b84:	d109      	bne.n	b7b9a <_strtol_l.constprop.0+0x56>
   b7b86:	2c30      	cmp	r4, #48	; 0x30
   b7b88:	d107      	bne.n	b7b9a <_strtol_l.constprop.0+0x56>
   b7b8a:	782c      	ldrb	r4, [r5, #0]
   b7b8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b7b90:	2c58      	cmp	r4, #88	; 0x58
   b7b92:	d14d      	bne.n	b7c30 <_strtol_l.constprop.0+0xec>
   b7b94:	786c      	ldrb	r4, [r5, #1]
   b7b96:	2310      	movs	r3, #16
   b7b98:	3502      	adds	r5, #2
   b7b9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b7b9e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7ba2:	f04f 0c00 	mov.w	ip, #0
   b7ba6:	fbb8 f9f3 	udiv	r9, r8, r3
   b7baa:	4666      	mov	r6, ip
   b7bac:	fb03 8a19 	mls	sl, r3, r9, r8
   b7bb0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b7bb4:	f1be 0f09 	cmp.w	lr, #9
   b7bb8:	d816      	bhi.n	b7be8 <_strtol_l.constprop.0+0xa4>
   b7bba:	4674      	mov	r4, lr
   b7bbc:	42a3      	cmp	r3, r4
   b7bbe:	dd24      	ble.n	b7c0a <_strtol_l.constprop.0+0xc6>
   b7bc0:	f1bc 0f00 	cmp.w	ip, #0
   b7bc4:	db1e      	blt.n	b7c04 <_strtol_l.constprop.0+0xc0>
   b7bc6:	45b1      	cmp	r9, r6
   b7bc8:	d31c      	bcc.n	b7c04 <_strtol_l.constprop.0+0xc0>
   b7bca:	d101      	bne.n	b7bd0 <_strtol_l.constprop.0+0x8c>
   b7bcc:	45a2      	cmp	sl, r4
   b7bce:	db19      	blt.n	b7c04 <_strtol_l.constprop.0+0xc0>
   b7bd0:	fb06 4603 	mla	r6, r6, r3, r4
   b7bd4:	f04f 0c01 	mov.w	ip, #1
   b7bd8:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7bdc:	e7e8      	b.n	b7bb0 <_strtol_l.constprop.0+0x6c>
   b7bde:	2c2b      	cmp	r4, #43	; 0x2b
   b7be0:	bf04      	itt	eq
   b7be2:	782c      	ldrbeq	r4, [r5, #0]
   b7be4:	1cb5      	addeq	r5, r6, #2
   b7be6:	e7ca      	b.n	b7b7e <_strtol_l.constprop.0+0x3a>
   b7be8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b7bec:	f1be 0f19 	cmp.w	lr, #25
   b7bf0:	d801      	bhi.n	b7bf6 <_strtol_l.constprop.0+0xb2>
   b7bf2:	3c37      	subs	r4, #55	; 0x37
   b7bf4:	e7e2      	b.n	b7bbc <_strtol_l.constprop.0+0x78>
   b7bf6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b7bfa:	f1be 0f19 	cmp.w	lr, #25
   b7bfe:	d804      	bhi.n	b7c0a <_strtol_l.constprop.0+0xc6>
   b7c00:	3c57      	subs	r4, #87	; 0x57
   b7c02:	e7db      	b.n	b7bbc <_strtol_l.constprop.0+0x78>
   b7c04:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b7c08:	e7e6      	b.n	b7bd8 <_strtol_l.constprop.0+0x94>
   b7c0a:	f1bc 0f00 	cmp.w	ip, #0
   b7c0e:	da05      	bge.n	b7c1c <_strtol_l.constprop.0+0xd8>
   b7c10:	2322      	movs	r3, #34	; 0x22
   b7c12:	6003      	str	r3, [r0, #0]
   b7c14:	4646      	mov	r6, r8
   b7c16:	b942      	cbnz	r2, b7c2a <_strtol_l.constprop.0+0xe6>
   b7c18:	4630      	mov	r0, r6
   b7c1a:	e79e      	b.n	b7b5a <_strtol_l.constprop.0+0x16>
   b7c1c:	b107      	cbz	r7, b7c20 <_strtol_l.constprop.0+0xdc>
   b7c1e:	4276      	negs	r6, r6
   b7c20:	2a00      	cmp	r2, #0
   b7c22:	d0f9      	beq.n	b7c18 <_strtol_l.constprop.0+0xd4>
   b7c24:	f1bc 0f00 	cmp.w	ip, #0
   b7c28:	d000      	beq.n	b7c2c <_strtol_l.constprop.0+0xe8>
   b7c2a:	1e69      	subs	r1, r5, #1
   b7c2c:	6011      	str	r1, [r2, #0]
   b7c2e:	e7f3      	b.n	b7c18 <_strtol_l.constprop.0+0xd4>
   b7c30:	2430      	movs	r4, #48	; 0x30
   b7c32:	2b00      	cmp	r3, #0
   b7c34:	d1b1      	bne.n	b7b9a <_strtol_l.constprop.0+0x56>
   b7c36:	2308      	movs	r3, #8
   b7c38:	e7af      	b.n	b7b9a <_strtol_l.constprop.0+0x56>
   b7c3a:	2c30      	cmp	r4, #48	; 0x30
   b7c3c:	d0a5      	beq.n	b7b8a <_strtol_l.constprop.0+0x46>
   b7c3e:	230a      	movs	r3, #10
   b7c40:	e7ab      	b.n	b7b9a <_strtol_l.constprop.0+0x56>
   b7c42:	bf00      	nop
   b7c44:	000b82aa 	.word	0x000b82aa

000b7c48 <strtol>:
   b7c48:	4613      	mov	r3, r2
   b7c4a:	460a      	mov	r2, r1
   b7c4c:	4601      	mov	r1, r0
   b7c4e:	4802      	ldr	r0, [pc, #8]	; (b7c58 <strtol+0x10>)
   b7c50:	6800      	ldr	r0, [r0, #0]
   b7c52:	f7ff bf77 	b.w	b7b44 <_strtol_l.constprop.0>
   b7c56:	bf00      	nop
   b7c58:	2003dd70 	.word	0x2003dd70

000b7c5c <__register_exitproc>:
   b7c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7c60:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7d1c <__register_exitproc+0xc0>
   b7c64:	4606      	mov	r6, r0
   b7c66:	f8d8 0000 	ldr.w	r0, [r8]
   b7c6a:	461f      	mov	r7, r3
   b7c6c:	460d      	mov	r5, r1
   b7c6e:	4691      	mov	r9, r2
   b7c70:	f000 f856 	bl	b7d20 <__retarget_lock_acquire_recursive>
   b7c74:	4b25      	ldr	r3, [pc, #148]	; (b7d0c <__register_exitproc+0xb0>)
   b7c76:	681c      	ldr	r4, [r3, #0]
   b7c78:	b934      	cbnz	r4, b7c88 <__register_exitproc+0x2c>
   b7c7a:	4c25      	ldr	r4, [pc, #148]	; (b7d10 <__register_exitproc+0xb4>)
   b7c7c:	601c      	str	r4, [r3, #0]
   b7c7e:	4b25      	ldr	r3, [pc, #148]	; (b7d14 <__register_exitproc+0xb8>)
   b7c80:	b113      	cbz	r3, b7c88 <__register_exitproc+0x2c>
   b7c82:	681b      	ldr	r3, [r3, #0]
   b7c84:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7c88:	6863      	ldr	r3, [r4, #4]
   b7c8a:	2b1f      	cmp	r3, #31
   b7c8c:	dd07      	ble.n	b7c9e <__register_exitproc+0x42>
   b7c8e:	f8d8 0000 	ldr.w	r0, [r8]
   b7c92:	f000 f847 	bl	b7d24 <__retarget_lock_release_recursive>
   b7c96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7c9e:	b34e      	cbz	r6, b7cf4 <__register_exitproc+0x98>
   b7ca0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7ca4:	b988      	cbnz	r0, b7cca <__register_exitproc+0x6e>
   b7ca6:	4b1c      	ldr	r3, [pc, #112]	; (b7d18 <__register_exitproc+0xbc>)
   b7ca8:	b923      	cbnz	r3, b7cb4 <__register_exitproc+0x58>
   b7caa:	f8d8 0000 	ldr.w	r0, [r8]
   b7cae:	f000 f838 	bl	b7d22 <__retarget_lock_release>
   b7cb2:	e7f0      	b.n	b7c96 <__register_exitproc+0x3a>
   b7cb4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7cb8:	f7fc ff52 	bl	b4b60 <malloc>
   b7cbc:	2800      	cmp	r0, #0
   b7cbe:	d0f4      	beq.n	b7caa <__register_exitproc+0x4e>
   b7cc0:	2300      	movs	r3, #0
   b7cc2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7cc6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7cca:	6863      	ldr	r3, [r4, #4]
   b7ccc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7cd0:	2201      	movs	r2, #1
   b7cd2:	409a      	lsls	r2, r3
   b7cd4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7cd8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7cdc:	4313      	orrs	r3, r2
   b7cde:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7ce2:	2e02      	cmp	r6, #2
   b7ce4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7ce8:	bf02      	ittt	eq
   b7cea:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7cee:	4313      	orreq	r3, r2
   b7cf0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7cf4:	6863      	ldr	r3, [r4, #4]
   b7cf6:	f8d8 0000 	ldr.w	r0, [r8]
   b7cfa:	1c5a      	adds	r2, r3, #1
   b7cfc:	3302      	adds	r3, #2
   b7cfe:	6062      	str	r2, [r4, #4]
   b7d00:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7d04:	f000 f80e 	bl	b7d24 <__retarget_lock_release_recursive>
   b7d08:	2000      	movs	r0, #0
   b7d0a:	e7c6      	b.n	b7c9a <__register_exitproc+0x3e>
   b7d0c:	2003e7f4 	.word	0x2003e7f4
   b7d10:	2003e768 	.word	0x2003e768
   b7d14:	00000000 	.word	0x00000000
   b7d18:	000b4b61 	.word	0x000b4b61
   b7d1c:	2003ddd4 	.word	0x2003ddd4

000b7d20 <__retarget_lock_acquire_recursive>:
   b7d20:	4770      	bx	lr

000b7d22 <__retarget_lock_release>:
   b7d22:	4770      	bx	lr

000b7d24 <__retarget_lock_release_recursive>:
   b7d24:	4770      	bx	lr

000b7d26 <link_code_end>:
	...

000b7d28 <dynalib_user>:
   b7d28:	4041 000b 407d 000b 40a5 000b 40a9 000b     A@..}@...@...@..
   b7d38:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b7d48:	7620 7269 7574 6c61 2000 5448 5054 312f      virtual. HTTP/1
   b7d58:	302e 0a0d 6300 6f6c 6573 4300 6e6f 656e     .0...close.Conne
   b7d68:	7463 6f69 006e 4f48 5453 4300 6e6f 6574     ction.HOST.Conte
   b7d78:	746e 4c2d 6e65 7467 0068 4f50 5453 7600     nt-Length.POST.v
   b7d88:	6c61 6575 3100 2e30 2e30 2e30 3737 0000     alue.10.0.0.77..

000b7d98 <_ZTVN5spark10LogHandlerE>:
	...
   b7da8:	40c5 000b 43c1 000b                         .@...C..

000b7db0 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b7db8:	43c5 000b 43f9 000b 6481 000b 6625 000b     .C...C...d..%f..
   b7dc8:	6f43 746e 6e65 2d74 7954 6570 6100 7070     Content-Type.app
   b7dd8:	696c 6163 6974 6e6f 6a2f 6f73 006e 6341     lication/json.Ac
   b7de8:	6563 7470 2a00 2a2f 0000 0000               cept.*/*....

000b7df4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b7dfc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7e04:	4cdd 000b 4ce3 000b 4d21 000b 4cf1 000b     .L...L..!M...L..
   b7e14:	4cdf 000b                                   .L..

000b7e18 <_ZTVN5spark13EthernetClassE>:
	...
   b7e20:	526b 000b 5261 000b 5257 000b 524d 000b     kR..aR..WR..MR..
   b7e30:	5241 000b 5235 000b 6811 000b 6819 000b     AR..5R...h...h..
   b7e40:	5229 000b 5221 000b 5217 000b 520d 000b     )R..!R...R...R..
   b7e50:	6941 000b 6849 000b 6851 000b               Ai..Ih..Qh..

000b7e5c <_ZTV7TwoWire>:
	...
   b7e64:	5289 000b 52d3 000b 52ab 000b 528b 000b     .R...R...R...R..
   b7e74:	52b3 000b 52bb 000b 52c3 000b 52cb 000b     .R...R...R...R..
   b7e84:	6a7b 000b                                   {j..

000b7e88 <_ZTV9IPAddress>:
	...
   b7e90:	532d 000b 531d 000b 531f 000b 7525 7500     -S...S...S..%u.u
   b7ea0:	3025 7834 0000 0000                         %04x....

000b7ea8 <_ZTVN5spark16JSONBufferWriterE>:
	...
   b7eb0:	5467 000b 5469 000b 5477 000b 549d 000b     gT..iT..wT...T..
   b7ec0:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   b7ed0:	6c61 0031 534a 4e4f 7453 6572 6d61 6f4c     al1.JSONStreamLo
   b7ee0:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   b7ef0:	7530 0020 205d 2c00 0020 2928 203a 2000     0u .] ., .(): . 
   b7f00:	005b 6f63 6564 3d20 0020 6925 6400 7465     [.code = .%i.det
   b7f10:	6961 736c 3d20 0020 006d 0066 6e6c 6600     ails = .m.f.ln.f
   b7f20:	006e 6f63 6564 6400 7465 6961 006c 0000     n.code.detail...

000b7f30 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b7f38:	5901 000b 5927 000b 58d9 000b 54d3 000b     .Y..'Y...X...T..

000b7f48 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b7f50:	5d89 000b 5da1 000b 6481 000b 6625 000b     .]...]...d..%f..

000b7f60 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b7f68:	5db5 000b 5dc9 000b 665d 000b 58ed 000b     .]...]..]f...X..

000b7f78 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b7f80:	58ff 000b 5935 000b 63e5 000b 58ef 000b     .X..5Y...c...X..

000b7f90 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b7f98:	58fd 000b 5943 000b 5cf1 000b 5965 000b     .X..CY...\..eY..

000b7fa8 <CSWTCH.109>:
   b7fa8:	e694 2003 e718 2003 e6d4 2003               ... ... ... 

000b7fb4 <_ZTVN5spark12NetworkClassE>:
	...
   b7fbc:	67d1 000b 67db 000b 67e5 000b 67ef 000b     .g...g...g...g..
   b7fcc:	67f9 000b 6805 000b 6811 000b 6819 000b     .g...h...h...h..
   b7fdc:	6821 000b 682d 000b 6835 000b 683f 000b     !h..-h..5h..?h..
   b7fec:	6941 000b 6849 000b 6851 000b 6977 6972     Ai..Ih..Qh..wiri
   b7ffc:	676e 7200 6365 2076 7265 6f72 2072 203d     ng.recv error = 
   b800c:	6425 0000                                   %d..

000b8010 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8018:	6cd9 000b 6cfd 000b 7227 000b 6d0b 000b     .l...l..'r...m..
   b8028:	6cdd 000b                                   .l..

000b802c <_ZTV9TCPClient>:
	...
   b8034:	6d89 000b 6dbd 000b 6c55 000b 6c6f 000b     .m...m..Ul..ol..
   b8044:	70bd 000b 6c99 000b 6f3b 000b 6ccd 000b     .p...l..;o...l..
   b8054:	6a7b 000b 6fcd 000b 6e0d 000b 6f69 000b     {j...o...n..io..
   b8064:	7171 000b 6f09 000b 6ccf 000b 6c81 000b     qq...o...l...l..
   b8074:	6d11 000b 6ded 000b 5925 252d 2d6d 6425     .m...m..%Y-%m-%d
   b8084:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b8094:	6d69 0065                                   ime.

000b8098 <_ZTV11USARTSerial>:
	...
   b80a0:	7241 000b 72ad 000b 7285 000b 6969 000b     Ar...r...r..ii..
   b80b0:	7255 000b 7271 000b 7263 000b 727f 000b     Ur..qr..cr...r..
   b80c0:	6a7b 000b 7243 000b 7247 000b               {j..Cr..Gr..

000b80cc <_ZTV9USBSerial>:
	...
   b80d4:	72ff 000b 7367 000b 733d 000b 6969 000b     .r..gs..=s..ii..
   b80e4:	732f 000b 7301 000b 7311 000b 7361 000b     /s...s...s..as..
   b80f4:	6a7b 000b 7321 000b 72f9 000b               {j..!s...r..

000b8100 <_ZTVN5spark9WiFiClassE>:
	...
   b8108:	7467 000b 745d 000b 7453 000b 7409 000b     gt..]t..St...t..
   b8118:	7447 000b 743b 000b 6811 000b 6819 000b     Gt..;t...h...h..
   b8128:	742f 000b 7427 000b 741d 000b 7413 000b     /t..'t...t...t..
   b8138:	6941 000b 6849 000b 6851 000b               Ai..Ih..Qh..

000b8144 <_ZSt7nothrow>:
	...

000b8145 <_ZTSSt19_Sp_make_shared_tag>:
   b8145:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b8155:	6572 5f64 6174 0067 0000                     red_tag....

000b8160 <_ZTISt19_Sp_make_shared_tag>:
   b8160:	81a0 000b 8145 000b                         ....E...

000b8168 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b8168:	8200 000b 8174 000b 8224 000b               ....t...$...

000b8174 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b8174:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b8184:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b8194:	0045 0000                                   E...

000b8198 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b8198:	0000 0000 8168 000b 77c1 000b 77d5 000b     ....h....w...w..
   b81a8:	7969 000b 7969 000b 783f 000b 7781 000b     iy..iy..?x...w..
   b81b8:	7827 000b 77e9 000b 77b3 000b               'x...w...w..

000b81c4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b81c4:	8200 000b 81d0 000b 8168 000b               ........h...

000b81d0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b81d0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b81e0:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b81f0:	666e 456f 0000 0000                         nfoE....

000b81f8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b81f8:	0000 0000 81c4 000b 7869 000b 787d 000b     ........ix..}x..
   b8208:	7969 000b 7969 000b 783f 000b 7781 000b     iy..iy..?x...w..
   b8218:	793d 000b 78c9 000b 7891 000b               =y...x...x..

000b8224 <_ZTISt9type_info>:
   b8224:	81a0 000b 822c 000b                         ....,...

000b822c <_ZTSSt9type_info>:
   b822c:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b823c:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b824c:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b825c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b826c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b827c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b828c:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b829c:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000b82a9 <_ctype_>:
   b82a9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b82b9:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b82c9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b82d9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b82e9:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b82f9:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b8309:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b8319:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b8329:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b83aa <link_const_data_end>:
	...

000b83ac <link_constructors_location>:
   b83ac:	000b4159 	.word	0x000b4159
   b83b0:	000b45c1 	.word	0x000b45c1
   b83b4:	000b4ccd 	.word	0x000b4ccd
   b83b8:	000b5275 	.word	0x000b5275
   b83bc:	000b6471 	.word	0x000b6471
   b83c0:	000b6955 	.word	0x000b6955
   b83c4:	000b6a31 	.word	0x000b6a31
   b83c8:	000b6c31 	.word	0x000b6c31
   b83cc:	000b722d 	.word	0x000b722d
   b83d0:	000b7471 	.word	0x000b7471
